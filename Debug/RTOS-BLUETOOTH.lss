
RTOS-BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007190  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407190  00407190  00017190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  00407198  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002fc  204009c8  00407b60  000209c8  2**2
                  ALLOC
  4 .stack        00002004  20400cc4  00407e5c  000209c8  2**0
                  ALLOC
  5 .heap         00000200  20402cc8  00409e60  000209c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00023032  00000000  00000000  00020a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004441  00000000  00000000  00043a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a4ff  00000000  00000000  00047ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001058  00000000  00000000  000523c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012b0  00000000  00000000  00053419  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022993  00000000  00000000  000546c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00011c41  00000000  00000000  0007705c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00095038  00000000  00000000  00088c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003498  00000000  00000000  0011dcd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c8 2c 40 20 0d 0d 40 00 0b 0d 40 00 0b 0d 40 00     .,@ ..@...@...@.
  400010:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e5 10 40 00 0b 0d 40 00 00 00 00 00 85 11 40 00     ..@...@.......@.
  40003c:	ed 11 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  40004c:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  40005c:	0b 0d 40 00 0b 0d 40 00 00 00 00 00 c9 07 40 00     ..@...@.......@.
  40006c:	dd 07 40 00 f1 07 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  40007c:	0b 0d 40 00 05 08 40 00 19 08 40 00 0b 0d 40 00     ..@...@...@...@.
  40008c:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  40009c:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  4000ac:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  4000bc:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  4000cc:	0b 0d 40 00 00 00 00 00 0b 0d 40 00 00 00 00 00     ..@.......@.....
  4000dc:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  4000ec:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  4000fc:	0b 0d 40 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ..@...@...@...@.
  40010c:	0b 0d 40 00 0b 0d 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 0b 0d 40 00 0b 0d 40 00 0b 0d 40 00     ......@...@...@.
  40012c:	0b 0d 40 00 0b 0d 40 00 00 00 00 00 0b 0d 40 00     ..@...@.......@.
  40013c:	0b 0d 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009c8 	.word	0x204009c8
  40015c:	00000000 	.word	0x00000000
  400160:	00407198 	.word	0x00407198

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00407198 	.word	0x00407198
  4001a0:	204009cc 	.word	0x204009cc
  4001a4:	00407198 	.word	0x00407198
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400ee1 	.word	0x00400ee1
  4001f8:	004008c9 	.word	0x004008c9
  4001fc:	0040091d 	.word	0x0040091d
  400200:	0040092d 	.word	0x0040092d
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	0040093d 	.word	0x0040093d
  400210:	0040082d 	.word	0x0040082d
  400214:	00400865 	.word	0x00400865
  400218:	00400dd5 	.word	0x00400dd5

0040021c <usart_serial_write_packet>:
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
  40021c:	2a00      	cmp	r2, #0
  40021e:	d054      	beq.n	4002ca <usart_serial_write_packet+0xae>
{
  400220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400224:	4692      	mov	sl, r2
  400226:	4606      	mov	r6, r0
  400228:	460f      	mov	r7, r1
  40022a:	448a      	add	sl, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  40022c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 4002e8 <usart_serial_write_packet+0xcc>
		while (uart_write((Uart*)p_usart, c)!=0);
  400230:	4d27      	ldr	r5, [pc, #156]	; (4002d0 <usart_serial_write_packet+0xb4>)
		return 1;
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400232:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4002ec <usart_serial_write_packet+0xd0>
  400236:	e006      	b.n	400246 <usart_serial_write_packet+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
  400238:	4621      	mov	r1, r4
  40023a:	4640      	mov	r0, r8
  40023c:	47a8      	blx	r5
  40023e:	2800      	cmp	r0, #0
  400240:	d1fa      	bne.n	400238 <usart_serial_write_packet+0x1c>
	while (len) {
  400242:	45ba      	cmp	sl, r7
  400244:	d03e      	beq.n	4002c4 <usart_serial_write_packet+0xa8>
		usart_serial_putchar(usart, *data);
  400246:	f817 4b01 	ldrb.w	r4, [r7], #1
	if (UART0 == (Uart*)p_usart) {
  40024a:	4546      	cmp	r6, r8
  40024c:	d0f4      	beq.n	400238 <usart_serial_write_packet+0x1c>
	if (UART1 == (Uart*)p_usart) {
  40024e:	454e      	cmp	r6, r9
  400250:	d016      	beq.n	400280 <usart_serial_write_packet+0x64>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  400252:	4b20      	ldr	r3, [pc, #128]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400254:	429e      	cmp	r6, r3
  400256:	d019      	beq.n	40028c <usart_serial_write_packet+0x70>
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  400258:	4b1f      	ldr	r3, [pc, #124]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40025a:	429e      	cmp	r6, r3
  40025c:	d01c      	beq.n	400298 <usart_serial_write_packet+0x7c>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  40025e:	4b1f      	ldr	r3, [pc, #124]	; (4002dc <usart_serial_write_packet+0xc0>)
  400260:	429e      	cmp	r6, r3
  400262:	d01f      	beq.n	4002a4 <usart_serial_write_packet+0x88>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400264:	4b1e      	ldr	r3, [pc, #120]	; (4002e0 <usart_serial_write_packet+0xc4>)
  400266:	429e      	cmp	r6, r3
  400268:	d024      	beq.n	4002b4 <usart_serial_write_packet+0x98>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  40026a:	4b1e      	ldr	r3, [pc, #120]	; (4002e4 <usart_serial_write_packet+0xc8>)
  40026c:	429e      	cmp	r6, r3
  40026e:	d1e8      	bne.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  400270:	f8df b07c 	ldr.w	fp, [pc, #124]	; 4002f0 <usart_serial_write_packet+0xd4>
  400274:	4621      	mov	r1, r4
  400276:	481b      	ldr	r0, [pc, #108]	; (4002e4 <usart_serial_write_packet+0xc8>)
  400278:	47d8      	blx	fp
  40027a:	2800      	cmp	r0, #0
  40027c:	d1fa      	bne.n	400274 <usart_serial_write_packet+0x58>
  40027e:	e7e0      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400280:	4621      	mov	r1, r4
  400282:	4648      	mov	r0, r9
  400284:	47a8      	blx	r5
  400286:	2800      	cmp	r0, #0
  400288:	d1fa      	bne.n	400280 <usart_serial_write_packet+0x64>
  40028a:	e7da      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  40028c:	4621      	mov	r1, r4
  40028e:	4811      	ldr	r0, [pc, #68]	; (4002d4 <usart_serial_write_packet+0xb8>)
  400290:	47a8      	blx	r5
  400292:	2800      	cmp	r0, #0
  400294:	d1fa      	bne.n	40028c <usart_serial_write_packet+0x70>
  400296:	e7d4      	b.n	400242 <usart_serial_write_packet+0x26>
		while (uart_write((Uart*)p_usart, c)!=0);
  400298:	4621      	mov	r1, r4
  40029a:	480f      	ldr	r0, [pc, #60]	; (4002d8 <usart_serial_write_packet+0xbc>)
  40029c:	47a8      	blx	r5
  40029e:	2800      	cmp	r0, #0
  4002a0:	d1fa      	bne.n	400298 <usart_serial_write_packet+0x7c>
  4002a2:	e7ce      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002a4:	f8df b048 	ldr.w	fp, [pc, #72]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002a8:	4621      	mov	r1, r4
  4002aa:	480c      	ldr	r0, [pc, #48]	; (4002dc <usart_serial_write_packet+0xc0>)
  4002ac:	47d8      	blx	fp
  4002ae:	2800      	cmp	r0, #0
  4002b0:	d1fa      	bne.n	4002a8 <usart_serial_write_packet+0x8c>
  4002b2:	e7c6      	b.n	400242 <usart_serial_write_packet+0x26>
		while (usart_write(p_usart, c)!=0);
  4002b4:	f8df b038 	ldr.w	fp, [pc, #56]	; 4002f0 <usart_serial_write_packet+0xd4>
  4002b8:	4621      	mov	r1, r4
  4002ba:	4809      	ldr	r0, [pc, #36]	; (4002e0 <usart_serial_write_packet+0xc4>)
  4002bc:	47d8      	blx	fp
  4002be:	2800      	cmp	r0, #0
  4002c0:	d1fa      	bne.n	4002b8 <usart_serial_write_packet+0x9c>
  4002c2:	e7be      	b.n	400242 <usart_serial_write_packet+0x26>
		len--;
		data++;
	}
	return STATUS_OK;
}
  4002c4:	2000      	movs	r0, #0
  4002c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4002ca:	2000      	movs	r0, #0
  4002cc:	4770      	bx	lr
  4002ce:	bf00      	nop
  4002d0:	00400bd3 	.word	0x00400bd3
  4002d4:	400e1a00 	.word	0x400e1a00
  4002d8:	400e1c00 	.word	0x400e1c00
  4002dc:	40024000 	.word	0x40024000
  4002e0:	40028000 	.word	0x40028000
  4002e4:	4002c000 	.word	0x4002c000
  4002e8:	400e0800 	.word	0x400e0800
  4002ec:	400e0a00 	.word	0x400e0a00
  4002f0:	00400cdd 	.word	0x00400cdd

004002f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  4002f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  4002f8:	b980      	cbnz	r0, 40031c <_read+0x28>
  4002fa:	460c      	mov	r4, r1
  4002fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  4002fe:	2a00      	cmp	r2, #0
  400300:	dd0f      	ble.n	400322 <_read+0x2e>
  400302:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400304:	4e08      	ldr	r6, [pc, #32]	; (400328 <_read+0x34>)
  400306:	4d09      	ldr	r5, [pc, #36]	; (40032c <_read+0x38>)
  400308:	6830      	ldr	r0, [r6, #0]
  40030a:	4621      	mov	r1, r4
  40030c:	682b      	ldr	r3, [r5, #0]
  40030e:	4798      	blx	r3
		ptr++;
  400310:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400312:	42bc      	cmp	r4, r7
  400314:	d1f8      	bne.n	400308 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400316:	4640      	mov	r0, r8
  400318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40031c:	f04f 38ff 	mov.w	r8, #4294967295
  400320:	e7f9      	b.n	400316 <_read+0x22>
	for (; len > 0; --len) {
  400322:	4680      	mov	r8, r0
  400324:	e7f7      	b.n	400316 <_read+0x22>
  400326:	bf00      	nop
  400328:	20400c10 	.word	0x20400c10
  40032c:	20400c08 	.word	0x20400c08

00400330 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400330:	3801      	subs	r0, #1
  400332:	2802      	cmp	r0, #2
  400334:	d815      	bhi.n	400362 <_write+0x32>
{
  400336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40033a:	460e      	mov	r6, r1
  40033c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40033e:	b19a      	cbz	r2, 400368 <_write+0x38>
  400340:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400342:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40037c <_write+0x4c>
  400346:	4f0c      	ldr	r7, [pc, #48]	; (400378 <_write+0x48>)
  400348:	f8d8 0000 	ldr.w	r0, [r8]
  40034c:	f815 1b01 	ldrb.w	r1, [r5], #1
  400350:	683b      	ldr	r3, [r7, #0]
  400352:	4798      	blx	r3
  400354:	2800      	cmp	r0, #0
  400356:	db0a      	blt.n	40036e <_write+0x3e>
  400358:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  40035a:	3c01      	subs	r4, #1
  40035c:	d1f4      	bne.n	400348 <_write+0x18>
  40035e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400362:	f04f 30ff 	mov.w	r0, #4294967295
  400366:	4770      	bx	lr
	for (; len != 0; --len) {
  400368:	4610      	mov	r0, r2
  40036a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40036e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400376:	bf00      	nop
  400378:	20400c0c 	.word	0x20400c0c
  40037c:	20400c10 	.word	0x20400c10

00400380 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400382:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400386:	4b5c      	ldr	r3, [pc, #368]	; (4004f8 <board_init+0x178>)
  400388:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40038e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400392:	4b5a      	ldr	r3, [pc, #360]	; (4004fc <board_init+0x17c>)
  400394:	2200      	movs	r2, #0
  400396:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40039a:	695a      	ldr	r2, [r3, #20]
  40039c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4003a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  4003a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4003a6:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4003aa:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  4003ae:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4003b2:	f007 0007 	and.w	r0, r7, #7
  4003b6:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  4003b8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4003bc:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  4003c0:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  4003c4:	f3bf 8f4f 	dsb	sy
  4003c8:	f04f 34ff 	mov.w	r4, #4294967295
  4003cc:	fa04 fc00 	lsl.w	ip, r4, r0
  4003d0:	fa06 f000 	lsl.w	r0, r6, r0
  4003d4:	fa04 f40e 	lsl.w	r4, r4, lr
  4003d8:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  4003dc:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  4003de:	463a      	mov	r2, r7
  4003e0:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  4003e2:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  4003e6:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  4003ea:	3a01      	subs	r2, #1
  4003ec:	4423      	add	r3, r4
  4003ee:	f1b2 3fff 	cmp.w	r2, #4294967295
  4003f2:	d1f6      	bne.n	4003e2 <board_init+0x62>
        } while(sets--);
  4003f4:	3e01      	subs	r6, #1
  4003f6:	4460      	add	r0, ip
  4003f8:	f1b6 3fff 	cmp.w	r6, #4294967295
  4003fc:	d1ef      	bne.n	4003de <board_init+0x5e>
  4003fe:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400402:	4b3e      	ldr	r3, [pc, #248]	; (4004fc <board_init+0x17c>)
  400404:	695a      	ldr	r2, [r3, #20]
  400406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  40040a:	615a      	str	r2, [r3, #20]
  40040c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400410:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400414:	4a3a      	ldr	r2, [pc, #232]	; (400500 <board_init+0x180>)
  400416:	493b      	ldr	r1, [pc, #236]	; (400504 <board_init+0x184>)
  400418:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40041a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40041e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400420:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400424:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400428:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40042c:	f022 0201 	bic.w	r2, r2, #1
  400430:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400434:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400438:	f022 0201 	bic.w	r2, r2, #1
  40043c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400440:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400444:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400448:	200a      	movs	r0, #10
  40044a:	4c2f      	ldr	r4, [pc, #188]	; (400508 <board_init+0x188>)
  40044c:	47a0      	blx	r4
  40044e:	200b      	movs	r0, #11
  400450:	47a0      	blx	r4
  400452:	200c      	movs	r0, #12
  400454:	47a0      	blx	r4
  400456:	2010      	movs	r0, #16
  400458:	47a0      	blx	r4
  40045a:	2011      	movs	r0, #17
  40045c:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40045e:	4b2b      	ldr	r3, [pc, #172]	; (40050c <board_init+0x18c>)
  400460:	f44f 7280 	mov.w	r2, #256	; 0x100
  400464:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400466:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40046a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40046c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400470:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400474:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400476:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40047a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40047c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400480:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400482:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400488:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40048a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40048e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400490:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400492:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400496:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400498:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40049c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4004a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4004a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004a8:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004ae:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004b0:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4004b6:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004b8:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004bc:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4004be:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004c0:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  4004c4:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004c6:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  4004c8:	4a11      	ldr	r2, [pc, #68]	; (400510 <board_init+0x190>)
  4004ca:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004ce:	f043 0310 	orr.w	r3, r3, #16
  4004d2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  4004d6:	4b0f      	ldr	r3, [pc, #60]	; (400514 <board_init+0x194>)
  4004d8:	2210      	movs	r2, #16
  4004da:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4004dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4004e0:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4004e2:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4004e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  4004e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4004ea:	4311      	orrs	r1, r2
  4004ec:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  4004ee:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4004f0:	4311      	orrs	r1, r2
  4004f2:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4004f4:	605a      	str	r2, [r3, #4]
  4004f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4004f8:	400e1850 	.word	0x400e1850
  4004fc:	e000ed00 	.word	0xe000ed00
  400500:	400e0c00 	.word	0x400e0c00
  400504:	5a00080c 	.word	0x5a00080c
  400508:	0040094d 	.word	0x0040094d
  40050c:	400e1200 	.word	0x400e1200
  400510:	40088000 	.word	0x40088000
  400514:	400e1000 	.word	0x400e1000

00400518 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400518:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  40051c:	0053      	lsls	r3, r2, #1
  40051e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400522:	fbb2 f2f3 	udiv	r2, r2, r3
  400526:	3a01      	subs	r2, #1
  400528:	f3c2 020d 	ubfx	r2, r2, #0, #14
  40052c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400530:	4770      	bx	lr

00400532 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400532:	6301      	str	r1, [r0, #48]	; 0x30
  400534:	4770      	bx	lr

00400536 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400536:	6341      	str	r1, [r0, #52]	; 0x34
  400538:	4770      	bx	lr

0040053a <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40053a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40053c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400540:	d03a      	beq.n	4005b8 <pio_set_peripheral+0x7e>
  400542:	d813      	bhi.n	40056c <pio_set_peripheral+0x32>
  400544:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400548:	d025      	beq.n	400596 <pio_set_peripheral+0x5c>
  40054a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40054e:	d10a      	bne.n	400566 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400550:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400552:	4313      	orrs	r3, r2
  400554:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400556:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400558:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40055a:	400b      	ands	r3, r1
  40055c:	ea23 0302 	bic.w	r3, r3, r2
  400560:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400562:	6042      	str	r2, [r0, #4]
  400564:	4770      	bx	lr
	switch (ul_type) {
  400566:	2900      	cmp	r1, #0
  400568:	d1fb      	bne.n	400562 <pio_set_peripheral+0x28>
  40056a:	4770      	bx	lr
  40056c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400570:	d021      	beq.n	4005b6 <pio_set_peripheral+0x7c>
  400572:	d809      	bhi.n	400588 <pio_set_peripheral+0x4e>
  400574:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400578:	d1f3      	bne.n	400562 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40057a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40057c:	4313      	orrs	r3, r2
  40057e:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400580:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400582:	4313      	orrs	r3, r2
  400584:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400586:	e7ec      	b.n	400562 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400588:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40058c:	d013      	beq.n	4005b6 <pio_set_peripheral+0x7c>
  40058e:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400592:	d010      	beq.n	4005b6 <pio_set_peripheral+0x7c>
  400594:	e7e5      	b.n	400562 <pio_set_peripheral+0x28>
{
  400596:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400598:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40059a:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40059c:	43d3      	mvns	r3, r2
  40059e:	4021      	ands	r1, r4
  4005a0:	461c      	mov	r4, r3
  4005a2:	4019      	ands	r1, r3
  4005a4:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4005a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005a8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4005aa:	400b      	ands	r3, r1
  4005ac:	4023      	ands	r3, r4
  4005ae:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4005b0:	6042      	str	r2, [r0, #4]
}
  4005b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4005b6:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4005ba:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4005bc:	400b      	ands	r3, r1
  4005be:	ea23 0302 	bic.w	r3, r3, r2
  4005c2:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4005c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4005c6:	4313      	orrs	r3, r2
  4005c8:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4005ca:	e7ca      	b.n	400562 <pio_set_peripheral+0x28>

004005cc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4005cc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4005ce:	f012 0f01 	tst.w	r2, #1
  4005d2:	d10d      	bne.n	4005f0 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4005d4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4005d6:	f012 0f0a 	tst.w	r2, #10
  4005da:	d00b      	beq.n	4005f4 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4005dc:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4005de:	f012 0f02 	tst.w	r2, #2
  4005e2:	d109      	bne.n	4005f8 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4005e4:	f012 0f08 	tst.w	r2, #8
  4005e8:	d008      	beq.n	4005fc <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4005ea:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4005ee:	e005      	b.n	4005fc <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4005f0:	6641      	str	r1, [r0, #100]	; 0x64
  4005f2:	e7f0      	b.n	4005d6 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4005f4:	6241      	str	r1, [r0, #36]	; 0x24
  4005f6:	e7f2      	b.n	4005de <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4005f8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4005fc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4005fe:	6001      	str	r1, [r0, #0]
  400600:	4770      	bx	lr

00400602 <pio_set_output>:
{
  400602:	b410      	push	{r4}
  400604:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400606:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400608:	b94c      	cbnz	r4, 40061e <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40060a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40060c:	b14b      	cbz	r3, 400622 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40060e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400610:	b94a      	cbnz	r2, 400626 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400612:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400614:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400616:	6001      	str	r1, [r0, #0]
}
  400618:	f85d 4b04 	ldr.w	r4, [sp], #4
  40061c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40061e:	6641      	str	r1, [r0, #100]	; 0x64
  400620:	e7f4      	b.n	40060c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400622:	6541      	str	r1, [r0, #84]	; 0x54
  400624:	e7f4      	b.n	400610 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400626:	6301      	str	r1, [r0, #48]	; 0x30
  400628:	e7f4      	b.n	400614 <pio_set_output+0x12>
	...

0040062c <pio_configure>:
{
  40062c:	b570      	push	{r4, r5, r6, lr}
  40062e:	b082      	sub	sp, #8
  400630:	4605      	mov	r5, r0
  400632:	4616      	mov	r6, r2
  400634:	461c      	mov	r4, r3
	switch (ul_type) {
  400636:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40063a:	d014      	beq.n	400666 <pio_configure+0x3a>
  40063c:	d90a      	bls.n	400654 <pio_configure+0x28>
  40063e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400642:	d024      	beq.n	40068e <pio_configure+0x62>
  400644:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400648:	d021      	beq.n	40068e <pio_configure+0x62>
  40064a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40064e:	d017      	beq.n	400680 <pio_configure+0x54>
		return 0;
  400650:	2000      	movs	r0, #0
  400652:	e01a      	b.n	40068a <pio_configure+0x5e>
	switch (ul_type) {
  400654:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400658:	d005      	beq.n	400666 <pio_configure+0x3a>
  40065a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40065e:	d002      	beq.n	400666 <pio_configure+0x3a>
  400660:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400664:	d1f4      	bne.n	400650 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400666:	4632      	mov	r2, r6
  400668:	4628      	mov	r0, r5
  40066a:	4b11      	ldr	r3, [pc, #68]	; (4006b0 <pio_configure+0x84>)
  40066c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40066e:	f014 0f01 	tst.w	r4, #1
  400672:	d102      	bne.n	40067a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400674:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400676:	2001      	movs	r0, #1
  400678:	e007      	b.n	40068a <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40067a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  40067c:	2001      	movs	r0, #1
  40067e:	e004      	b.n	40068a <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400680:	461a      	mov	r2, r3
  400682:	4631      	mov	r1, r6
  400684:	4b0b      	ldr	r3, [pc, #44]	; (4006b4 <pio_configure+0x88>)
  400686:	4798      	blx	r3
	return 1;
  400688:	2001      	movs	r0, #1
}
  40068a:	b002      	add	sp, #8
  40068c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40068e:	f004 0301 	and.w	r3, r4, #1
  400692:	9300      	str	r3, [sp, #0]
  400694:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400698:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40069c:	bf14      	ite	ne
  40069e:	2200      	movne	r2, #0
  4006a0:	2201      	moveq	r2, #1
  4006a2:	4631      	mov	r1, r6
  4006a4:	4628      	mov	r0, r5
  4006a6:	4c04      	ldr	r4, [pc, #16]	; (4006b8 <pio_configure+0x8c>)
  4006a8:	47a0      	blx	r4
	return 1;
  4006aa:	2001      	movs	r0, #1
		break;
  4006ac:	e7ed      	b.n	40068a <pio_configure+0x5e>
  4006ae:	bf00      	nop
  4006b0:	0040053b 	.word	0x0040053b
  4006b4:	004005cd 	.word	0x004005cd
  4006b8:	00400603 	.word	0x00400603

004006bc <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4006bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4006be:	420b      	tst	r3, r1
}
  4006c0:	bf14      	ite	ne
  4006c2:	2001      	movne	r0, #1
  4006c4:	2000      	moveq	r0, #0
  4006c6:	4770      	bx	lr

004006c8 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4006c8:	f012 0f10 	tst.w	r2, #16
  4006cc:	d012      	beq.n	4006f4 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4006ce:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4006d2:	f012 0f20 	tst.w	r2, #32
  4006d6:	d007      	beq.n	4006e8 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4006d8:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4006dc:	f012 0f40 	tst.w	r2, #64	; 0x40
  4006e0:	d005      	beq.n	4006ee <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4006e2:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4006e6:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4006e8:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4006ec:	e7f6      	b.n	4006dc <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4006ee:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4006f2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4006f4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4006f8:	4770      	bx	lr

004006fa <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4006fa:	6401      	str	r1, [r0, #64]	; 0x40
  4006fc:	4770      	bx	lr

004006fe <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4006fe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400700:	4770      	bx	lr

00400702 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400702:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400704:	4770      	bx	lr
	...

00400708 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40070c:	4604      	mov	r4, r0
  40070e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400710:	4b0e      	ldr	r3, [pc, #56]	; (40074c <pio_handler_process+0x44>)
  400712:	4798      	blx	r3
  400714:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400716:	4620      	mov	r0, r4
  400718:	4b0d      	ldr	r3, [pc, #52]	; (400750 <pio_handler_process+0x48>)
  40071a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40071c:	4005      	ands	r5, r0
  40071e:	d013      	beq.n	400748 <pio_handler_process+0x40>
  400720:	4c0c      	ldr	r4, [pc, #48]	; (400754 <pio_handler_process+0x4c>)
  400722:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400726:	e003      	b.n	400730 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400728:	42b4      	cmp	r4, r6
  40072a:	d00d      	beq.n	400748 <pio_handler_process+0x40>
  40072c:	3410      	adds	r4, #16
		while (status != 0) {
  40072e:	b15d      	cbz	r5, 400748 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400730:	6820      	ldr	r0, [r4, #0]
  400732:	4540      	cmp	r0, r8
  400734:	d1f8      	bne.n	400728 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400736:	6861      	ldr	r1, [r4, #4]
  400738:	4229      	tst	r1, r5
  40073a:	d0f5      	beq.n	400728 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40073c:	68e3      	ldr	r3, [r4, #12]
  40073e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400740:	6863      	ldr	r3, [r4, #4]
  400742:	ea25 0503 	bic.w	r5, r5, r3
  400746:	e7ef      	b.n	400728 <pio_handler_process+0x20>
  400748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40074c:	004006ff 	.word	0x004006ff
  400750:	00400703 	.word	0x00400703
  400754:	204009e4 	.word	0x204009e4

00400758 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40075a:	4c18      	ldr	r4, [pc, #96]	; (4007bc <pio_handler_set+0x64>)
  40075c:	6826      	ldr	r6, [r4, #0]
  40075e:	2e06      	cmp	r6, #6
  400760:	d82a      	bhi.n	4007b8 <pio_handler_set+0x60>
  400762:	f04f 0c00 	mov.w	ip, #0
  400766:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400768:	4f15      	ldr	r7, [pc, #84]	; (4007c0 <pio_handler_set+0x68>)
  40076a:	e004      	b.n	400776 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  40076c:	3401      	adds	r4, #1
  40076e:	b2e4      	uxtb	r4, r4
  400770:	46a4      	mov	ip, r4
  400772:	42a6      	cmp	r6, r4
  400774:	d309      	bcc.n	40078a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400776:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400778:	0125      	lsls	r5, r4, #4
  40077a:	597d      	ldr	r5, [r7, r5]
  40077c:	428d      	cmp	r5, r1
  40077e:	d1f5      	bne.n	40076c <pio_handler_set+0x14>
  400780:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400784:	686d      	ldr	r5, [r5, #4]
  400786:	4295      	cmp	r5, r2
  400788:	d1f0      	bne.n	40076c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40078a:	4d0d      	ldr	r5, [pc, #52]	; (4007c0 <pio_handler_set+0x68>)
  40078c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400790:	eb05 040e 	add.w	r4, r5, lr
  400794:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400798:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40079a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  40079c:	9906      	ldr	r1, [sp, #24]
  40079e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4007a0:	3601      	adds	r6, #1
  4007a2:	4566      	cmp	r6, ip
  4007a4:	d005      	beq.n	4007b2 <pio_handler_set+0x5a>
  4007a6:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4007a8:	461a      	mov	r2, r3
  4007aa:	4b06      	ldr	r3, [pc, #24]	; (4007c4 <pio_handler_set+0x6c>)
  4007ac:	4798      	blx	r3

	return 0;
  4007ae:	2000      	movs	r0, #0
  4007b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4007b2:	4902      	ldr	r1, [pc, #8]	; (4007bc <pio_handler_set+0x64>)
  4007b4:	600e      	str	r6, [r1, #0]
  4007b6:	e7f6      	b.n	4007a6 <pio_handler_set+0x4e>
		return 1;
  4007b8:	2001      	movs	r0, #1
}
  4007ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007bc:	20400a54 	.word	0x20400a54
  4007c0:	204009e4 	.word	0x204009e4
  4007c4:	004006c9 	.word	0x004006c9

004007c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4007c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4007ca:	210a      	movs	r1, #10
  4007cc:	4801      	ldr	r0, [pc, #4]	; (4007d4 <PIOA_Handler+0xc>)
  4007ce:	4b02      	ldr	r3, [pc, #8]	; (4007d8 <PIOA_Handler+0x10>)
  4007d0:	4798      	blx	r3
  4007d2:	bd08      	pop	{r3, pc}
  4007d4:	400e0e00 	.word	0x400e0e00
  4007d8:	00400709 	.word	0x00400709

004007dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4007dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4007de:	210b      	movs	r1, #11
  4007e0:	4801      	ldr	r0, [pc, #4]	; (4007e8 <PIOB_Handler+0xc>)
  4007e2:	4b02      	ldr	r3, [pc, #8]	; (4007ec <PIOB_Handler+0x10>)
  4007e4:	4798      	blx	r3
  4007e6:	bd08      	pop	{r3, pc}
  4007e8:	400e1000 	.word	0x400e1000
  4007ec:	00400709 	.word	0x00400709

004007f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4007f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4007f2:	210c      	movs	r1, #12
  4007f4:	4801      	ldr	r0, [pc, #4]	; (4007fc <PIOC_Handler+0xc>)
  4007f6:	4b02      	ldr	r3, [pc, #8]	; (400800 <PIOC_Handler+0x10>)
  4007f8:	4798      	blx	r3
  4007fa:	bd08      	pop	{r3, pc}
  4007fc:	400e1200 	.word	0x400e1200
  400800:	00400709 	.word	0x00400709

00400804 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400804:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  400806:	2110      	movs	r1, #16
  400808:	4801      	ldr	r0, [pc, #4]	; (400810 <PIOD_Handler+0xc>)
  40080a:	4b02      	ldr	r3, [pc, #8]	; (400814 <PIOD_Handler+0x10>)
  40080c:	4798      	blx	r3
  40080e:	bd08      	pop	{r3, pc}
  400810:	400e1400 	.word	0x400e1400
  400814:	00400709 	.word	0x00400709

00400818 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400818:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40081a:	2111      	movs	r1, #17
  40081c:	4801      	ldr	r0, [pc, #4]	; (400824 <PIOE_Handler+0xc>)
  40081e:	4b02      	ldr	r3, [pc, #8]	; (400828 <PIOE_Handler+0x10>)
  400820:	4798      	blx	r3
  400822:	bd08      	pop	{r3, pc}
  400824:	400e1600 	.word	0x400e1600
  400828:	00400709 	.word	0x00400709

0040082c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40082c:	2803      	cmp	r0, #3
  40082e:	d011      	beq.n	400854 <pmc_mck_set_division+0x28>
  400830:	2804      	cmp	r0, #4
  400832:	d012      	beq.n	40085a <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400834:	2802      	cmp	r0, #2
  400836:	bf0c      	ite	eq
  400838:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40083c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40083e:	4a08      	ldr	r2, [pc, #32]	; (400860 <pmc_mck_set_division+0x34>)
  400840:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400846:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400848:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40084a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40084c:	f013 0f08 	tst.w	r3, #8
  400850:	d0fb      	beq.n	40084a <pmc_mck_set_division+0x1e>
}
  400852:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400854:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400858:	e7f1      	b.n	40083e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40085a:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40085e:	e7ee      	b.n	40083e <pmc_mck_set_division+0x12>
  400860:	400e0600 	.word	0x400e0600

00400864 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400864:	4a17      	ldr	r2, [pc, #92]	; (4008c4 <pmc_switch_mck_to_pllack+0x60>)
  400866:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40086c:	4318      	orrs	r0, r3
  40086e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400870:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400872:	f013 0f08 	tst.w	r3, #8
  400876:	d10a      	bne.n	40088e <pmc_switch_mck_to_pllack+0x2a>
  400878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40087c:	4911      	ldr	r1, [pc, #68]	; (4008c4 <pmc_switch_mck_to_pllack+0x60>)
  40087e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400880:	f012 0f08 	tst.w	r2, #8
  400884:	d103      	bne.n	40088e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400886:	3b01      	subs	r3, #1
  400888:	d1f9      	bne.n	40087e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40088a:	2001      	movs	r0, #1
  40088c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40088e:	4a0d      	ldr	r2, [pc, #52]	; (4008c4 <pmc_switch_mck_to_pllack+0x60>)
  400890:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400892:	f023 0303 	bic.w	r3, r3, #3
  400896:	f043 0302 	orr.w	r3, r3, #2
  40089a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40089c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40089e:	f013 0f08 	tst.w	r3, #8
  4008a2:	d10a      	bne.n	4008ba <pmc_switch_mck_to_pllack+0x56>
  4008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4008a8:	4906      	ldr	r1, [pc, #24]	; (4008c4 <pmc_switch_mck_to_pllack+0x60>)
  4008aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4008ac:	f012 0f08 	tst.w	r2, #8
  4008b0:	d105      	bne.n	4008be <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4008b2:	3b01      	subs	r3, #1
  4008b4:	d1f9      	bne.n	4008aa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4008b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4008b8:	4770      	bx	lr
	return 0;
  4008ba:	2000      	movs	r0, #0
  4008bc:	4770      	bx	lr
  4008be:	2000      	movs	r0, #0
  4008c0:	4770      	bx	lr
  4008c2:	bf00      	nop
  4008c4:	400e0600 	.word	0x400e0600

004008c8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4008c8:	b9a0      	cbnz	r0, 4008f4 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008ca:	480e      	ldr	r0, [pc, #56]	; (400904 <pmc_switch_mainck_to_xtal+0x3c>)
  4008cc:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4008ce:	0209      	lsls	r1, r1, #8
  4008d0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4008d2:	4a0d      	ldr	r2, [pc, #52]	; (400908 <pmc_switch_mainck_to_xtal+0x40>)
  4008d4:	401a      	ands	r2, r3
  4008d6:	4b0d      	ldr	r3, [pc, #52]	; (40090c <pmc_switch_mainck_to_xtal+0x44>)
  4008d8:	4313      	orrs	r3, r2
  4008da:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4008dc:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4008de:	4602      	mov	r2, r0
  4008e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008e2:	f013 0f01 	tst.w	r3, #1
  4008e6:	d0fb      	beq.n	4008e0 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4008e8:	4a06      	ldr	r2, [pc, #24]	; (400904 <pmc_switch_mainck_to_xtal+0x3c>)
  4008ea:	6a11      	ldr	r1, [r2, #32]
  4008ec:	4b08      	ldr	r3, [pc, #32]	; (400910 <pmc_switch_mainck_to_xtal+0x48>)
  4008ee:	430b      	orrs	r3, r1
  4008f0:	6213      	str	r3, [r2, #32]
  4008f2:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4008f4:	4903      	ldr	r1, [pc, #12]	; (400904 <pmc_switch_mainck_to_xtal+0x3c>)
  4008f6:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4008f8:	4a06      	ldr	r2, [pc, #24]	; (400914 <pmc_switch_mainck_to_xtal+0x4c>)
  4008fa:	401a      	ands	r2, r3
  4008fc:	4b06      	ldr	r3, [pc, #24]	; (400918 <pmc_switch_mainck_to_xtal+0x50>)
  4008fe:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400900:	620b      	str	r3, [r1, #32]
  400902:	4770      	bx	lr
  400904:	400e0600 	.word	0x400e0600
  400908:	ffc8fffc 	.word	0xffc8fffc
  40090c:	00370001 	.word	0x00370001
  400910:	01370000 	.word	0x01370000
  400914:	fec8fffc 	.word	0xfec8fffc
  400918:	01370002 	.word	0x01370002

0040091c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40091c:	4b02      	ldr	r3, [pc, #8]	; (400928 <pmc_osc_is_ready_mainck+0xc>)
  40091e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400920:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400924:	4770      	bx	lr
  400926:	bf00      	nop
  400928:	400e0600 	.word	0x400e0600

0040092c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40092c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400930:	4b01      	ldr	r3, [pc, #4]	; (400938 <pmc_disable_pllack+0xc>)
  400932:	629a      	str	r2, [r3, #40]	; 0x28
  400934:	4770      	bx	lr
  400936:	bf00      	nop
  400938:	400e0600 	.word	0x400e0600

0040093c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40093c:	4b02      	ldr	r3, [pc, #8]	; (400948 <pmc_is_locked_pllack+0xc>)
  40093e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400940:	f000 0002 	and.w	r0, r0, #2
  400944:	4770      	bx	lr
  400946:	bf00      	nop
  400948:	400e0600 	.word	0x400e0600

0040094c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  40094c:	283f      	cmp	r0, #63	; 0x3f
  40094e:	d81e      	bhi.n	40098e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400950:	281f      	cmp	r0, #31
  400952:	d80c      	bhi.n	40096e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400954:	4b11      	ldr	r3, [pc, #68]	; (40099c <pmc_enable_periph_clk+0x50>)
  400956:	699a      	ldr	r2, [r3, #24]
  400958:	2301      	movs	r3, #1
  40095a:	4083      	lsls	r3, r0
  40095c:	4393      	bics	r3, r2
  40095e:	d018      	beq.n	400992 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400960:	2301      	movs	r3, #1
  400962:	fa03 f000 	lsl.w	r0, r3, r0
  400966:	4b0d      	ldr	r3, [pc, #52]	; (40099c <pmc_enable_periph_clk+0x50>)
  400968:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40096a:	2000      	movs	r0, #0
  40096c:	4770      	bx	lr
		ul_id -= 32;
  40096e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400970:	4b0a      	ldr	r3, [pc, #40]	; (40099c <pmc_enable_periph_clk+0x50>)
  400972:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400976:	2301      	movs	r3, #1
  400978:	4083      	lsls	r3, r0
  40097a:	4393      	bics	r3, r2
  40097c:	d00b      	beq.n	400996 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40097e:	2301      	movs	r3, #1
  400980:	fa03 f000 	lsl.w	r0, r3, r0
  400984:	4b05      	ldr	r3, [pc, #20]	; (40099c <pmc_enable_periph_clk+0x50>)
  400986:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  40098a:	2000      	movs	r0, #0
  40098c:	4770      	bx	lr
		return 1;
  40098e:	2001      	movs	r0, #1
  400990:	4770      	bx	lr
	return 0;
  400992:	2000      	movs	r0, #0
  400994:	4770      	bx	lr
  400996:	2000      	movs	r0, #0
}
  400998:	4770      	bx	lr
  40099a:	bf00      	nop
  40099c:	400e0600 	.word	0x400e0600

004009a0 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  4009a0:	b4f0      	push	{r4, r5, r6, r7}
  4009a2:	b08c      	sub	sp, #48	; 0x30
  4009a4:	4607      	mov	r7, r0
  4009a6:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  4009a8:	ac01      	add	r4, sp, #4
  4009aa:	4d11      	ldr	r5, [pc, #68]	; (4009f0 <pwm_clocks_generate+0x50>)
  4009ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4009ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4009b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  4009b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  4009b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  4009b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  4009bc:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  4009be:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  4009c0:	f852 0b04 	ldr.w	r0, [r2], #4
  4009c4:	fbb6 f0f0 	udiv	r0, r6, r0
  4009c8:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  4009cc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  4009d0:	d907      	bls.n	4009e2 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  4009d2:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  4009d4:	2b0b      	cmp	r3, #11
  4009d6:	d1f3      	bne.n	4009c0 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  4009d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  4009dc:	b00c      	add	sp, #48	; 0x30
  4009de:	bcf0      	pop	{r4, r5, r6, r7}
  4009e0:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4009e2:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  4009e4:	bf94      	ite	ls
  4009e6:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  4009ea:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  4009ee:	e7f5      	b.n	4009dc <pwm_clocks_generate+0x3c>
  4009f0:	00406dd8 	.word	0x00406dd8

004009f4 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4009f4:	b570      	push	{r4, r5, r6, lr}
  4009f6:	4606      	mov	r6, r0
  4009f8:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4009fa:	680c      	ldr	r4, [r1, #0]
  4009fc:	b144      	cbz	r4, 400a10 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4009fe:	6889      	ldr	r1, [r1, #8]
  400a00:	4620      	mov	r0, r4
  400a02:	4b0c      	ldr	r3, [pc, #48]	; (400a34 <pwm_init+0x40>)
  400a04:	4798      	blx	r3
  400a06:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  400a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400a0c:	4298      	cmp	r0, r3
  400a0e:	d00c      	beq.n	400a2a <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  400a10:	6868      	ldr	r0, [r5, #4]
  400a12:	b140      	cbz	r0, 400a26 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  400a14:	68a9      	ldr	r1, [r5, #8]
  400a16:	4b07      	ldr	r3, [pc, #28]	; (400a34 <pwm_init+0x40>)
  400a18:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  400a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
  400a1e:	4298      	cmp	r0, r3
  400a20:	d005      	beq.n	400a2e <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  400a22:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  400a26:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  400a28:	2400      	movs	r4, #0
}
  400a2a:	4620      	mov	r0, r4
  400a2c:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  400a2e:	4604      	mov	r4, r0
  400a30:	e7fb      	b.n	400a2a <pwm_init+0x36>
  400a32:	bf00      	nop
  400a34:	004009a1 	.word	0x004009a1

00400a38 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  400a38:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  400a3a:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400a3c:	684b      	ldr	r3, [r1, #4]
  400a3e:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  400a42:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400a44:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  400a46:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400a48:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  400a4a:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400a4c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  400a50:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400a52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  400a56:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400a58:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  400a5c:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400a5e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  400a62:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  400a66:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  400a6a:	68cb      	ldr	r3, [r1, #12]
  400a6c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  400a70:	690b      	ldr	r3, [r1, #16]
  400a72:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  400a76:	7d8b      	ldrb	r3, [r1, #22]
  400a78:	b13b      	cbz	r3, 400a8a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  400a7a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  400a7c:	8b4b      	ldrh	r3, [r1, #26]
  400a7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  400a82:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  400a86:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  400a8a:	6c85      	ldr	r5, [r0, #72]	; 0x48
  400a8c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  400a90:	4093      	lsls	r3, r2
  400a92:	43db      	mvns	r3, r3
  400a94:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  400a96:	7fcc      	ldrb	r4, [r1, #31]
  400a98:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  400a9c:	7f8c      	ldrb	r4, [r1, #30]
  400a9e:	4094      	lsls	r4, r2
  400aa0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  400aa4:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  400aa6:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  400aa8:	6c44      	ldr	r4, [r0, #68]	; 0x44
  400aaa:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  400aac:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  400ab0:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  400ab4:	f891 4020 	ldrb.w	r4, [r1, #32]
  400ab8:	4094      	lsls	r4, r2
  400aba:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400abe:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  400ac0:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  400ac2:	2301      	movs	r3, #1
  400ac4:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  400ac6:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  400aca:	2c00      	cmp	r4, #0
  400acc:	d04f      	beq.n	400b6e <pwm_channel_init+0x136>
		p_pwm->PWM_SCM |= channel;
  400ace:	6a04      	ldr	r4, [r0, #32]
  400ad0:	431c      	orrs	r4, r3
  400ad2:	6204      	str	r4, [r0, #32]
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
	}

	/* Fault Protection Value Register */
#if (SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (p_channel->ul_fault_output_pwmh == PWM_HIGHZ) {
  400ad4:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  400ad8:	2c02      	cmp	r4, #2
  400ada:	d04d      	beq.n	400b78 <pwm_channel_init+0x140>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
	} else {
		p_pwm->PWM_FPV2 &= ~(0x01 << ch_num);
  400adc:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  400ae0:	43dc      	mvns	r4, r3
  400ae2:	4025      	ands	r5, r4
  400ae4:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  400ae8:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
  400aec:	2d01      	cmp	r5, #1
  400aee:	d049      	beq.n	400b84 <pwm_channel_init+0x14c>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
		} else {
			p_pwm->PWM_FPV1 &= (~(0x01 << ch_num));
  400af0:	6e85      	ldr	r5, [r0, #104]	; 0x68
  400af2:	402c      	ands	r4, r5
  400af4:	6684      	str	r4, [r0, #104]	; 0x68
		}
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGHZ) {
  400af6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  400afa:	2c02      	cmp	r4, #2
  400afc:	d046      	beq.n	400b8c <pwm_channel_init+0x154>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
	} else {
		p_pwm->PWM_FPV2 &= ~((0x01 << ch_num) << 16);
  400afe:	f8d0 50c0 	ldr.w	r5, [r0, #192]	; 0xc0
  400b02:	041b      	lsls	r3, r3, #16
  400b04:	43dc      	mvns	r4, r3
  400b06:	4025      	ands	r5, r4
  400b08:	f8c0 50c0 	str.w	r5, [r0, #192]	; 0xc0
		if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  400b0c:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
  400b10:	2d01      	cmp	r5, #1
  400b12:	d042      	beq.n	400b9a <pwm_channel_init+0x162>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
  400b14:	6e83      	ldr	r3, [r0, #104]	; 0x68
  400b16:	401c      	ands	r4, r3
  400b18:	6684      	str	r4, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  400b1a:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  400b1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  400b1e:	24ff      	movs	r4, #255	; 0xff
  400b20:	4094      	lsls	r4, r2
  400b22:	ea23 0404 	bic.w	r4, r3, r4
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  400b26:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  400b2a:	4093      	lsls	r3, r2
  400b2c:	4323      	orrs	r3, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  400b2e:	66c3      	str	r3, [r0, #108]	; 0x6c
	}
	p_pwm->PWM_CH_NUM_0X400[ch_num].PWM_CAE =
			PWM_CAE_ADEDGV(p_channel->ul_additional_edge) |
			p_channel->additional_edge_mode;
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
	if (!ch_num) {
  400b30:	b952      	cbnz	r2, 400b48 <pwm_channel_init+0x110>
		if (p_channel->spread_spectrum_mode ==
  400b32:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
  400b36:	2b01      	cmp	r3, #1
		PWM_SPREAD_SPECTRUM_MODE_RANDOM) {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread) |
  400b38:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  400b3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  400b3e:	bf08      	it	eq
  400b40:	f043 7380 	orreq.w	r3, r3, #16777216	; 0x1000000
			PWM_SSPR_SPRDM;
			} else {
			p_pwm->PWM_SSPR = PWM_SSPR_SPRD(p_channel->ul_spread);
  400b44:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  400b48:	eb00 1042 	add.w	r0, r0, r2, lsl #5
		}
	}
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
  400b4c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  400b50:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
  400b54:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
  400b58:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
  400b5c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
  400b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
  400b62:	4313      	orrs	r3, r2
  400b64:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
#endif

	return 0;
}
  400b68:	2000      	movs	r0, #0
  400b6a:	bc70      	pop	{r4, r5, r6}
  400b6c:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  400b6e:	6a04      	ldr	r4, [r0, #32]
  400b70:	ea24 0403 	bic.w	r4, r4, r3
  400b74:	6204      	str	r4, [r0, #32]
  400b76:	e7ad      	b.n	400ad4 <pwm_channel_init+0x9c>
		p_pwm->PWM_FPV2 |= (0x01 << ch_num);
  400b78:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  400b7c:	431c      	orrs	r4, r3
  400b7e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
  400b82:	e7b8      	b.n	400af6 <pwm_channel_init+0xbe>
			p_pwm->PWM_FPV1 |= (0x01 << ch_num);
  400b84:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400b86:	431c      	orrs	r4, r3
  400b88:	6684      	str	r4, [r0, #104]	; 0x68
  400b8a:	e7b4      	b.n	400af6 <pwm_channel_init+0xbe>
		p_pwm->PWM_FPV2 |= ((0x01 << ch_num) << 16);
  400b8c:	f8d0 40c0 	ldr.w	r4, [r0, #192]	; 0xc0
  400b90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
  400b94:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
  400b98:	e7bf      	b.n	400b1a <pwm_channel_init+0xe2>
			p_pwm->PWM_FPV1 |= ((0x01 << ch_num) << 16);
  400b9a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  400b9c:	4323      	orrs	r3, r4
  400b9e:	6683      	str	r3, [r0, #104]	; 0x68
  400ba0:	e7bb      	b.n	400b1a <pwm_channel_init+0xe2>

00400ba2 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  400ba2:	690b      	ldr	r3, [r1, #16]
  400ba4:	4293      	cmp	r3, r2
  400ba6:	d202      	bcs.n	400bae <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  400ba8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  400bac:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  400bae:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  400bb0:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  400bb2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  400bb6:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
  400bba:	2000      	movs	r0, #0
  400bbc:	4770      	bx	lr

00400bbe <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  400bbe:	2301      	movs	r3, #1
  400bc0:	fa03 f101 	lsl.w	r1, r3, r1
  400bc4:	6041      	str	r1, [r0, #4]
  400bc6:	4770      	bx	lr

00400bc8 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  400bc8:	2301      	movs	r3, #1
  400bca:	fa03 f101 	lsl.w	r1, r3, r1
  400bce:	6081      	str	r1, [r0, #8]
  400bd0:	4770      	bx	lr

00400bd2 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400bd2:	6943      	ldr	r3, [r0, #20]
  400bd4:	f013 0f02 	tst.w	r3, #2
  400bd8:	d002      	beq.n	400be0 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400bda:	61c1      	str	r1, [r0, #28]
	return 0;
  400bdc:	2000      	movs	r0, #0
  400bde:	4770      	bx	lr
		return 1;
  400be0:	2001      	movs	r0, #1
}
  400be2:	4770      	bx	lr

00400be4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400be4:	6943      	ldr	r3, [r0, #20]
  400be6:	f013 0f01 	tst.w	r3, #1
  400bea:	d003      	beq.n	400bf4 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400bec:	6983      	ldr	r3, [r0, #24]
  400bee:	700b      	strb	r3, [r1, #0]
	return 0;
  400bf0:	2000      	movs	r0, #0
  400bf2:	4770      	bx	lr
		return 1;
  400bf4:	2001      	movs	r0, #1
}
  400bf6:	4770      	bx	lr

00400bf8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400bf8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400bfa:	010b      	lsls	r3, r1, #4
  400bfc:	4293      	cmp	r3, r2
  400bfe:	d914      	bls.n	400c2a <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400c00:	00c9      	lsls	r1, r1, #3
  400c02:	084b      	lsrs	r3, r1, #1
  400c04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400c08:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400c0c:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400c0e:	1e5c      	subs	r4, r3, #1
  400c10:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400c14:	428c      	cmp	r4, r1
  400c16:	d901      	bls.n	400c1c <usart_set_async_baudrate+0x24>
		return 1;
  400c18:	2001      	movs	r0, #1
  400c1a:	e017      	b.n	400c4c <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400c1c:	6841      	ldr	r1, [r0, #4]
  400c1e:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400c22:	6041      	str	r1, [r0, #4]
  400c24:	e00c      	b.n	400c40 <usart_set_async_baudrate+0x48>
		return 1;
  400c26:	2001      	movs	r0, #1
  400c28:	e010      	b.n	400c4c <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400c2a:	0859      	lsrs	r1, r3, #1
  400c2c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400c30:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400c34:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400c36:	1e5c      	subs	r4, r3, #1
  400c38:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400c3c:	428c      	cmp	r4, r1
  400c3e:	d8f2      	bhi.n	400c26 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400c40:	0412      	lsls	r2, r2, #16
  400c42:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400c46:	431a      	orrs	r2, r3
  400c48:	6202      	str	r2, [r0, #32]

	return 0;
  400c4a:	2000      	movs	r0, #0
}
  400c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400c50:	4770      	bx	lr
	...

00400c54 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400c54:	4b08      	ldr	r3, [pc, #32]	; (400c78 <usart_reset+0x24>)
  400c56:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400c5a:	2300      	movs	r3, #0
  400c5c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400c5e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400c60:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400c62:	2388      	movs	r3, #136	; 0x88
  400c64:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400c66:	2324      	movs	r3, #36	; 0x24
  400c68:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
  400c6e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400c70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400c74:	6003      	str	r3, [r0, #0]
  400c76:	4770      	bx	lr
  400c78:	55534100 	.word	0x55534100

00400c7c <usart_init_rs232>:
{
  400c7c:	b570      	push	{r4, r5, r6, lr}
  400c7e:	4605      	mov	r5, r0
  400c80:	460c      	mov	r4, r1
  400c82:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400c84:	4b0f      	ldr	r3, [pc, #60]	; (400cc4 <usart_init_rs232+0x48>)
  400c86:	4798      	blx	r3
	ul_reg_val = 0;
  400c88:	2200      	movs	r2, #0
  400c8a:	4b0f      	ldr	r3, [pc, #60]	; (400cc8 <usart_init_rs232+0x4c>)
  400c8c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400c8e:	b1a4      	cbz	r4, 400cba <usart_init_rs232+0x3e>
  400c90:	4632      	mov	r2, r6
  400c92:	6821      	ldr	r1, [r4, #0]
  400c94:	4628      	mov	r0, r5
  400c96:	4b0d      	ldr	r3, [pc, #52]	; (400ccc <usart_init_rs232+0x50>)
  400c98:	4798      	blx	r3
  400c9a:	4602      	mov	r2, r0
  400c9c:	b978      	cbnz	r0, 400cbe <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c9e:	6863      	ldr	r3, [r4, #4]
  400ca0:	68a1      	ldr	r1, [r4, #8]
  400ca2:	430b      	orrs	r3, r1
  400ca4:	6921      	ldr	r1, [r4, #16]
  400ca6:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400ca8:	68e1      	ldr	r1, [r4, #12]
  400caa:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400cac:	4906      	ldr	r1, [pc, #24]	; (400cc8 <usart_init_rs232+0x4c>)
  400cae:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400cb0:	6869      	ldr	r1, [r5, #4]
  400cb2:	430b      	orrs	r3, r1
  400cb4:	606b      	str	r3, [r5, #4]
}
  400cb6:	4610      	mov	r0, r2
  400cb8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400cba:	2201      	movs	r2, #1
  400cbc:	e7fb      	b.n	400cb6 <usart_init_rs232+0x3a>
  400cbe:	2201      	movs	r2, #1
  400cc0:	e7f9      	b.n	400cb6 <usart_init_rs232+0x3a>
  400cc2:	bf00      	nop
  400cc4:	00400c55 	.word	0x00400c55
  400cc8:	20400a58 	.word	0x20400a58
  400ccc:	00400bf9 	.word	0x00400bf9

00400cd0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400cd0:	2340      	movs	r3, #64	; 0x40
  400cd2:	6003      	str	r3, [r0, #0]
  400cd4:	4770      	bx	lr

00400cd6 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400cd6:	2310      	movs	r3, #16
  400cd8:	6003      	str	r3, [r0, #0]
  400cda:	4770      	bx	lr

00400cdc <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400cdc:	6943      	ldr	r3, [r0, #20]
  400cde:	f013 0f02 	tst.w	r3, #2
  400ce2:	d004      	beq.n	400cee <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400ce4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400ce8:	61c1      	str	r1, [r0, #28]
	return 0;
  400cea:	2000      	movs	r0, #0
  400cec:	4770      	bx	lr
		return 1;
  400cee:	2001      	movs	r0, #1
}
  400cf0:	4770      	bx	lr

00400cf2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400cf2:	6943      	ldr	r3, [r0, #20]
  400cf4:	f013 0f01 	tst.w	r3, #1
  400cf8:	d005      	beq.n	400d06 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400cfa:	6983      	ldr	r3, [r0, #24]
  400cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400d00:	600b      	str	r3, [r1, #0]
	return 0;
  400d02:	2000      	movs	r0, #0
  400d04:	4770      	bx	lr
		return 1;
  400d06:	2001      	movs	r0, #1
}
  400d08:	4770      	bx	lr

00400d0a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400d0a:	e7fe      	b.n	400d0a <Dummy_Handler>

00400d0c <Reset_Handler>:
{
  400d0c:	b500      	push	{lr}
  400d0e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400d10:	4b25      	ldr	r3, [pc, #148]	; (400da8 <Reset_Handler+0x9c>)
  400d12:	4a26      	ldr	r2, [pc, #152]	; (400dac <Reset_Handler+0xa0>)
  400d14:	429a      	cmp	r2, r3
  400d16:	d010      	beq.n	400d3a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400d18:	4b25      	ldr	r3, [pc, #148]	; (400db0 <Reset_Handler+0xa4>)
  400d1a:	4a23      	ldr	r2, [pc, #140]	; (400da8 <Reset_Handler+0x9c>)
  400d1c:	429a      	cmp	r2, r3
  400d1e:	d20c      	bcs.n	400d3a <Reset_Handler+0x2e>
  400d20:	3b01      	subs	r3, #1
  400d22:	1a9b      	subs	r3, r3, r2
  400d24:	f023 0303 	bic.w	r3, r3, #3
  400d28:	3304      	adds	r3, #4
  400d2a:	4413      	add	r3, r2
  400d2c:	491f      	ldr	r1, [pc, #124]	; (400dac <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400d2e:	f851 0b04 	ldr.w	r0, [r1], #4
  400d32:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400d36:	429a      	cmp	r2, r3
  400d38:	d1f9      	bne.n	400d2e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400d3a:	4b1e      	ldr	r3, [pc, #120]	; (400db4 <Reset_Handler+0xa8>)
  400d3c:	4a1e      	ldr	r2, [pc, #120]	; (400db8 <Reset_Handler+0xac>)
  400d3e:	429a      	cmp	r2, r3
  400d40:	d20a      	bcs.n	400d58 <Reset_Handler+0x4c>
  400d42:	3b01      	subs	r3, #1
  400d44:	1a9b      	subs	r3, r3, r2
  400d46:	f023 0303 	bic.w	r3, r3, #3
  400d4a:	3304      	adds	r3, #4
  400d4c:	4413      	add	r3, r2
                *pDest++ = 0;
  400d4e:	2100      	movs	r1, #0
  400d50:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400d54:	4293      	cmp	r3, r2
  400d56:	d1fb      	bne.n	400d50 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400d58:	4a18      	ldr	r2, [pc, #96]	; (400dbc <Reset_Handler+0xb0>)
  400d5a:	4b19      	ldr	r3, [pc, #100]	; (400dc0 <Reset_Handler+0xb4>)
  400d5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400d60:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400d62:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400d66:	fab3 f383 	clz	r3, r3
  400d6a:	095b      	lsrs	r3, r3, #5
  400d6c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400d6e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400d70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400d74:	2200      	movs	r2, #0
  400d76:	4b13      	ldr	r3, [pc, #76]	; (400dc4 <Reset_Handler+0xb8>)
  400d78:	701a      	strb	r2, [r3, #0]
	return flags;
  400d7a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400d7c:	4a12      	ldr	r2, [pc, #72]	; (400dc8 <Reset_Handler+0xbc>)
  400d7e:	6813      	ldr	r3, [r2, #0]
  400d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400d84:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400d86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d8a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400d8e:	b129      	cbz	r1, 400d9c <Reset_Handler+0x90>
		cpu_irq_enable();
  400d90:	2201      	movs	r2, #1
  400d92:	4b0c      	ldr	r3, [pc, #48]	; (400dc4 <Reset_Handler+0xb8>)
  400d94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400d96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d9a:	b662      	cpsie	i
        __libc_init_array();
  400d9c:	4b0b      	ldr	r3, [pc, #44]	; (400dcc <Reset_Handler+0xc0>)
  400d9e:	4798      	blx	r3
        main();
  400da0:	4b0b      	ldr	r3, [pc, #44]	; (400dd0 <Reset_Handler+0xc4>)
  400da2:	4798      	blx	r3
  400da4:	e7fe      	b.n	400da4 <Reset_Handler+0x98>
  400da6:	bf00      	nop
  400da8:	20400000 	.word	0x20400000
  400dac:	00407198 	.word	0x00407198
  400db0:	204009c8 	.word	0x204009c8
  400db4:	20400cc4 	.word	0x20400cc4
  400db8:	204009c8 	.word	0x204009c8
  400dbc:	e000ed00 	.word	0xe000ed00
  400dc0:	00400000 	.word	0x00400000
  400dc4:	2040000a 	.word	0x2040000a
  400dc8:	e000ed88 	.word	0xe000ed88
  400dcc:	00403d45 	.word	0x00403d45
  400dd0:	00403c21 	.word	0x00403c21

00400dd4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400dd4:	4b3b      	ldr	r3, [pc, #236]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dd8:	f003 0303 	and.w	r3, r3, #3
  400ddc:	2b01      	cmp	r3, #1
  400dde:	d01d      	beq.n	400e1c <SystemCoreClockUpdate+0x48>
  400de0:	b183      	cbz	r3, 400e04 <SystemCoreClockUpdate+0x30>
  400de2:	2b02      	cmp	r3, #2
  400de4:	d036      	beq.n	400e54 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400de6:	4b37      	ldr	r3, [pc, #220]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400dee:	2b70      	cmp	r3, #112	; 0x70
  400df0:	d05f      	beq.n	400eb2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400df2:	4b34      	ldr	r3, [pc, #208]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400df6:	4934      	ldr	r1, [pc, #208]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400df8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400dfc:	680b      	ldr	r3, [r1, #0]
  400dfe:	40d3      	lsrs	r3, r2
  400e00:	600b      	str	r3, [r1, #0]
  400e02:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400e04:	4b31      	ldr	r3, [pc, #196]	; (400ecc <SystemCoreClockUpdate+0xf8>)
  400e06:	695b      	ldr	r3, [r3, #20]
  400e08:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400e0c:	bf14      	ite	ne
  400e0e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400e12:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400e16:	4b2c      	ldr	r3, [pc, #176]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e18:	601a      	str	r2, [r3, #0]
  400e1a:	e7e4      	b.n	400de6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400e1c:	4b29      	ldr	r3, [pc, #164]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400e1e:	6a1b      	ldr	r3, [r3, #32]
  400e20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e24:	d003      	beq.n	400e2e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400e26:	4a2a      	ldr	r2, [pc, #168]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e28:	4b27      	ldr	r3, [pc, #156]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e2a:	601a      	str	r2, [r3, #0]
  400e2c:	e7db      	b.n	400de6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e2e:	4a29      	ldr	r2, [pc, #164]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e30:	4b25      	ldr	r3, [pc, #148]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e32:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400e34:	4b23      	ldr	r3, [pc, #140]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400e36:	6a1b      	ldr	r3, [r3, #32]
  400e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e3c:	2b10      	cmp	r3, #16
  400e3e:	d005      	beq.n	400e4c <SystemCoreClockUpdate+0x78>
  400e40:	2b20      	cmp	r3, #32
  400e42:	d1d0      	bne.n	400de6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400e44:	4a22      	ldr	r2, [pc, #136]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e46:	4b20      	ldr	r3, [pc, #128]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e48:	601a      	str	r2, [r3, #0]
          break;
  400e4a:	e7cc      	b.n	400de6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400e4c:	4a22      	ldr	r2, [pc, #136]	; (400ed8 <SystemCoreClockUpdate+0x104>)
  400e4e:	4b1e      	ldr	r3, [pc, #120]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e50:	601a      	str	r2, [r3, #0]
          break;
  400e52:	e7c8      	b.n	400de6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400e54:	4b1b      	ldr	r3, [pc, #108]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400e56:	6a1b      	ldr	r3, [r3, #32]
  400e58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400e5c:	d016      	beq.n	400e8c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400e5e:	4a1c      	ldr	r2, [pc, #112]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400e60:	4b19      	ldr	r3, [pc, #100]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e62:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400e64:	4b17      	ldr	r3, [pc, #92]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400e68:	f003 0303 	and.w	r3, r3, #3
  400e6c:	2b02      	cmp	r3, #2
  400e6e:	d1ba      	bne.n	400de6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e70:	4a14      	ldr	r2, [pc, #80]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400e72:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e74:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400e76:	4814      	ldr	r0, [pc, #80]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e78:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400e7c:	6803      	ldr	r3, [r0, #0]
  400e7e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e82:	b2d2      	uxtb	r2, r2
  400e84:	fbb3 f3f2 	udiv	r3, r3, r2
  400e88:	6003      	str	r3, [r0, #0]
  400e8a:	e7ac      	b.n	400de6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e8c:	4a11      	ldr	r2, [pc, #68]	; (400ed4 <SystemCoreClockUpdate+0x100>)
  400e8e:	4b0e      	ldr	r3, [pc, #56]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400e90:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400e92:	4b0c      	ldr	r3, [pc, #48]	; (400ec4 <SystemCoreClockUpdate+0xf0>)
  400e94:	6a1b      	ldr	r3, [r3, #32]
  400e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e9a:	2b10      	cmp	r3, #16
  400e9c:	d005      	beq.n	400eaa <SystemCoreClockUpdate+0xd6>
  400e9e:	2b20      	cmp	r3, #32
  400ea0:	d1e0      	bne.n	400e64 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400ea2:	4a0b      	ldr	r2, [pc, #44]	; (400ed0 <SystemCoreClockUpdate+0xfc>)
  400ea4:	4b08      	ldr	r3, [pc, #32]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400ea6:	601a      	str	r2, [r3, #0]
          break;
  400ea8:	e7dc      	b.n	400e64 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400eaa:	4a0b      	ldr	r2, [pc, #44]	; (400ed8 <SystemCoreClockUpdate+0x104>)
  400eac:	4b06      	ldr	r3, [pc, #24]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400eae:	601a      	str	r2, [r3, #0]
          break;
  400eb0:	e7d8      	b.n	400e64 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400eb2:	4a05      	ldr	r2, [pc, #20]	; (400ec8 <SystemCoreClockUpdate+0xf4>)
  400eb4:	6813      	ldr	r3, [r2, #0]
  400eb6:	4909      	ldr	r1, [pc, #36]	; (400edc <SystemCoreClockUpdate+0x108>)
  400eb8:	fba1 1303 	umull	r1, r3, r1, r3
  400ebc:	085b      	lsrs	r3, r3, #1
  400ebe:	6013      	str	r3, [r2, #0]
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop
  400ec4:	400e0600 	.word	0x400e0600
  400ec8:	2040000c 	.word	0x2040000c
  400ecc:	400e1810 	.word	0x400e1810
  400ed0:	00b71b00 	.word	0x00b71b00
  400ed4:	003d0900 	.word	0x003d0900
  400ed8:	007a1200 	.word	0x007a1200
  400edc:	aaaaaaab 	.word	0xaaaaaaab

00400ee0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400ee0:	4b16      	ldr	r3, [pc, #88]	; (400f3c <system_init_flash+0x5c>)
  400ee2:	4298      	cmp	r0, r3
  400ee4:	d913      	bls.n	400f0e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400ee6:	4b16      	ldr	r3, [pc, #88]	; (400f40 <system_init_flash+0x60>)
  400ee8:	4298      	cmp	r0, r3
  400eea:	d915      	bls.n	400f18 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400eec:	4b15      	ldr	r3, [pc, #84]	; (400f44 <system_init_flash+0x64>)
  400eee:	4298      	cmp	r0, r3
  400ef0:	d916      	bls.n	400f20 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400ef2:	4b15      	ldr	r3, [pc, #84]	; (400f48 <system_init_flash+0x68>)
  400ef4:	4298      	cmp	r0, r3
  400ef6:	d917      	bls.n	400f28 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400ef8:	4b14      	ldr	r3, [pc, #80]	; (400f4c <system_init_flash+0x6c>)
  400efa:	4298      	cmp	r0, r3
  400efc:	d918      	bls.n	400f30 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400efe:	4b14      	ldr	r3, [pc, #80]	; (400f50 <system_init_flash+0x70>)
  400f00:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400f02:	bf94      	ite	ls
  400f04:	4a13      	ldrls	r2, [pc, #76]	; (400f54 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400f06:	4a14      	ldrhi	r2, [pc, #80]	; (400f58 <system_init_flash+0x78>)
  400f08:	4b14      	ldr	r3, [pc, #80]	; (400f5c <system_init_flash+0x7c>)
  400f0a:	601a      	str	r2, [r3, #0]
  400f0c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400f0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400f12:	4b12      	ldr	r3, [pc, #72]	; (400f5c <system_init_flash+0x7c>)
  400f14:	601a      	str	r2, [r3, #0]
  400f16:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400f18:	4a11      	ldr	r2, [pc, #68]	; (400f60 <system_init_flash+0x80>)
  400f1a:	4b10      	ldr	r3, [pc, #64]	; (400f5c <system_init_flash+0x7c>)
  400f1c:	601a      	str	r2, [r3, #0]
  400f1e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400f20:	4a10      	ldr	r2, [pc, #64]	; (400f64 <system_init_flash+0x84>)
  400f22:	4b0e      	ldr	r3, [pc, #56]	; (400f5c <system_init_flash+0x7c>)
  400f24:	601a      	str	r2, [r3, #0]
  400f26:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400f28:	4a0f      	ldr	r2, [pc, #60]	; (400f68 <system_init_flash+0x88>)
  400f2a:	4b0c      	ldr	r3, [pc, #48]	; (400f5c <system_init_flash+0x7c>)
  400f2c:	601a      	str	r2, [r3, #0]
  400f2e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400f30:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400f34:	4b09      	ldr	r3, [pc, #36]	; (400f5c <system_init_flash+0x7c>)
  400f36:	601a      	str	r2, [r3, #0]
  400f38:	4770      	bx	lr
  400f3a:	bf00      	nop
  400f3c:	015ef3bf 	.word	0x015ef3bf
  400f40:	02bde77f 	.word	0x02bde77f
  400f44:	041cdb3f 	.word	0x041cdb3f
  400f48:	057bceff 	.word	0x057bceff
  400f4c:	06dac2bf 	.word	0x06dac2bf
  400f50:	0839b67f 	.word	0x0839b67f
  400f54:	04000500 	.word	0x04000500
  400f58:	04000600 	.word	0x04000600
  400f5c:	400e0c00 	.word	0x400e0c00
  400f60:	04000100 	.word	0x04000100
  400f64:	04000200 	.word	0x04000200
  400f68:	04000300 	.word	0x04000300

00400f6c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400f6c:	4b0a      	ldr	r3, [pc, #40]	; (400f98 <_sbrk+0x2c>)
  400f6e:	681b      	ldr	r3, [r3, #0]
  400f70:	b153      	cbz	r3, 400f88 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400f72:	4b09      	ldr	r3, [pc, #36]	; (400f98 <_sbrk+0x2c>)
  400f74:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400f76:	181a      	adds	r2, r3, r0
  400f78:	4908      	ldr	r1, [pc, #32]	; (400f9c <_sbrk+0x30>)
  400f7a:	4291      	cmp	r1, r2
  400f7c:	db08      	blt.n	400f90 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400f7e:	4610      	mov	r0, r2
  400f80:	4a05      	ldr	r2, [pc, #20]	; (400f98 <_sbrk+0x2c>)
  400f82:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400f84:	4618      	mov	r0, r3
  400f86:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400f88:	4a05      	ldr	r2, [pc, #20]	; (400fa0 <_sbrk+0x34>)
  400f8a:	4b03      	ldr	r3, [pc, #12]	; (400f98 <_sbrk+0x2c>)
  400f8c:	601a      	str	r2, [r3, #0]
  400f8e:	e7f0      	b.n	400f72 <_sbrk+0x6>
		return (caddr_t) -1;	
  400f90:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f94:	4770      	bx	lr
  400f96:	bf00      	nop
  400f98:	20400a5c 	.word	0x20400a5c
  400f9c:	2045fffc 	.word	0x2045fffc
  400fa0:	20402ec8 	.word	0x20402ec8

00400fa4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400fa4:	f04f 30ff 	mov.w	r0, #4294967295
  400fa8:	4770      	bx	lr

00400faa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400fae:	604b      	str	r3, [r1, #4]

	return 0;
}
  400fb0:	2000      	movs	r0, #0
  400fb2:	4770      	bx	lr

00400fb4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400fb4:	2001      	movs	r0, #1
  400fb6:	4770      	bx	lr

00400fb8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400fb8:	2000      	movs	r0, #0
  400fba:	4770      	bx	lr

00400fbc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400fbc:	f100 0308 	add.w	r3, r0, #8
  400fc0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400fc2:	f04f 32ff 	mov.w	r2, #4294967295
  400fc6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400fc8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400fca:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400fcc:	2300      	movs	r3, #0
  400fce:	6003      	str	r3, [r0, #0]
  400fd0:	4770      	bx	lr

00400fd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400fd2:	2300      	movs	r3, #0
  400fd4:	6103      	str	r3, [r0, #16]
  400fd6:	4770      	bx	lr

00400fd8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400fd8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400fda:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400fdc:	689a      	ldr	r2, [r3, #8]
  400fde:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400fe0:	689a      	ldr	r2, [r3, #8]
  400fe2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400fe4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400fe6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400fe8:	6803      	ldr	r3, [r0, #0]
  400fea:	3301      	adds	r3, #1
  400fec:	6003      	str	r3, [r0, #0]
  400fee:	4770      	bx	lr

00400ff0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400ff0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400ff2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400ff4:	f1b5 3fff 	cmp.w	r5, #4294967295
  400ff8:	d002      	beq.n	401000 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400ffa:	f100 0208 	add.w	r2, r0, #8
  400ffe:	e002      	b.n	401006 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401000:	6902      	ldr	r2, [r0, #16]
  401002:	e004      	b.n	40100e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401004:	461a      	mov	r2, r3
  401006:	6853      	ldr	r3, [r2, #4]
  401008:	681c      	ldr	r4, [r3, #0]
  40100a:	42a5      	cmp	r5, r4
  40100c:	d2fa      	bcs.n	401004 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  40100e:	6853      	ldr	r3, [r2, #4]
  401010:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401012:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401014:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401016:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401018:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40101a:	6803      	ldr	r3, [r0, #0]
  40101c:	3301      	adds	r3, #1
  40101e:	6003      	str	r3, [r0, #0]
}
  401020:	bc30      	pop	{r4, r5}
  401022:	4770      	bx	lr

00401024 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401024:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401026:	6842      	ldr	r2, [r0, #4]
  401028:	6881      	ldr	r1, [r0, #8]
  40102a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  40102c:	6882      	ldr	r2, [r0, #8]
  40102e:	6841      	ldr	r1, [r0, #4]
  401030:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401032:	685a      	ldr	r2, [r3, #4]
  401034:	4290      	cmp	r0, r2
  401036:	d005      	beq.n	401044 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401038:	2200      	movs	r2, #0
  40103a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  40103c:	6818      	ldr	r0, [r3, #0]
  40103e:	3801      	subs	r0, #1
  401040:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401042:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401044:	6882      	ldr	r2, [r0, #8]
  401046:	605a      	str	r2, [r3, #4]
  401048:	e7f6      	b.n	401038 <uxListRemove+0x14>
	...

0040104c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  40104c:	4b0d      	ldr	r3, [pc, #52]	; (401084 <prvTaskExitError+0x38>)
  40104e:	681b      	ldr	r3, [r3, #0]
  401050:	f1b3 3fff 	cmp.w	r3, #4294967295
  401054:	d00a      	beq.n	40106c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401056:	f04f 0380 	mov.w	r3, #128	; 0x80
  40105a:	b672      	cpsid	i
  40105c:	f383 8811 	msr	BASEPRI, r3
  401060:	f3bf 8f6f 	isb	sy
  401064:	f3bf 8f4f 	dsb	sy
  401068:	b662      	cpsie	i
  40106a:	e7fe      	b.n	40106a <prvTaskExitError+0x1e>
  40106c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401070:	b672      	cpsid	i
  401072:	f383 8811 	msr	BASEPRI, r3
  401076:	f3bf 8f6f 	isb	sy
  40107a:	f3bf 8f4f 	dsb	sy
  40107e:	b662      	cpsie	i
  401080:	e7fe      	b.n	401080 <prvTaskExitError+0x34>
  401082:	bf00      	nop
  401084:	20400010 	.word	0x20400010

00401088 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401088:	4806      	ldr	r0, [pc, #24]	; (4010a4 <prvPortStartFirstTask+0x1c>)
  40108a:	6800      	ldr	r0, [r0, #0]
  40108c:	6800      	ldr	r0, [r0, #0]
  40108e:	f380 8808 	msr	MSP, r0
  401092:	b662      	cpsie	i
  401094:	b661      	cpsie	f
  401096:	f3bf 8f4f 	dsb	sy
  40109a:	f3bf 8f6f 	isb	sy
  40109e:	df00      	svc	0
  4010a0:	bf00      	nop
  4010a2:	0000      	.short	0x0000
  4010a4:	e000ed08 	.word	0xe000ed08

004010a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  4010a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4010b8 <vPortEnableVFP+0x10>
  4010ac:	6801      	ldr	r1, [r0, #0]
  4010ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4010b2:	6001      	str	r1, [r0, #0]
  4010b4:	4770      	bx	lr
  4010b6:	0000      	.short	0x0000
  4010b8:	e000ed88 	.word	0xe000ed88

004010bc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4010bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  4010c0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  4010c4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  4010c8:	4b05      	ldr	r3, [pc, #20]	; (4010e0 <pxPortInitialiseStack+0x24>)
  4010ca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  4010ce:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  4010d2:	f06f 0302 	mvn.w	r3, #2
  4010d6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  4010da:	3844      	subs	r0, #68	; 0x44
  4010dc:	4770      	bx	lr
  4010de:	bf00      	nop
  4010e0:	0040104d 	.word	0x0040104d

004010e4 <SVC_Handler>:
	__asm volatile (
  4010e4:	4b06      	ldr	r3, [pc, #24]	; (401100 <pxCurrentTCBConst2>)
  4010e6:	6819      	ldr	r1, [r3, #0]
  4010e8:	6808      	ldr	r0, [r1, #0]
  4010ea:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4010ee:	f380 8809 	msr	PSP, r0
  4010f2:	f3bf 8f6f 	isb	sy
  4010f6:	f04f 0000 	mov.w	r0, #0
  4010fa:	f380 8811 	msr	BASEPRI, r0
  4010fe:	4770      	bx	lr

00401100 <pxCurrentTCBConst2>:
  401100:	20400a68 	.word	0x20400a68
  401104:	4770      	bx	lr
  401106:	bf00      	nop

00401108 <vPortEnterCritical>:
  401108:	f04f 0380 	mov.w	r3, #128	; 0x80
  40110c:	b672      	cpsid	i
  40110e:	f383 8811 	msr	BASEPRI, r3
  401112:	f3bf 8f6f 	isb	sy
  401116:	f3bf 8f4f 	dsb	sy
  40111a:	b662      	cpsie	i
	uxCriticalNesting++;
  40111c:	4a0b      	ldr	r2, [pc, #44]	; (40114c <vPortEnterCritical+0x44>)
  40111e:	6813      	ldr	r3, [r2, #0]
  401120:	3301      	adds	r3, #1
  401122:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401124:	2b01      	cmp	r3, #1
  401126:	d10f      	bne.n	401148 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401128:	4b09      	ldr	r3, [pc, #36]	; (401150 <vPortEnterCritical+0x48>)
  40112a:	681b      	ldr	r3, [r3, #0]
  40112c:	f013 0fff 	tst.w	r3, #255	; 0xff
  401130:	d00a      	beq.n	401148 <vPortEnterCritical+0x40>
  401132:	f04f 0380 	mov.w	r3, #128	; 0x80
  401136:	b672      	cpsid	i
  401138:	f383 8811 	msr	BASEPRI, r3
  40113c:	f3bf 8f6f 	isb	sy
  401140:	f3bf 8f4f 	dsb	sy
  401144:	b662      	cpsie	i
  401146:	e7fe      	b.n	401146 <vPortEnterCritical+0x3e>
  401148:	4770      	bx	lr
  40114a:	bf00      	nop
  40114c:	20400010 	.word	0x20400010
  401150:	e000ed04 	.word	0xe000ed04

00401154 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401154:	4b0a      	ldr	r3, [pc, #40]	; (401180 <vPortExitCritical+0x2c>)
  401156:	681b      	ldr	r3, [r3, #0]
  401158:	b953      	cbnz	r3, 401170 <vPortExitCritical+0x1c>
  40115a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40115e:	b672      	cpsid	i
  401160:	f383 8811 	msr	BASEPRI, r3
  401164:	f3bf 8f6f 	isb	sy
  401168:	f3bf 8f4f 	dsb	sy
  40116c:	b662      	cpsie	i
  40116e:	e7fe      	b.n	40116e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401170:	3b01      	subs	r3, #1
  401172:	4a03      	ldr	r2, [pc, #12]	; (401180 <vPortExitCritical+0x2c>)
  401174:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401176:	b90b      	cbnz	r3, 40117c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401178:	f383 8811 	msr	BASEPRI, r3
  40117c:	4770      	bx	lr
  40117e:	bf00      	nop
  401180:	20400010 	.word	0x20400010

00401184 <PendSV_Handler>:
	__asm volatile
  401184:	f3ef 8009 	mrs	r0, PSP
  401188:	f3bf 8f6f 	isb	sy
  40118c:	4b15      	ldr	r3, [pc, #84]	; (4011e4 <pxCurrentTCBConst>)
  40118e:	681a      	ldr	r2, [r3, #0]
  401190:	f01e 0f10 	tst.w	lr, #16
  401194:	bf08      	it	eq
  401196:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  40119a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40119e:	6010      	str	r0, [r2, #0]
  4011a0:	f84d 3d04 	str.w	r3, [sp, #-4]!
  4011a4:	f04f 0080 	mov.w	r0, #128	; 0x80
  4011a8:	b672      	cpsid	i
  4011aa:	f380 8811 	msr	BASEPRI, r0
  4011ae:	f3bf 8f4f 	dsb	sy
  4011b2:	f3bf 8f6f 	isb	sy
  4011b6:	b662      	cpsie	i
  4011b8:	f001 f8fe 	bl	4023b8 <vTaskSwitchContext>
  4011bc:	f04f 0000 	mov.w	r0, #0
  4011c0:	f380 8811 	msr	BASEPRI, r0
  4011c4:	bc08      	pop	{r3}
  4011c6:	6819      	ldr	r1, [r3, #0]
  4011c8:	6808      	ldr	r0, [r1, #0]
  4011ca:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4011ce:	f01e 0f10 	tst.w	lr, #16
  4011d2:	bf08      	it	eq
  4011d4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  4011d8:	f380 8809 	msr	PSP, r0
  4011dc:	f3bf 8f6f 	isb	sy
  4011e0:	4770      	bx	lr
  4011e2:	bf00      	nop

004011e4 <pxCurrentTCBConst>:
  4011e4:	20400a68 	.word	0x20400a68
  4011e8:	4770      	bx	lr
  4011ea:	bf00      	nop

004011ec <SysTick_Handler>:
{
  4011ec:	b508      	push	{r3, lr}
	__asm volatile
  4011ee:	f3ef 8311 	mrs	r3, BASEPRI
  4011f2:	f04f 0280 	mov.w	r2, #128	; 0x80
  4011f6:	b672      	cpsid	i
  4011f8:	f382 8811 	msr	BASEPRI, r2
  4011fc:	f3bf 8f6f 	isb	sy
  401200:	f3bf 8f4f 	dsb	sy
  401204:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  401206:	4b05      	ldr	r3, [pc, #20]	; (40121c <SysTick_Handler+0x30>)
  401208:	4798      	blx	r3
  40120a:	b118      	cbz	r0, 401214 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40120c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401210:	4b03      	ldr	r3, [pc, #12]	; (401220 <SysTick_Handler+0x34>)
  401212:	601a      	str	r2, [r3, #0]
	__asm volatile
  401214:	2300      	movs	r3, #0
  401216:	f383 8811 	msr	BASEPRI, r3
  40121a:	bd08      	pop	{r3, pc}
  40121c:	00402025 	.word	0x00402025
  401220:	e000ed04 	.word	0xe000ed04

00401224 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401224:	4a03      	ldr	r2, [pc, #12]	; (401234 <vPortSetupTimerInterrupt+0x10>)
  401226:	4b04      	ldr	r3, [pc, #16]	; (401238 <vPortSetupTimerInterrupt+0x14>)
  401228:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40122a:	2207      	movs	r2, #7
  40122c:	3b04      	subs	r3, #4
  40122e:	601a      	str	r2, [r3, #0]
  401230:	4770      	bx	lr
  401232:	bf00      	nop
  401234:	000927bf 	.word	0x000927bf
  401238:	e000e014 	.word	0xe000e014

0040123c <xPortStartScheduler>:
{
  40123c:	b500      	push	{lr}
  40123e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  401240:	4b25      	ldr	r3, [pc, #148]	; (4012d8 <xPortStartScheduler+0x9c>)
  401242:	781a      	ldrb	r2, [r3, #0]
  401244:	b2d2      	uxtb	r2, r2
  401246:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  401248:	22ff      	movs	r2, #255	; 0xff
  40124a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40124c:	781b      	ldrb	r3, [r3, #0]
  40124e:	b2db      	uxtb	r3, r3
  401250:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401254:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401258:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40125c:	4a1f      	ldr	r2, [pc, #124]	; (4012dc <xPortStartScheduler+0xa0>)
  40125e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401260:	2207      	movs	r2, #7
  401262:	4b1f      	ldr	r3, [pc, #124]	; (4012e0 <xPortStartScheduler+0xa4>)
  401264:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401266:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40126a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40126e:	d010      	beq.n	401292 <xPortStartScheduler+0x56>
  401270:	2206      	movs	r2, #6
  401272:	e000      	b.n	401276 <xPortStartScheduler+0x3a>
  401274:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  401276:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40127a:	005b      	lsls	r3, r3, #1
  40127c:	b2db      	uxtb	r3, r3
  40127e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401282:	f89d 3003 	ldrb.w	r3, [sp, #3]
  401286:	1e51      	subs	r1, r2, #1
  401288:	f013 0f80 	tst.w	r3, #128	; 0x80
  40128c:	d1f2      	bne.n	401274 <xPortStartScheduler+0x38>
  40128e:	4b14      	ldr	r3, [pc, #80]	; (4012e0 <xPortStartScheduler+0xa4>)
  401290:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401292:	4a13      	ldr	r2, [pc, #76]	; (4012e0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401294:	6813      	ldr	r3, [r2, #0]
  401296:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40129c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40129e:	9b01      	ldr	r3, [sp, #4]
  4012a0:	b2db      	uxtb	r3, r3
  4012a2:	4a0d      	ldr	r2, [pc, #52]	; (4012d8 <xPortStartScheduler+0x9c>)
  4012a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4012a6:	4b0f      	ldr	r3, [pc, #60]	; (4012e4 <xPortStartScheduler+0xa8>)
  4012a8:	681a      	ldr	r2, [r3, #0]
  4012aa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4012ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4012b0:	681a      	ldr	r2, [r3, #0]
  4012b2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4012b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4012b8:	4b0b      	ldr	r3, [pc, #44]	; (4012e8 <xPortStartScheduler+0xac>)
  4012ba:	4798      	blx	r3
	uxCriticalNesting = 0;
  4012bc:	2200      	movs	r2, #0
  4012be:	4b0b      	ldr	r3, [pc, #44]	; (4012ec <xPortStartScheduler+0xb0>)
  4012c0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4012c2:	4b0b      	ldr	r3, [pc, #44]	; (4012f0 <xPortStartScheduler+0xb4>)
  4012c4:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4012c6:	4a0b      	ldr	r2, [pc, #44]	; (4012f4 <xPortStartScheduler+0xb8>)
  4012c8:	6813      	ldr	r3, [r2, #0]
  4012ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4012ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4012d0:	4b09      	ldr	r3, [pc, #36]	; (4012f8 <xPortStartScheduler+0xbc>)
  4012d2:	4798      	blx	r3
	prvTaskExitError();
  4012d4:	4b09      	ldr	r3, [pc, #36]	; (4012fc <xPortStartScheduler+0xc0>)
  4012d6:	4798      	blx	r3
  4012d8:	e000e400 	.word	0xe000e400
  4012dc:	20400a60 	.word	0x20400a60
  4012e0:	20400a64 	.word	0x20400a64
  4012e4:	e000ed20 	.word	0xe000ed20
  4012e8:	00401225 	.word	0x00401225
  4012ec:	20400010 	.word	0x20400010
  4012f0:	004010a9 	.word	0x004010a9
  4012f4:	e000ef34 	.word	0xe000ef34
  4012f8:	00401089 	.word	0x00401089
  4012fc:	0040104d 	.word	0x0040104d

00401300 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401300:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401304:	2b0f      	cmp	r3, #15
  401306:	d911      	bls.n	40132c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401308:	4a12      	ldr	r2, [pc, #72]	; (401354 <vPortValidateInterruptPriority+0x54>)
  40130a:	5c9b      	ldrb	r3, [r3, r2]
  40130c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40130e:	4a12      	ldr	r2, [pc, #72]	; (401358 <vPortValidateInterruptPriority+0x58>)
  401310:	7812      	ldrb	r2, [r2, #0]
  401312:	429a      	cmp	r2, r3
  401314:	d90a      	bls.n	40132c <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  401316:	f04f 0380 	mov.w	r3, #128	; 0x80
  40131a:	b672      	cpsid	i
  40131c:	f383 8811 	msr	BASEPRI, r3
  401320:	f3bf 8f6f 	isb	sy
  401324:	f3bf 8f4f 	dsb	sy
  401328:	b662      	cpsie	i
  40132a:	e7fe      	b.n	40132a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40132c:	4b0b      	ldr	r3, [pc, #44]	; (40135c <vPortValidateInterruptPriority+0x5c>)
  40132e:	681b      	ldr	r3, [r3, #0]
  401330:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401334:	4a0a      	ldr	r2, [pc, #40]	; (401360 <vPortValidateInterruptPriority+0x60>)
  401336:	6812      	ldr	r2, [r2, #0]
  401338:	4293      	cmp	r3, r2
  40133a:	d90a      	bls.n	401352 <vPortValidateInterruptPriority+0x52>
  40133c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401340:	b672      	cpsid	i
  401342:	f383 8811 	msr	BASEPRI, r3
  401346:	f3bf 8f6f 	isb	sy
  40134a:	f3bf 8f4f 	dsb	sy
  40134e:	b662      	cpsie	i
  401350:	e7fe      	b.n	401350 <vPortValidateInterruptPriority+0x50>
  401352:	4770      	bx	lr
  401354:	e000e3f0 	.word	0xe000e3f0
  401358:	20400a60 	.word	0x20400a60
  40135c:	e000ed0c 	.word	0xe000ed0c
  401360:	20400a64 	.word	0x20400a64

00401364 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401364:	b510      	push	{r4, lr}
  401366:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401368:	4b06      	ldr	r3, [pc, #24]	; (401384 <pvPortMalloc+0x20>)
  40136a:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  40136c:	4620      	mov	r0, r4
  40136e:	4b06      	ldr	r3, [pc, #24]	; (401388 <pvPortMalloc+0x24>)
  401370:	4798      	blx	r3
  401372:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401374:	4b05      	ldr	r3, [pc, #20]	; (40138c <pvPortMalloc+0x28>)
  401376:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401378:	b10c      	cbz	r4, 40137e <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  40137a:	4620      	mov	r0, r4
  40137c:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40137e:	4b04      	ldr	r3, [pc, #16]	; (401390 <pvPortMalloc+0x2c>)
  401380:	4798      	blx	r3
	return pvReturn;
  401382:	e7fa      	b.n	40137a <pvPortMalloc+0x16>
  401384:	00402009 	.word	0x00402009
  401388:	00403dbd 	.word	0x00403dbd
  40138c:	00402171 	.word	0x00402171
  401390:	00402f1f 	.word	0x00402f1f

00401394 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401394:	b148      	cbz	r0, 4013aa <vPortFree+0x16>
{
  401396:	b510      	push	{r4, lr}
  401398:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  40139a:	4b04      	ldr	r3, [pc, #16]	; (4013ac <vPortFree+0x18>)
  40139c:	4798      	blx	r3
		{
			free( pv );
  40139e:	4620      	mov	r0, r4
  4013a0:	4b03      	ldr	r3, [pc, #12]	; (4013b0 <vPortFree+0x1c>)
  4013a2:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  4013a4:	4b03      	ldr	r3, [pc, #12]	; (4013b4 <vPortFree+0x20>)
  4013a6:	4798      	blx	r3
  4013a8:	bd10      	pop	{r4, pc}
  4013aa:	4770      	bx	lr
  4013ac:	00402009 	.word	0x00402009
  4013b0:	00403dcd 	.word	0x00403dcd
  4013b4:	00402171 	.word	0x00402171

004013b8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4013b8:	b538      	push	{r3, r4, r5, lr}
  4013ba:	4604      	mov	r4, r0
  4013bc:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4013be:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4013c0:	b95a      	cbnz	r2, 4013da <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4013c2:	6803      	ldr	r3, [r0, #0]
  4013c4:	2b00      	cmp	r3, #0
  4013c6:	d12e      	bne.n	401426 <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4013c8:	6840      	ldr	r0, [r0, #4]
  4013ca:	4b1b      	ldr	r3, [pc, #108]	; (401438 <prvCopyDataToQueue+0x80>)
  4013cc:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4013ce:	2300      	movs	r3, #0
  4013d0:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  4013d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4013d4:	3301      	adds	r3, #1
  4013d6:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  4013d8:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4013da:	b96d      	cbnz	r5, 4013f8 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4013dc:	6880      	ldr	r0, [r0, #8]
  4013de:	4b17      	ldr	r3, [pc, #92]	; (40143c <prvCopyDataToQueue+0x84>)
  4013e0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4013e2:	68a3      	ldr	r3, [r4, #8]
  4013e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4013e6:	4413      	add	r3, r2
  4013e8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4013ea:	6862      	ldr	r2, [r4, #4]
  4013ec:	4293      	cmp	r3, r2
  4013ee:	d31c      	bcc.n	40142a <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4013f0:	6823      	ldr	r3, [r4, #0]
  4013f2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4013f4:	2000      	movs	r0, #0
  4013f6:	e7ec      	b.n	4013d2 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4013f8:	68c0      	ldr	r0, [r0, #12]
  4013fa:	4b10      	ldr	r3, [pc, #64]	; (40143c <prvCopyDataToQueue+0x84>)
  4013fc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4013fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401400:	425b      	negs	r3, r3
  401402:	68e2      	ldr	r2, [r4, #12]
  401404:	441a      	add	r2, r3
  401406:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401408:	6821      	ldr	r1, [r4, #0]
  40140a:	428a      	cmp	r2, r1
  40140c:	d202      	bcs.n	401414 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40140e:	6862      	ldr	r2, [r4, #4]
  401410:	4413      	add	r3, r2
  401412:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401414:	2d02      	cmp	r5, #2
  401416:	d10a      	bne.n	40142e <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401418:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40141a:	b153      	cbz	r3, 401432 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  40141c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40141e:	3b01      	subs	r3, #1
  401420:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401422:	2000      	movs	r0, #0
  401424:	e7d5      	b.n	4013d2 <prvCopyDataToQueue+0x1a>
  401426:	2000      	movs	r0, #0
  401428:	e7d3      	b.n	4013d2 <prvCopyDataToQueue+0x1a>
  40142a:	2000      	movs	r0, #0
  40142c:	e7d1      	b.n	4013d2 <prvCopyDataToQueue+0x1a>
  40142e:	2000      	movs	r0, #0
  401430:	e7cf      	b.n	4013d2 <prvCopyDataToQueue+0x1a>
  401432:	2000      	movs	r0, #0
  401434:	e7cd      	b.n	4013d2 <prvCopyDataToQueue+0x1a>
  401436:	bf00      	nop
  401438:	004027b9 	.word	0x004027b9
  40143c:	0040433d 	.word	0x0040433d

00401440 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401440:	b530      	push	{r4, r5, lr}
  401442:	b083      	sub	sp, #12
  401444:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401446:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401448:	b174      	cbz	r4, 401468 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40144a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40144c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40144e:	429a      	cmp	r2, r3
  401450:	d315      	bcc.n	40147e <prvNotifyQueueSetContainer+0x3e>
  401452:	f04f 0380 	mov.w	r3, #128	; 0x80
  401456:	b672      	cpsid	i
  401458:	f383 8811 	msr	BASEPRI, r3
  40145c:	f3bf 8f6f 	isb	sy
  401460:	f3bf 8f4f 	dsb	sy
  401464:	b662      	cpsie	i
  401466:	e7fe      	b.n	401466 <prvNotifyQueueSetContainer+0x26>
  401468:	f04f 0380 	mov.w	r3, #128	; 0x80
  40146c:	b672      	cpsid	i
  40146e:	f383 8811 	msr	BASEPRI, r3
  401472:	f3bf 8f6f 	isb	sy
  401476:	f3bf 8f4f 	dsb	sy
  40147a:	b662      	cpsie	i
  40147c:	e7fe      	b.n	40147c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40147e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401480:	4293      	cmp	r3, r2
  401482:	d803      	bhi.n	40148c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401484:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401486:	4628      	mov	r0, r5
  401488:	b003      	add	sp, #12
  40148a:	bd30      	pop	{r4, r5, pc}
  40148c:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40148e:	a901      	add	r1, sp, #4
  401490:	4620      	mov	r0, r4
  401492:	4b0b      	ldr	r3, [pc, #44]	; (4014c0 <prvNotifyQueueSetContainer+0x80>)
  401494:	4798      	blx	r3
  401496:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401498:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40149a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40149e:	d10a      	bne.n	4014b6 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4014a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4014a2:	2b00      	cmp	r3, #0
  4014a4:	d0ef      	beq.n	401486 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4014a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4014aa:	4b06      	ldr	r3, [pc, #24]	; (4014c4 <prvNotifyQueueSetContainer+0x84>)
  4014ac:	4798      	blx	r3
  4014ae:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4014b0:	bf18      	it	ne
  4014b2:	2501      	movne	r5, #1
  4014b4:	e7e7      	b.n	401486 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4014b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014b8:	3301      	adds	r3, #1
  4014ba:	64a3      	str	r3, [r4, #72]	; 0x48
  4014bc:	e7e3      	b.n	401486 <prvNotifyQueueSetContainer+0x46>
  4014be:	bf00      	nop
  4014c0:	004013b9 	.word	0x004013b9
  4014c4:	0040258d 	.word	0x0040258d

004014c8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4014c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014ca:	b172      	cbz	r2, 4014ea <prvCopyDataFromQueue+0x22>
{
  4014cc:	b510      	push	{r4, lr}
  4014ce:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4014d0:	68c4      	ldr	r4, [r0, #12]
  4014d2:	4414      	add	r4, r2
  4014d4:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4014d6:	6840      	ldr	r0, [r0, #4]
  4014d8:	4284      	cmp	r4, r0
  4014da:	d301      	bcc.n	4014e0 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4014dc:	6818      	ldr	r0, [r3, #0]
  4014de:	60d8      	str	r0, [r3, #12]
  4014e0:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4014e2:	68d9      	ldr	r1, [r3, #12]
  4014e4:	4b01      	ldr	r3, [pc, #4]	; (4014ec <prvCopyDataFromQueue+0x24>)
  4014e6:	4798      	blx	r3
  4014e8:	bd10      	pop	{r4, pc}
  4014ea:	4770      	bx	lr
  4014ec:	0040433d 	.word	0x0040433d

004014f0 <prvUnlockQueue>:
{
  4014f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4014f4:	4b22      	ldr	r3, [pc, #136]	; (401580 <prvUnlockQueue+0x90>)
  4014f6:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4014f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	dd1b      	ble.n	401536 <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4014fe:	4d21      	ldr	r5, [pc, #132]	; (401584 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401500:	4f21      	ldr	r7, [pc, #132]	; (401588 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401502:	4e22      	ldr	r6, [pc, #136]	; (40158c <prvUnlockQueue+0x9c>)
  401504:	e00b      	b.n	40151e <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401506:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401508:	b1ab      	cbz	r3, 401536 <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40150a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40150e:	47b0      	blx	r6
  401510:	b978      	cbnz	r0, 401532 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401512:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401514:	3b01      	subs	r3, #1
  401516:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  401518:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40151a:	2b00      	cmp	r3, #0
  40151c:	dd0b      	ble.n	401536 <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  40151e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401520:	2b00      	cmp	r3, #0
  401522:	d0f0      	beq.n	401506 <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401524:	2100      	movs	r1, #0
  401526:	4620      	mov	r0, r4
  401528:	47a8      	blx	r5
  40152a:	2801      	cmp	r0, #1
  40152c:	d1f1      	bne.n	401512 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  40152e:	47b8      	blx	r7
  401530:	e7ef      	b.n	401512 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401532:	47b8      	blx	r7
  401534:	e7ed      	b.n	401512 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  401536:	f04f 33ff 	mov.w	r3, #4294967295
  40153a:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  40153c:	4b14      	ldr	r3, [pc, #80]	; (401590 <prvUnlockQueue+0xa0>)
  40153e:	4798      	blx	r3
	taskENTER_CRITICAL();
  401540:	4b0f      	ldr	r3, [pc, #60]	; (401580 <prvUnlockQueue+0x90>)
  401542:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401544:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401546:	2b00      	cmp	r3, #0
  401548:	dd14      	ble.n	401574 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40154a:	6923      	ldr	r3, [r4, #16]
  40154c:	b193      	cbz	r3, 401574 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40154e:	f104 0610 	add.w	r6, r4, #16
  401552:	4d0e      	ldr	r5, [pc, #56]	; (40158c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  401554:	4f0c      	ldr	r7, [pc, #48]	; (401588 <prvUnlockQueue+0x98>)
  401556:	e007      	b.n	401568 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  401558:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40155a:	3b01      	subs	r3, #1
  40155c:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40155e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401560:	2b00      	cmp	r3, #0
  401562:	dd07      	ble.n	401574 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401564:	6923      	ldr	r3, [r4, #16]
  401566:	b12b      	cbz	r3, 401574 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401568:	4630      	mov	r0, r6
  40156a:	47a8      	blx	r5
  40156c:	2800      	cmp	r0, #0
  40156e:	d0f3      	beq.n	401558 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  401570:	47b8      	blx	r7
  401572:	e7f1      	b.n	401558 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  401574:	f04f 33ff 	mov.w	r3, #4294967295
  401578:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  40157a:	4b05      	ldr	r3, [pc, #20]	; (401590 <prvUnlockQueue+0xa0>)
  40157c:	4798      	blx	r3
  40157e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401580:	00401109 	.word	0x00401109
  401584:	00401441 	.word	0x00401441
  401588:	004026e9 	.word	0x004026e9
  40158c:	0040258d 	.word	0x0040258d
  401590:	00401155 	.word	0x00401155

00401594 <xQueueGenericReset>:
{
  401594:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401596:	b308      	cbz	r0, 4015dc <xQueueGenericReset+0x48>
  401598:	4604      	mov	r4, r0
  40159a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40159c:	4b1d      	ldr	r3, [pc, #116]	; (401614 <xQueueGenericReset+0x80>)
  40159e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4015a0:	6822      	ldr	r2, [r4, #0]
  4015a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4015a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4015a6:	fb03 f301 	mul.w	r3, r3, r1
  4015aa:	18d0      	adds	r0, r2, r3
  4015ac:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4015ae:	2000      	movs	r0, #0
  4015b0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4015b2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4015b4:	1a5b      	subs	r3, r3, r1
  4015b6:	4413      	add	r3, r2
  4015b8:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4015ba:	f04f 33ff 	mov.w	r3, #4294967295
  4015be:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4015c0:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4015c2:	b9fd      	cbnz	r5, 401604 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015c4:	6923      	ldr	r3, [r4, #16]
  4015c6:	b12b      	cbz	r3, 4015d4 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  4015c8:	f104 0010 	add.w	r0, r4, #16
  4015cc:	4b12      	ldr	r3, [pc, #72]	; (401618 <xQueueGenericReset+0x84>)
  4015ce:	4798      	blx	r3
  4015d0:	2801      	cmp	r0, #1
  4015d2:	d00e      	beq.n	4015f2 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  4015d4:	4b11      	ldr	r3, [pc, #68]	; (40161c <xQueueGenericReset+0x88>)
  4015d6:	4798      	blx	r3
}
  4015d8:	2001      	movs	r0, #1
  4015da:	bd38      	pop	{r3, r4, r5, pc}
  4015dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015e0:	b672      	cpsid	i
  4015e2:	f383 8811 	msr	BASEPRI, r3
  4015e6:	f3bf 8f6f 	isb	sy
  4015ea:	f3bf 8f4f 	dsb	sy
  4015ee:	b662      	cpsie	i
  4015f0:	e7fe      	b.n	4015f0 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  4015f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015f6:	4b0a      	ldr	r3, [pc, #40]	; (401620 <xQueueGenericReset+0x8c>)
  4015f8:	601a      	str	r2, [r3, #0]
  4015fa:	f3bf 8f4f 	dsb	sy
  4015fe:	f3bf 8f6f 	isb	sy
  401602:	e7e7      	b.n	4015d4 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401604:	f104 0010 	add.w	r0, r4, #16
  401608:	4d06      	ldr	r5, [pc, #24]	; (401624 <xQueueGenericReset+0x90>)
  40160a:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  40160c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401610:	47a8      	blx	r5
  401612:	e7df      	b.n	4015d4 <xQueueGenericReset+0x40>
  401614:	00401109 	.word	0x00401109
  401618:	0040258d 	.word	0x0040258d
  40161c:	00401155 	.word	0x00401155
  401620:	e000ed04 	.word	0xe000ed04
  401624:	00400fbd 	.word	0x00400fbd

00401628 <xQueueGenericCreate>:
{
  401628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40162a:	b950      	cbnz	r0, 401642 <xQueueGenericCreate+0x1a>
  40162c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401630:	b672      	cpsid	i
  401632:	f383 8811 	msr	BASEPRI, r3
  401636:	f3bf 8f6f 	isb	sy
  40163a:	f3bf 8f4f 	dsb	sy
  40163e:	b662      	cpsie	i
  401640:	e7fe      	b.n	401640 <xQueueGenericCreate+0x18>
  401642:	4606      	mov	r6, r0
  401644:	4617      	mov	r7, r2
  401646:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  401648:	b189      	cbz	r1, 40166e <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40164a:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40164e:	3059      	adds	r0, #89	; 0x59
  401650:	4b12      	ldr	r3, [pc, #72]	; (40169c <xQueueGenericCreate+0x74>)
  401652:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401654:	4604      	mov	r4, r0
  401656:	b9e8      	cbnz	r0, 401694 <xQueueGenericCreate+0x6c>
  401658:	f04f 0380 	mov.w	r3, #128	; 0x80
  40165c:	b672      	cpsid	i
  40165e:	f383 8811 	msr	BASEPRI, r3
  401662:	f3bf 8f6f 	isb	sy
  401666:	f3bf 8f4f 	dsb	sy
  40166a:	b662      	cpsie	i
  40166c:	e7fe      	b.n	40166c <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  40166e:	2058      	movs	r0, #88	; 0x58
  401670:	4b0a      	ldr	r3, [pc, #40]	; (40169c <xQueueGenericCreate+0x74>)
  401672:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401674:	4604      	mov	r4, r0
  401676:	2800      	cmp	r0, #0
  401678:	d0ee      	beq.n	401658 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  40167a:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  40167c:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  40167e:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401680:	2101      	movs	r1, #1
  401682:	4620      	mov	r0, r4
  401684:	4b06      	ldr	r3, [pc, #24]	; (4016a0 <xQueueGenericCreate+0x78>)
  401686:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401688:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  40168c:	2300      	movs	r3, #0
  40168e:	6563      	str	r3, [r4, #84]	; 0x54
}
  401690:	4620      	mov	r0, r4
  401692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401694:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401698:	6003      	str	r3, [r0, #0]
  40169a:	e7ef      	b.n	40167c <xQueueGenericCreate+0x54>
  40169c:	00401365 	.word	0x00401365
  4016a0:	00401595 	.word	0x00401595

004016a4 <xQueueGenericSend>:
{
  4016a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4016a8:	b085      	sub	sp, #20
  4016aa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4016ac:	b1b8      	cbz	r0, 4016de <xQueueGenericSend+0x3a>
  4016ae:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016b0:	b301      	cbz	r1, 4016f4 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016b2:	2b02      	cmp	r3, #2
  4016b4:	d02c      	beq.n	401710 <xQueueGenericSend+0x6c>
  4016b6:	461d      	mov	r5, r3
  4016b8:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4016ba:	4b66      	ldr	r3, [pc, #408]	; (401854 <xQueueGenericSend+0x1b0>)
  4016bc:	4798      	blx	r3
  4016be:	2800      	cmp	r0, #0
  4016c0:	d134      	bne.n	40172c <xQueueGenericSend+0x88>
  4016c2:	9b01      	ldr	r3, [sp, #4]
  4016c4:	2b00      	cmp	r3, #0
  4016c6:	d038      	beq.n	40173a <xQueueGenericSend+0x96>
  4016c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016cc:	b672      	cpsid	i
  4016ce:	f383 8811 	msr	BASEPRI, r3
  4016d2:	f3bf 8f6f 	isb	sy
  4016d6:	f3bf 8f4f 	dsb	sy
  4016da:	b662      	cpsie	i
  4016dc:	e7fe      	b.n	4016dc <xQueueGenericSend+0x38>
  4016de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016e2:	b672      	cpsid	i
  4016e4:	f383 8811 	msr	BASEPRI, r3
  4016e8:	f3bf 8f6f 	isb	sy
  4016ec:	f3bf 8f4f 	dsb	sy
  4016f0:	b662      	cpsie	i
  4016f2:	e7fe      	b.n	4016f2 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4016f6:	2a00      	cmp	r2, #0
  4016f8:	d0db      	beq.n	4016b2 <xQueueGenericSend+0xe>
  4016fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016fe:	b672      	cpsid	i
  401700:	f383 8811 	msr	BASEPRI, r3
  401704:	f3bf 8f6f 	isb	sy
  401708:	f3bf 8f4f 	dsb	sy
  40170c:	b662      	cpsie	i
  40170e:	e7fe      	b.n	40170e <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401710:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401712:	2a01      	cmp	r2, #1
  401714:	d0cf      	beq.n	4016b6 <xQueueGenericSend+0x12>
  401716:	f04f 0380 	mov.w	r3, #128	; 0x80
  40171a:	b672      	cpsid	i
  40171c:	f383 8811 	msr	BASEPRI, r3
  401720:	f3bf 8f6f 	isb	sy
  401724:	f3bf 8f4f 	dsb	sy
  401728:	b662      	cpsie	i
  40172a:	e7fe      	b.n	40172a <xQueueGenericSend+0x86>
  40172c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  40172e:	4e4a      	ldr	r6, [pc, #296]	; (401858 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401730:	f8df a150 	ldr.w	sl, [pc, #336]	; 401884 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401734:	f8df 912c 	ldr.w	r9, [pc, #300]	; 401864 <xQueueGenericSend+0x1c0>
  401738:	e042      	b.n	4017c0 <xQueueGenericSend+0x11c>
  40173a:	2700      	movs	r7, #0
  40173c:	e7f7      	b.n	40172e <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40173e:	462a      	mov	r2, r5
  401740:	4641      	mov	r1, r8
  401742:	4620      	mov	r0, r4
  401744:	4b45      	ldr	r3, [pc, #276]	; (40185c <xQueueGenericSend+0x1b8>)
  401746:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401748:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40174a:	b19b      	cbz	r3, 401774 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  40174c:	4629      	mov	r1, r5
  40174e:	4620      	mov	r0, r4
  401750:	4b43      	ldr	r3, [pc, #268]	; (401860 <xQueueGenericSend+0x1bc>)
  401752:	4798      	blx	r3
  401754:	2801      	cmp	r0, #1
  401756:	d107      	bne.n	401768 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40175c:	4b41      	ldr	r3, [pc, #260]	; (401864 <xQueueGenericSend+0x1c0>)
  40175e:	601a      	str	r2, [r3, #0]
  401760:	f3bf 8f4f 	dsb	sy
  401764:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401768:	4b3f      	ldr	r3, [pc, #252]	; (401868 <xQueueGenericSend+0x1c4>)
  40176a:	4798      	blx	r3
				return pdPASS;
  40176c:	2001      	movs	r0, #1
}
  40176e:	b005      	add	sp, #20
  401770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401774:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401776:	b173      	cbz	r3, 401796 <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401778:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40177c:	4b3b      	ldr	r3, [pc, #236]	; (40186c <xQueueGenericSend+0x1c8>)
  40177e:	4798      	blx	r3
  401780:	2801      	cmp	r0, #1
  401782:	d1f1      	bne.n	401768 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401788:	4b36      	ldr	r3, [pc, #216]	; (401864 <xQueueGenericSend+0x1c0>)
  40178a:	601a      	str	r2, [r3, #0]
  40178c:	f3bf 8f4f 	dsb	sy
  401790:	f3bf 8f6f 	isb	sy
  401794:	e7e8      	b.n	401768 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401796:	2800      	cmp	r0, #0
  401798:	d0e6      	beq.n	401768 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  40179a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40179e:	4b31      	ldr	r3, [pc, #196]	; (401864 <xQueueGenericSend+0x1c0>)
  4017a0:	601a      	str	r2, [r3, #0]
  4017a2:	f3bf 8f4f 	dsb	sy
  4017a6:	f3bf 8f6f 	isb	sy
  4017aa:	e7dd      	b.n	401768 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4017ac:	4b2e      	ldr	r3, [pc, #184]	; (401868 <xQueueGenericSend+0x1c4>)
  4017ae:	4798      	blx	r3
					return errQUEUE_FULL;
  4017b0:	2000      	movs	r0, #0
  4017b2:	e7dc      	b.n	40176e <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4017b4:	4620      	mov	r0, r4
  4017b6:	4b2e      	ldr	r3, [pc, #184]	; (401870 <xQueueGenericSend+0x1cc>)
  4017b8:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4017ba:	4b2e      	ldr	r3, [pc, #184]	; (401874 <xQueueGenericSend+0x1d0>)
  4017bc:	4798      	blx	r3
  4017be:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4017c0:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4017c2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4017c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4017c6:	429a      	cmp	r2, r3
  4017c8:	d3b9      	bcc.n	40173e <xQueueGenericSend+0x9a>
  4017ca:	2d02      	cmp	r5, #2
  4017cc:	d0b7      	beq.n	40173e <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  4017ce:	9b01      	ldr	r3, [sp, #4]
  4017d0:	2b00      	cmp	r3, #0
  4017d2:	d0eb      	beq.n	4017ac <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4017d4:	b90f      	cbnz	r7, 4017da <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  4017d6:	a802      	add	r0, sp, #8
  4017d8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4017da:	4b23      	ldr	r3, [pc, #140]	; (401868 <xQueueGenericSend+0x1c4>)
  4017dc:	4798      	blx	r3
		vTaskSuspendAll();
  4017de:	4b26      	ldr	r3, [pc, #152]	; (401878 <xQueueGenericSend+0x1d4>)
  4017e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4017e2:	47b0      	blx	r6
  4017e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4017e6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017ea:	d101      	bne.n	4017f0 <xQueueGenericSend+0x14c>
  4017ec:	2300      	movs	r3, #0
  4017ee:	6463      	str	r3, [r4, #68]	; 0x44
  4017f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4017f2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017f6:	d101      	bne.n	4017fc <xQueueGenericSend+0x158>
  4017f8:	2300      	movs	r3, #0
  4017fa:	64a3      	str	r3, [r4, #72]	; 0x48
  4017fc:	4b1a      	ldr	r3, [pc, #104]	; (401868 <xQueueGenericSend+0x1c4>)
  4017fe:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401800:	a901      	add	r1, sp, #4
  401802:	a802      	add	r0, sp, #8
  401804:	4b1d      	ldr	r3, [pc, #116]	; (40187c <xQueueGenericSend+0x1d8>)
  401806:	4798      	blx	r3
  401808:	b9e0      	cbnz	r0, 401844 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40180a:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  40180c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401810:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401812:	4b15      	ldr	r3, [pc, #84]	; (401868 <xQueueGenericSend+0x1c4>)
  401814:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401816:	45bb      	cmp	fp, r7
  401818:	d1cc      	bne.n	4017b4 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40181a:	9901      	ldr	r1, [sp, #4]
  40181c:	f104 0010 	add.w	r0, r4, #16
  401820:	4b17      	ldr	r3, [pc, #92]	; (401880 <xQueueGenericSend+0x1dc>)
  401822:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401824:	4620      	mov	r0, r4
  401826:	4b12      	ldr	r3, [pc, #72]	; (401870 <xQueueGenericSend+0x1cc>)
  401828:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40182a:	4b12      	ldr	r3, [pc, #72]	; (401874 <xQueueGenericSend+0x1d0>)
  40182c:	4798      	blx	r3
  40182e:	2800      	cmp	r0, #0
  401830:	d1c5      	bne.n	4017be <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401836:	f8c9 3000 	str.w	r3, [r9]
  40183a:	f3bf 8f4f 	dsb	sy
  40183e:	f3bf 8f6f 	isb	sy
  401842:	e7bc      	b.n	4017be <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401844:	4620      	mov	r0, r4
  401846:	4b0a      	ldr	r3, [pc, #40]	; (401870 <xQueueGenericSend+0x1cc>)
  401848:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40184a:	4b0a      	ldr	r3, [pc, #40]	; (401874 <xQueueGenericSend+0x1d0>)
  40184c:	4798      	blx	r3
			return errQUEUE_FULL;
  40184e:	2000      	movs	r0, #0
  401850:	e78d      	b.n	40176e <xQueueGenericSend+0xca>
  401852:	bf00      	nop
  401854:	004026f5 	.word	0x004026f5
  401858:	00401109 	.word	0x00401109
  40185c:	004013b9 	.word	0x004013b9
  401860:	00401441 	.word	0x00401441
  401864:	e000ed04 	.word	0xe000ed04
  401868:	00401155 	.word	0x00401155
  40186c:	0040258d 	.word	0x0040258d
  401870:	004014f1 	.word	0x004014f1
  401874:	00402171 	.word	0x00402171
  401878:	00402009 	.word	0x00402009
  40187c:	00402655 	.word	0x00402655
  401880:	00402489 	.word	0x00402489
  401884:	00402625 	.word	0x00402625

00401888 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401888:	2800      	cmp	r0, #0
  40188a:	d036      	beq.n	4018fa <xQueueGenericSendFromISR+0x72>
{
  40188c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401890:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401892:	2900      	cmp	r1, #0
  401894:	d03c      	beq.n	401910 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401896:	2b02      	cmp	r3, #2
  401898:	d048      	beq.n	40192c <xQueueGenericSendFromISR+0xa4>
  40189a:	461e      	mov	r6, r3
  40189c:	4615      	mov	r5, r2
  40189e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4018a0:	4b35      	ldr	r3, [pc, #212]	; (401978 <xQueueGenericSendFromISR+0xf0>)
  4018a2:	4798      	blx	r3
	__asm volatile
  4018a4:	f3ef 8711 	mrs	r7, BASEPRI
  4018a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018ac:	b672      	cpsid	i
  4018ae:	f383 8811 	msr	BASEPRI, r3
  4018b2:	f3bf 8f6f 	isb	sy
  4018b6:	f3bf 8f4f 	dsb	sy
  4018ba:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4018bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018c0:	429a      	cmp	r2, r3
  4018c2:	d301      	bcc.n	4018c8 <xQueueGenericSendFromISR+0x40>
  4018c4:	2e02      	cmp	r6, #2
  4018c6:	d14f      	bne.n	401968 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4018c8:	4632      	mov	r2, r6
  4018ca:	4641      	mov	r1, r8
  4018cc:	4620      	mov	r0, r4
  4018ce:	4b2b      	ldr	r3, [pc, #172]	; (40197c <xQueueGenericSendFromISR+0xf4>)
  4018d0:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  4018d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4018d8:	d141      	bne.n	40195e <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4018da:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4018dc:	2b00      	cmp	r3, #0
  4018de:	d033      	beq.n	401948 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4018e0:	4631      	mov	r1, r6
  4018e2:	4620      	mov	r0, r4
  4018e4:	4b26      	ldr	r3, [pc, #152]	; (401980 <xQueueGenericSendFromISR+0xf8>)
  4018e6:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4018e8:	2d00      	cmp	r5, #0
  4018ea:	d03f      	beq.n	40196c <xQueueGenericSendFromISR+0xe4>
  4018ec:	2801      	cmp	r0, #1
  4018ee:	d13d      	bne.n	40196c <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4018f0:	6028      	str	r0, [r5, #0]
	__asm volatile
  4018f2:	f387 8811 	msr	BASEPRI, r7
}
  4018f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  4018fa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018fe:	b672      	cpsid	i
  401900:	f383 8811 	msr	BASEPRI, r3
  401904:	f3bf 8f6f 	isb	sy
  401908:	f3bf 8f4f 	dsb	sy
  40190c:	b662      	cpsie	i
  40190e:	e7fe      	b.n	40190e <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401910:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401912:	2800      	cmp	r0, #0
  401914:	d0bf      	beq.n	401896 <xQueueGenericSendFromISR+0xe>
  401916:	f04f 0380 	mov.w	r3, #128	; 0x80
  40191a:	b672      	cpsid	i
  40191c:	f383 8811 	msr	BASEPRI, r3
  401920:	f3bf 8f6f 	isb	sy
  401924:	f3bf 8f4f 	dsb	sy
  401928:	b662      	cpsie	i
  40192a:	e7fe      	b.n	40192a <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40192c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40192e:	2801      	cmp	r0, #1
  401930:	d0b3      	beq.n	40189a <xQueueGenericSendFromISR+0x12>
  401932:	f04f 0380 	mov.w	r3, #128	; 0x80
  401936:	b672      	cpsid	i
  401938:	f383 8811 	msr	BASEPRI, r3
  40193c:	f3bf 8f6f 	isb	sy
  401940:	f3bf 8f4f 	dsb	sy
  401944:	b662      	cpsie	i
  401946:	e7fe      	b.n	401946 <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401948:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40194a:	b18b      	cbz	r3, 401970 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40194c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401950:	4b0c      	ldr	r3, [pc, #48]	; (401984 <xQueueGenericSendFromISR+0xfc>)
  401952:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401954:	b175      	cbz	r5, 401974 <xQueueGenericSendFromISR+0xec>
  401956:	b168      	cbz	r0, 401974 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401958:	2001      	movs	r0, #1
  40195a:	6028      	str	r0, [r5, #0]
  40195c:	e7c9      	b.n	4018f2 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  40195e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401960:	3301      	adds	r3, #1
  401962:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401964:	2001      	movs	r0, #1
  401966:	e7c4      	b.n	4018f2 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  401968:	2000      	movs	r0, #0
  40196a:	e7c2      	b.n	4018f2 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  40196c:	2001      	movs	r0, #1
  40196e:	e7c0      	b.n	4018f2 <xQueueGenericSendFromISR+0x6a>
  401970:	2001      	movs	r0, #1
  401972:	e7be      	b.n	4018f2 <xQueueGenericSendFromISR+0x6a>
  401974:	2001      	movs	r0, #1
  401976:	e7bc      	b.n	4018f2 <xQueueGenericSendFromISR+0x6a>
  401978:	00401301 	.word	0x00401301
  40197c:	004013b9 	.word	0x004013b9
  401980:	00401441 	.word	0x00401441
  401984:	0040258d 	.word	0x0040258d

00401988 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401988:	b170      	cbz	r0, 4019a8 <xQueueGiveFromISR+0x20>
{
  40198a:	b570      	push	{r4, r5, r6, lr}
  40198c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  40198e:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401990:	b1ab      	cbz	r3, 4019be <xQueueGiveFromISR+0x36>
  401992:	f04f 0380 	mov.w	r3, #128	; 0x80
  401996:	b672      	cpsid	i
  401998:	f383 8811 	msr	BASEPRI, r3
  40199c:	f3bf 8f6f 	isb	sy
  4019a0:	f3bf 8f4f 	dsb	sy
  4019a4:	b662      	cpsie	i
  4019a6:	e7fe      	b.n	4019a6 <xQueueGiveFromISR+0x1e>
  4019a8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019ac:	b672      	cpsid	i
  4019ae:	f383 8811 	msr	BASEPRI, r3
  4019b2:	f3bf 8f6f 	isb	sy
  4019b6:	f3bf 8f4f 	dsb	sy
  4019ba:	b662      	cpsie	i
  4019bc:	e7fe      	b.n	4019bc <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4019be:	6803      	ldr	r3, [r0, #0]
  4019c0:	b333      	cbz	r3, 401a10 <xQueueGiveFromISR+0x88>
  4019c2:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4019c4:	4b25      	ldr	r3, [pc, #148]	; (401a5c <xQueueGiveFromISR+0xd4>)
  4019c6:	4798      	blx	r3
	__asm volatile
  4019c8:	f3ef 8611 	mrs	r6, BASEPRI
  4019cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019d0:	b672      	cpsid	i
  4019d2:	f383 8811 	msr	BASEPRI, r3
  4019d6:	f3bf 8f6f 	isb	sy
  4019da:	f3bf 8f4f 	dsb	sy
  4019de:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  4019e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4019e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019e4:	429a      	cmp	r2, r3
  4019e6:	d231      	bcs.n	401a4c <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  4019e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4019ea:	3301      	adds	r3, #1
  4019ec:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  4019ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019f0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019f4:	d125      	bne.n	401a42 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  4019f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019f8:	b1c3      	cbz	r3, 401a2c <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4019fa:	2100      	movs	r1, #0
  4019fc:	4620      	mov	r0, r4
  4019fe:	4b18      	ldr	r3, [pc, #96]	; (401a60 <xQueueGiveFromISR+0xd8>)
  401a00:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401a02:	b32d      	cbz	r5, 401a50 <xQueueGiveFromISR+0xc8>
  401a04:	2801      	cmp	r0, #1
  401a06:	d123      	bne.n	401a50 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401a08:	6028      	str	r0, [r5, #0]
	__asm volatile
  401a0a:	f386 8811 	msr	BASEPRI, r6
}
  401a0e:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401a10:	6843      	ldr	r3, [r0, #4]
  401a12:	2b00      	cmp	r3, #0
  401a14:	d0d5      	beq.n	4019c2 <xQueueGiveFromISR+0x3a>
	__asm volatile
  401a16:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a1a:	b672      	cpsid	i
  401a1c:	f383 8811 	msr	BASEPRI, r3
  401a20:	f3bf 8f6f 	isb	sy
  401a24:	f3bf 8f4f 	dsb	sy
  401a28:	b662      	cpsie	i
  401a2a:	e7fe      	b.n	401a2a <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a2e:	b18b      	cbz	r3, 401a54 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a30:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a34:	4b0b      	ldr	r3, [pc, #44]	; (401a64 <xQueueGiveFromISR+0xdc>)
  401a36:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a38:	b175      	cbz	r5, 401a58 <xQueueGiveFromISR+0xd0>
  401a3a:	b168      	cbz	r0, 401a58 <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a3c:	2001      	movs	r0, #1
  401a3e:	6028      	str	r0, [r5, #0]
  401a40:	e7e3      	b.n	401a0a <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  401a42:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a44:	3301      	adds	r3, #1
  401a46:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401a48:	2001      	movs	r0, #1
  401a4a:	e7de      	b.n	401a0a <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  401a4c:	2000      	movs	r0, #0
  401a4e:	e7dc      	b.n	401a0a <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  401a50:	2001      	movs	r0, #1
  401a52:	e7da      	b.n	401a0a <xQueueGiveFromISR+0x82>
  401a54:	2001      	movs	r0, #1
  401a56:	e7d8      	b.n	401a0a <xQueueGiveFromISR+0x82>
  401a58:	2001      	movs	r0, #1
  401a5a:	e7d6      	b.n	401a0a <xQueueGiveFromISR+0x82>
  401a5c:	00401301 	.word	0x00401301
  401a60:	00401441 	.word	0x00401441
  401a64:	0040258d 	.word	0x0040258d

00401a68 <xQueueGenericReceive>:
{
  401a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a6c:	b084      	sub	sp, #16
  401a6e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401a70:	b198      	cbz	r0, 401a9a <xQueueGenericReceive+0x32>
  401a72:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a74:	b1e1      	cbz	r1, 401ab0 <xQueueGenericReceive+0x48>
  401a76:	4698      	mov	r8, r3
  401a78:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401a7a:	4b61      	ldr	r3, [pc, #388]	; (401c00 <xQueueGenericReceive+0x198>)
  401a7c:	4798      	blx	r3
  401a7e:	bb28      	cbnz	r0, 401acc <xQueueGenericReceive+0x64>
  401a80:	9b01      	ldr	r3, [sp, #4]
  401a82:	b353      	cbz	r3, 401ada <xQueueGenericReceive+0x72>
  401a84:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a88:	b672      	cpsid	i
  401a8a:	f383 8811 	msr	BASEPRI, r3
  401a8e:	f3bf 8f6f 	isb	sy
  401a92:	f3bf 8f4f 	dsb	sy
  401a96:	b662      	cpsie	i
  401a98:	e7fe      	b.n	401a98 <xQueueGenericReceive+0x30>
  401a9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a9e:	b672      	cpsid	i
  401aa0:	f383 8811 	msr	BASEPRI, r3
  401aa4:	f3bf 8f6f 	isb	sy
  401aa8:	f3bf 8f4f 	dsb	sy
  401aac:	b662      	cpsie	i
  401aae:	e7fe      	b.n	401aae <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401ab0:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401ab2:	2a00      	cmp	r2, #0
  401ab4:	d0df      	beq.n	401a76 <xQueueGenericReceive+0xe>
  401ab6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401aba:	b672      	cpsid	i
  401abc:	f383 8811 	msr	BASEPRI, r3
  401ac0:	f3bf 8f6f 	isb	sy
  401ac4:	f3bf 8f4f 	dsb	sy
  401ac8:	b662      	cpsie	i
  401aca:	e7fe      	b.n	401aca <xQueueGenericReceive+0x62>
  401acc:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401ace:	4d4d      	ldr	r5, [pc, #308]	; (401c04 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401ad0:	f8df a160 	ldr.w	sl, [pc, #352]	; 401c34 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401ad4:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401c14 <xQueueGenericReceive+0x1ac>
  401ad8:	e04b      	b.n	401b72 <xQueueGenericReceive+0x10a>
  401ada:	2600      	movs	r6, #0
  401adc:	e7f7      	b.n	401ace <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401ade:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401ae0:	4639      	mov	r1, r7
  401ae2:	4620      	mov	r0, r4
  401ae4:	4b48      	ldr	r3, [pc, #288]	; (401c08 <xQueueGenericReceive+0x1a0>)
  401ae6:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401ae8:	f1b8 0f00 	cmp.w	r8, #0
  401aec:	d11d      	bne.n	401b2a <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401af0:	3b01      	subs	r3, #1
  401af2:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401af4:	6823      	ldr	r3, [r4, #0]
  401af6:	b913      	cbnz	r3, 401afe <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401af8:	4b44      	ldr	r3, [pc, #272]	; (401c0c <xQueueGenericReceive+0x1a4>)
  401afa:	4798      	blx	r3
  401afc:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401afe:	6923      	ldr	r3, [r4, #16]
  401b00:	b16b      	cbz	r3, 401b1e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401b02:	f104 0010 	add.w	r0, r4, #16
  401b06:	4b42      	ldr	r3, [pc, #264]	; (401c10 <xQueueGenericReceive+0x1a8>)
  401b08:	4798      	blx	r3
  401b0a:	2801      	cmp	r0, #1
  401b0c:	d107      	bne.n	401b1e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b12:	4b40      	ldr	r3, [pc, #256]	; (401c14 <xQueueGenericReceive+0x1ac>)
  401b14:	601a      	str	r2, [r3, #0]
  401b16:	f3bf 8f4f 	dsb	sy
  401b1a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401b1e:	4b3e      	ldr	r3, [pc, #248]	; (401c18 <xQueueGenericReceive+0x1b0>)
  401b20:	4798      	blx	r3
				return pdPASS;
  401b22:	2001      	movs	r0, #1
}
  401b24:	b004      	add	sp, #16
  401b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401b2a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401b2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401b2e:	2b00      	cmp	r3, #0
  401b30:	d0f5      	beq.n	401b1e <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401b32:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b36:	4b36      	ldr	r3, [pc, #216]	; (401c10 <xQueueGenericReceive+0x1a8>)
  401b38:	4798      	blx	r3
  401b3a:	2800      	cmp	r0, #0
  401b3c:	d0ef      	beq.n	401b1e <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401b42:	4b34      	ldr	r3, [pc, #208]	; (401c14 <xQueueGenericReceive+0x1ac>)
  401b44:	601a      	str	r2, [r3, #0]
  401b46:	f3bf 8f4f 	dsb	sy
  401b4a:	f3bf 8f6f 	isb	sy
  401b4e:	e7e6      	b.n	401b1e <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  401b50:	4b31      	ldr	r3, [pc, #196]	; (401c18 <xQueueGenericReceive+0x1b0>)
  401b52:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401b54:	2000      	movs	r0, #0
  401b56:	e7e5      	b.n	401b24 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  401b58:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401b5a:	6860      	ldr	r0, [r4, #4]
  401b5c:	4b2f      	ldr	r3, [pc, #188]	; (401c1c <xQueueGenericReceive+0x1b4>)
  401b5e:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401b60:	4b2d      	ldr	r3, [pc, #180]	; (401c18 <xQueueGenericReceive+0x1b0>)
  401b62:	4798      	blx	r3
  401b64:	e030      	b.n	401bc8 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  401b66:	4620      	mov	r0, r4
  401b68:	4b2d      	ldr	r3, [pc, #180]	; (401c20 <xQueueGenericReceive+0x1b8>)
  401b6a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401b6c:	4b2d      	ldr	r3, [pc, #180]	; (401c24 <xQueueGenericReceive+0x1bc>)
  401b6e:	4798      	blx	r3
  401b70:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  401b72:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401b76:	2b00      	cmp	r3, #0
  401b78:	d1b1      	bne.n	401ade <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401b7a:	9b01      	ldr	r3, [sp, #4]
  401b7c:	2b00      	cmp	r3, #0
  401b7e:	d0e7      	beq.n	401b50 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  401b80:	b90e      	cbnz	r6, 401b86 <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  401b82:	a802      	add	r0, sp, #8
  401b84:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  401b86:	4b24      	ldr	r3, [pc, #144]	; (401c18 <xQueueGenericReceive+0x1b0>)
  401b88:	4798      	blx	r3
		vTaskSuspendAll();
  401b8a:	4b27      	ldr	r3, [pc, #156]	; (401c28 <xQueueGenericReceive+0x1c0>)
  401b8c:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401b8e:	47a8      	blx	r5
  401b90:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401b92:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b96:	d101      	bne.n	401b9c <xQueueGenericReceive+0x134>
  401b98:	2300      	movs	r3, #0
  401b9a:	6463      	str	r3, [r4, #68]	; 0x44
  401b9c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ba2:	d101      	bne.n	401ba8 <xQueueGenericReceive+0x140>
  401ba4:	2300      	movs	r3, #0
  401ba6:	64a3      	str	r3, [r4, #72]	; 0x48
  401ba8:	4b1b      	ldr	r3, [pc, #108]	; (401c18 <xQueueGenericReceive+0x1b0>)
  401baa:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401bac:	a901      	add	r1, sp, #4
  401bae:	a802      	add	r0, sp, #8
  401bb0:	4b1e      	ldr	r3, [pc, #120]	; (401c2c <xQueueGenericReceive+0x1c4>)
  401bb2:	4798      	blx	r3
  401bb4:	b9e8      	cbnz	r0, 401bf2 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401bb6:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401bb8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401bba:	4b17      	ldr	r3, [pc, #92]	; (401c18 <xQueueGenericReceive+0x1b0>)
  401bbc:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401bbe:	2e00      	cmp	r6, #0
  401bc0:	d1d1      	bne.n	401b66 <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401bc2:	6823      	ldr	r3, [r4, #0]
  401bc4:	2b00      	cmp	r3, #0
  401bc6:	d0c7      	beq.n	401b58 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401bc8:	9901      	ldr	r1, [sp, #4]
  401bca:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401bce:	4b18      	ldr	r3, [pc, #96]	; (401c30 <xQueueGenericReceive+0x1c8>)
  401bd0:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401bd2:	4620      	mov	r0, r4
  401bd4:	4b12      	ldr	r3, [pc, #72]	; (401c20 <xQueueGenericReceive+0x1b8>)
  401bd6:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401bd8:	4b12      	ldr	r3, [pc, #72]	; (401c24 <xQueueGenericReceive+0x1bc>)
  401bda:	4798      	blx	r3
  401bdc:	2800      	cmp	r0, #0
  401bde:	d1c7      	bne.n	401b70 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401be4:	f8c9 3000 	str.w	r3, [r9]
  401be8:	f3bf 8f4f 	dsb	sy
  401bec:	f3bf 8f6f 	isb	sy
  401bf0:	e7be      	b.n	401b70 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401bf2:	4620      	mov	r0, r4
  401bf4:	4b0a      	ldr	r3, [pc, #40]	; (401c20 <xQueueGenericReceive+0x1b8>)
  401bf6:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401bf8:	4b0a      	ldr	r3, [pc, #40]	; (401c24 <xQueueGenericReceive+0x1bc>)
  401bfa:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401bfc:	2000      	movs	r0, #0
  401bfe:	e791      	b.n	401b24 <xQueueGenericReceive+0xbc>
  401c00:	004026f5 	.word	0x004026f5
  401c04:	00401109 	.word	0x00401109
  401c08:	004014c9 	.word	0x004014c9
  401c0c:	00402875 	.word	0x00402875
  401c10:	0040258d 	.word	0x0040258d
  401c14:	e000ed04 	.word	0xe000ed04
  401c18:	00401155 	.word	0x00401155
  401c1c:	00402715 	.word	0x00402715
  401c20:	004014f1 	.word	0x004014f1
  401c24:	00402171 	.word	0x00402171
  401c28:	00402009 	.word	0x00402009
  401c2c:	00402655 	.word	0x00402655
  401c30:	00402489 	.word	0x00402489
  401c34:	00402625 	.word	0x00402625

00401c38 <vQueueAddToRegistry>:
	{
  401c38:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401c3a:	4b0b      	ldr	r3, [pc, #44]	; (401c68 <vQueueAddToRegistry+0x30>)
  401c3c:	681b      	ldr	r3, [r3, #0]
  401c3e:	b153      	cbz	r3, 401c56 <vQueueAddToRegistry+0x1e>
  401c40:	2301      	movs	r3, #1
  401c42:	4c09      	ldr	r4, [pc, #36]	; (401c68 <vQueueAddToRegistry+0x30>)
  401c44:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401c48:	b132      	cbz	r2, 401c58 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401c4a:	3301      	adds	r3, #1
  401c4c:	2b08      	cmp	r3, #8
  401c4e:	d1f9      	bne.n	401c44 <vQueueAddToRegistry+0xc>
	}
  401c50:	f85d 4b04 	ldr.w	r4, [sp], #4
  401c54:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401c56:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401c58:	4a03      	ldr	r2, [pc, #12]	; (401c68 <vQueueAddToRegistry+0x30>)
  401c5a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401c5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401c62:	6058      	str	r0, [r3, #4]
				break;
  401c64:	e7f4      	b.n	401c50 <vQueueAddToRegistry+0x18>
  401c66:	bf00      	nop
  401c68:	20400c14 	.word	0x20400c14

00401c6c <vQueueWaitForMessageRestricted>:
	{
  401c6c:	b570      	push	{r4, r5, r6, lr}
  401c6e:	4604      	mov	r4, r0
  401c70:	460d      	mov	r5, r1
  401c72:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401c74:	4b0f      	ldr	r3, [pc, #60]	; (401cb4 <vQueueWaitForMessageRestricted+0x48>)
  401c76:	4798      	blx	r3
  401c78:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c7e:	d00b      	beq.n	401c98 <vQueueWaitForMessageRestricted+0x2c>
  401c80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401c82:	f1b3 3fff 	cmp.w	r3, #4294967295
  401c86:	d00a      	beq.n	401c9e <vQueueWaitForMessageRestricted+0x32>
  401c88:	4b0b      	ldr	r3, [pc, #44]	; (401cb8 <vQueueWaitForMessageRestricted+0x4c>)
  401c8a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401c8e:	b14b      	cbz	r3, 401ca4 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401c90:	4620      	mov	r0, r4
  401c92:	4b0a      	ldr	r3, [pc, #40]	; (401cbc <vQueueWaitForMessageRestricted+0x50>)
  401c94:	4798      	blx	r3
  401c96:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401c98:	2300      	movs	r3, #0
  401c9a:	6463      	str	r3, [r4, #68]	; 0x44
  401c9c:	e7f0      	b.n	401c80 <vQueueWaitForMessageRestricted+0x14>
  401c9e:	2300      	movs	r3, #0
  401ca0:	64a3      	str	r3, [r4, #72]	; 0x48
  401ca2:	e7f1      	b.n	401c88 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401ca4:	4632      	mov	r2, r6
  401ca6:	4629      	mov	r1, r5
  401ca8:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401cac:	4b04      	ldr	r3, [pc, #16]	; (401cc0 <vQueueWaitForMessageRestricted+0x54>)
  401cae:	4798      	blx	r3
  401cb0:	e7ee      	b.n	401c90 <vQueueWaitForMessageRestricted+0x24>
  401cb2:	bf00      	nop
  401cb4:	00401109 	.word	0x00401109
  401cb8:	00401155 	.word	0x00401155
  401cbc:	004014f1 	.word	0x004014f1
  401cc0:	0040250d 	.word	0x0040250d

00401cc4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401cc4:	4b08      	ldr	r3, [pc, #32]	; (401ce8 <prvResetNextTaskUnblockTime+0x24>)
  401cc6:	681b      	ldr	r3, [r3, #0]
  401cc8:	681b      	ldr	r3, [r3, #0]
  401cca:	b13b      	cbz	r3, 401cdc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401ccc:	4b06      	ldr	r3, [pc, #24]	; (401ce8 <prvResetNextTaskUnblockTime+0x24>)
  401cce:	681b      	ldr	r3, [r3, #0]
  401cd0:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401cd2:	68db      	ldr	r3, [r3, #12]
  401cd4:	685a      	ldr	r2, [r3, #4]
  401cd6:	4b05      	ldr	r3, [pc, #20]	; (401cec <prvResetNextTaskUnblockTime+0x28>)
  401cd8:	601a      	str	r2, [r3, #0]
  401cda:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401cdc:	f04f 32ff 	mov.w	r2, #4294967295
  401ce0:	4b02      	ldr	r3, [pc, #8]	; (401cec <prvResetNextTaskUnblockTime+0x28>)
  401ce2:	601a      	str	r2, [r3, #0]
  401ce4:	4770      	bx	lr
  401ce6:	bf00      	nop
  401ce8:	20400a6c 	.word	0x20400a6c
  401cec:	20400b18 	.word	0x20400b18

00401cf0 <prvAddCurrentTaskToDelayedList>:
{
  401cf0:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401cf2:	4b0f      	ldr	r3, [pc, #60]	; (401d30 <prvAddCurrentTaskToDelayedList+0x40>)
  401cf4:	681b      	ldr	r3, [r3, #0]
  401cf6:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401cf8:	4b0e      	ldr	r3, [pc, #56]	; (401d34 <prvAddCurrentTaskToDelayedList+0x44>)
  401cfa:	681b      	ldr	r3, [r3, #0]
  401cfc:	4298      	cmp	r0, r3
  401cfe:	d30e      	bcc.n	401d1e <prvAddCurrentTaskToDelayedList+0x2e>
  401d00:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d02:	4b0d      	ldr	r3, [pc, #52]	; (401d38 <prvAddCurrentTaskToDelayedList+0x48>)
  401d04:	6818      	ldr	r0, [r3, #0]
  401d06:	4b0a      	ldr	r3, [pc, #40]	; (401d30 <prvAddCurrentTaskToDelayedList+0x40>)
  401d08:	6819      	ldr	r1, [r3, #0]
  401d0a:	3104      	adds	r1, #4
  401d0c:	4b0b      	ldr	r3, [pc, #44]	; (401d3c <prvAddCurrentTaskToDelayedList+0x4c>)
  401d0e:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401d10:	4b0b      	ldr	r3, [pc, #44]	; (401d40 <prvAddCurrentTaskToDelayedList+0x50>)
  401d12:	681b      	ldr	r3, [r3, #0]
  401d14:	429c      	cmp	r4, r3
  401d16:	d201      	bcs.n	401d1c <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401d18:	4b09      	ldr	r3, [pc, #36]	; (401d40 <prvAddCurrentTaskToDelayedList+0x50>)
  401d1a:	601c      	str	r4, [r3, #0]
  401d1c:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401d1e:	4b09      	ldr	r3, [pc, #36]	; (401d44 <prvAddCurrentTaskToDelayedList+0x54>)
  401d20:	6818      	ldr	r0, [r3, #0]
  401d22:	4b03      	ldr	r3, [pc, #12]	; (401d30 <prvAddCurrentTaskToDelayedList+0x40>)
  401d24:	6819      	ldr	r1, [r3, #0]
  401d26:	3104      	adds	r1, #4
  401d28:	4b04      	ldr	r3, [pc, #16]	; (401d3c <prvAddCurrentTaskToDelayedList+0x4c>)
  401d2a:	4798      	blx	r3
  401d2c:	bd10      	pop	{r4, pc}
  401d2e:	bf00      	nop
  401d30:	20400a68 	.word	0x20400a68
  401d34:	20400b60 	.word	0x20400b60
  401d38:	20400a6c 	.word	0x20400a6c
  401d3c:	00400ff1 	.word	0x00400ff1
  401d40:	20400b18 	.word	0x20400b18
  401d44:	20400a70 	.word	0x20400a70

00401d48 <xTaskGenericCreate>:
{
  401d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401d4c:	b083      	sub	sp, #12
  401d4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401d50:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401d54:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401d56:	b160      	cbz	r0, 401d72 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401d58:	2d04      	cmp	r5, #4
  401d5a:	d915      	bls.n	401d88 <xTaskGenericCreate+0x40>
  401d5c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d60:	b672      	cpsid	i
  401d62:	f383 8811 	msr	BASEPRI, r3
  401d66:	f3bf 8f6f 	isb	sy
  401d6a:	f3bf 8f4f 	dsb	sy
  401d6e:	b662      	cpsie	i
  401d70:	e7fe      	b.n	401d70 <xTaskGenericCreate+0x28>
  401d72:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d76:	b672      	cpsid	i
  401d78:	f383 8811 	msr	BASEPRI, r3
  401d7c:	f3bf 8f6f 	isb	sy
  401d80:	f3bf 8f4f 	dsb	sy
  401d84:	b662      	cpsie	i
  401d86:	e7fe      	b.n	401d86 <xTaskGenericCreate+0x3e>
  401d88:	9001      	str	r0, [sp, #4]
  401d8a:	4698      	mov	r8, r3
  401d8c:	4691      	mov	r9, r2
  401d8e:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401d90:	b936      	cbnz	r6, 401da0 <xTaskGenericCreate+0x58>
  401d92:	0090      	lsls	r0, r2, #2
  401d94:	4b62      	ldr	r3, [pc, #392]	; (401f20 <xTaskGenericCreate+0x1d8>)
  401d96:	4798      	blx	r3
		if( pxStack != NULL )
  401d98:	4606      	mov	r6, r0
  401d9a:	2800      	cmp	r0, #0
  401d9c:	f000 809e 	beq.w	401edc <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401da0:	2058      	movs	r0, #88	; 0x58
  401da2:	4b5f      	ldr	r3, [pc, #380]	; (401f20 <xTaskGenericCreate+0x1d8>)
  401da4:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401da6:	4604      	mov	r4, r0
  401da8:	2800      	cmp	r0, #0
  401daa:	f000 8094 	beq.w	401ed6 <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401dae:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401db0:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401db4:	21a5      	movs	r1, #165	; 0xa5
  401db6:	4630      	mov	r0, r6
  401db8:	4b5a      	ldr	r3, [pc, #360]	; (401f24 <xTaskGenericCreate+0x1dc>)
  401dba:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401dbc:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401dc0:	444e      	add	r6, r9
  401dc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401dc4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401dc8:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401dcc:	783b      	ldrb	r3, [r7, #0]
  401dce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401dd2:	783b      	ldrb	r3, [r7, #0]
  401dd4:	2b00      	cmp	r3, #0
  401dd6:	f040 8084 	bne.w	401ee2 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401dda:	2700      	movs	r7, #0
  401ddc:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401de0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401de2:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401de4:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401de6:	f104 0904 	add.w	r9, r4, #4
  401dea:	4648      	mov	r0, r9
  401dec:	f8df b184 	ldr.w	fp, [pc, #388]	; 401f74 <xTaskGenericCreate+0x22c>
  401df0:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401df2:	f104 0018 	add.w	r0, r4, #24
  401df6:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401df8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401dfa:	f1c5 0305 	rsb	r3, r5, #5
  401dfe:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401e00:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401e02:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401e04:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401e08:	4642      	mov	r2, r8
  401e0a:	9901      	ldr	r1, [sp, #4]
  401e0c:	4630      	mov	r0, r6
  401e0e:	4b46      	ldr	r3, [pc, #280]	; (401f28 <xTaskGenericCreate+0x1e0>)
  401e10:	4798      	blx	r3
  401e12:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401e14:	f1ba 0f00 	cmp.w	sl, #0
  401e18:	d001      	beq.n	401e1e <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401e1a:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401e1e:	4b43      	ldr	r3, [pc, #268]	; (401f2c <xTaskGenericCreate+0x1e4>)
  401e20:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401e22:	4a43      	ldr	r2, [pc, #268]	; (401f30 <xTaskGenericCreate+0x1e8>)
  401e24:	6813      	ldr	r3, [r2, #0]
  401e26:	3301      	adds	r3, #1
  401e28:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401e2a:	4b42      	ldr	r3, [pc, #264]	; (401f34 <xTaskGenericCreate+0x1ec>)
  401e2c:	681b      	ldr	r3, [r3, #0]
  401e2e:	2b00      	cmp	r3, #0
  401e30:	d166      	bne.n	401f00 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401e32:	4b40      	ldr	r3, [pc, #256]	; (401f34 <xTaskGenericCreate+0x1ec>)
  401e34:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401e36:	6813      	ldr	r3, [r2, #0]
  401e38:	2b01      	cmp	r3, #1
  401e3a:	d121      	bne.n	401e80 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401e3c:	4f3e      	ldr	r7, [pc, #248]	; (401f38 <xTaskGenericCreate+0x1f0>)
  401e3e:	4638      	mov	r0, r7
  401e40:	4e3e      	ldr	r6, [pc, #248]	; (401f3c <xTaskGenericCreate+0x1f4>)
  401e42:	47b0      	blx	r6
  401e44:	f107 0014 	add.w	r0, r7, #20
  401e48:	47b0      	blx	r6
  401e4a:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401e4e:	47b0      	blx	r6
  401e50:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401e54:	47b0      	blx	r6
  401e56:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401e5a:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401e5c:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401f78 <xTaskGenericCreate+0x230>
  401e60:	4640      	mov	r0, r8
  401e62:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401e64:	4f36      	ldr	r7, [pc, #216]	; (401f40 <xTaskGenericCreate+0x1f8>)
  401e66:	4638      	mov	r0, r7
  401e68:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401e6a:	4836      	ldr	r0, [pc, #216]	; (401f44 <xTaskGenericCreate+0x1fc>)
  401e6c:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401e6e:	4836      	ldr	r0, [pc, #216]	; (401f48 <xTaskGenericCreate+0x200>)
  401e70:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401e72:	4836      	ldr	r0, [pc, #216]	; (401f4c <xTaskGenericCreate+0x204>)
  401e74:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401e76:	4b36      	ldr	r3, [pc, #216]	; (401f50 <xTaskGenericCreate+0x208>)
  401e78:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401e7c:	4b35      	ldr	r3, [pc, #212]	; (401f54 <xTaskGenericCreate+0x20c>)
  401e7e:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401e80:	4a35      	ldr	r2, [pc, #212]	; (401f58 <xTaskGenericCreate+0x210>)
  401e82:	6813      	ldr	r3, [r2, #0]
  401e84:	3301      	adds	r3, #1
  401e86:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401e88:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401e8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401e8c:	4a33      	ldr	r2, [pc, #204]	; (401f5c <xTaskGenericCreate+0x214>)
  401e8e:	6811      	ldr	r1, [r2, #0]
  401e90:	2301      	movs	r3, #1
  401e92:	4083      	lsls	r3, r0
  401e94:	430b      	orrs	r3, r1
  401e96:	6013      	str	r3, [r2, #0]
  401e98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401e9c:	4649      	mov	r1, r9
  401e9e:	4b26      	ldr	r3, [pc, #152]	; (401f38 <xTaskGenericCreate+0x1f0>)
  401ea0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401ea4:	4b2e      	ldr	r3, [pc, #184]	; (401f60 <xTaskGenericCreate+0x218>)
  401ea6:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401ea8:	4b2e      	ldr	r3, [pc, #184]	; (401f64 <xTaskGenericCreate+0x21c>)
  401eaa:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401eac:	4b2e      	ldr	r3, [pc, #184]	; (401f68 <xTaskGenericCreate+0x220>)
  401eae:	681b      	ldr	r3, [r3, #0]
  401eb0:	2b00      	cmp	r3, #0
  401eb2:	d031      	beq.n	401f18 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401eb4:	4b1f      	ldr	r3, [pc, #124]	; (401f34 <xTaskGenericCreate+0x1ec>)
  401eb6:	681b      	ldr	r3, [r3, #0]
  401eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401eba:	429d      	cmp	r5, r3
  401ebc:	d92e      	bls.n	401f1c <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ec2:	4b2a      	ldr	r3, [pc, #168]	; (401f6c <xTaskGenericCreate+0x224>)
  401ec4:	601a      	str	r2, [r3, #0]
  401ec6:	f3bf 8f4f 	dsb	sy
  401eca:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401ece:	2001      	movs	r0, #1
}
  401ed0:	b003      	add	sp, #12
  401ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401ed6:	4630      	mov	r0, r6
  401ed8:	4b25      	ldr	r3, [pc, #148]	; (401f70 <xTaskGenericCreate+0x228>)
  401eda:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401edc:	f04f 30ff 	mov.w	r0, #4294967295
  401ee0:	e7f6      	b.n	401ed0 <xTaskGenericCreate+0x188>
  401ee2:	463b      	mov	r3, r7
  401ee4:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401ee8:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401eea:	7859      	ldrb	r1, [r3, #1]
  401eec:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401ef0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401ef4:	2900      	cmp	r1, #0
  401ef6:	f43f af70 	beq.w	401dda <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401efa:	42bb      	cmp	r3, r7
  401efc:	d1f5      	bne.n	401eea <xTaskGenericCreate+0x1a2>
  401efe:	e76c      	b.n	401dda <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401f00:	4b19      	ldr	r3, [pc, #100]	; (401f68 <xTaskGenericCreate+0x220>)
  401f02:	681b      	ldr	r3, [r3, #0]
  401f04:	2b00      	cmp	r3, #0
  401f06:	d1bb      	bne.n	401e80 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401f08:	4b0a      	ldr	r3, [pc, #40]	; (401f34 <xTaskGenericCreate+0x1ec>)
  401f0a:	681b      	ldr	r3, [r3, #0]
  401f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401f0e:	429d      	cmp	r5, r3
  401f10:	d3b6      	bcc.n	401e80 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401f12:	4b08      	ldr	r3, [pc, #32]	; (401f34 <xTaskGenericCreate+0x1ec>)
  401f14:	601c      	str	r4, [r3, #0]
  401f16:	e7b3      	b.n	401e80 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401f18:	2001      	movs	r0, #1
  401f1a:	e7d9      	b.n	401ed0 <xTaskGenericCreate+0x188>
  401f1c:	2001      	movs	r0, #1
	return xReturn;
  401f1e:	e7d7      	b.n	401ed0 <xTaskGenericCreate+0x188>
  401f20:	00401365 	.word	0x00401365
  401f24:	00404471 	.word	0x00404471
  401f28:	004010bd 	.word	0x004010bd
  401f2c:	00401109 	.word	0x00401109
  401f30:	20400ad8 	.word	0x20400ad8
  401f34:	20400a68 	.word	0x20400a68
  401f38:	20400a74 	.word	0x20400a74
  401f3c:	00400fbd 	.word	0x00400fbd
  401f40:	20400b04 	.word	0x20400b04
  401f44:	20400b20 	.word	0x20400b20
  401f48:	20400b4c 	.word	0x20400b4c
  401f4c:	20400b38 	.word	0x20400b38
  401f50:	20400a6c 	.word	0x20400a6c
  401f54:	20400a70 	.word	0x20400a70
  401f58:	20400ae4 	.word	0x20400ae4
  401f5c:	20400aec 	.word	0x20400aec
  401f60:	00400fd9 	.word	0x00400fd9
  401f64:	00401155 	.word	0x00401155
  401f68:	20400b34 	.word	0x20400b34
  401f6c:	e000ed04 	.word	0xe000ed04
  401f70:	00401395 	.word	0x00401395
  401f74:	00400fd3 	.word	0x00400fd3
  401f78:	20400af0 	.word	0x20400af0

00401f7c <vTaskStartScheduler>:
{
  401f7c:	b510      	push	{r4, lr}
  401f7e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401f80:	2300      	movs	r3, #0
  401f82:	9303      	str	r3, [sp, #12]
  401f84:	9302      	str	r3, [sp, #8]
  401f86:	9301      	str	r3, [sp, #4]
  401f88:	9300      	str	r3, [sp, #0]
  401f8a:	2282      	movs	r2, #130	; 0x82
  401f8c:	4916      	ldr	r1, [pc, #88]	; (401fe8 <vTaskStartScheduler+0x6c>)
  401f8e:	4817      	ldr	r0, [pc, #92]	; (401fec <vTaskStartScheduler+0x70>)
  401f90:	4c17      	ldr	r4, [pc, #92]	; (401ff0 <vTaskStartScheduler+0x74>)
  401f92:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401f94:	2801      	cmp	r0, #1
  401f96:	d00b      	beq.n	401fb0 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  401f98:	bb20      	cbnz	r0, 401fe4 <vTaskStartScheduler+0x68>
  401f9a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f9e:	b672      	cpsid	i
  401fa0:	f383 8811 	msr	BASEPRI, r3
  401fa4:	f3bf 8f6f 	isb	sy
  401fa8:	f3bf 8f4f 	dsb	sy
  401fac:	b662      	cpsie	i
  401fae:	e7fe      	b.n	401fae <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  401fb0:	4b10      	ldr	r3, [pc, #64]	; (401ff4 <vTaskStartScheduler+0x78>)
  401fb2:	4798      	blx	r3
	if( xReturn == pdPASS )
  401fb4:	2801      	cmp	r0, #1
  401fb6:	d1ef      	bne.n	401f98 <vTaskStartScheduler+0x1c>
  401fb8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fbc:	b672      	cpsid	i
  401fbe:	f383 8811 	msr	BASEPRI, r3
  401fc2:	f3bf 8f6f 	isb	sy
  401fc6:	f3bf 8f4f 	dsb	sy
  401fca:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401fcc:	f04f 32ff 	mov.w	r2, #4294967295
  401fd0:	4b09      	ldr	r3, [pc, #36]	; (401ff8 <vTaskStartScheduler+0x7c>)
  401fd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401fd4:	2201      	movs	r2, #1
  401fd6:	4b09      	ldr	r3, [pc, #36]	; (401ffc <vTaskStartScheduler+0x80>)
  401fd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401fda:	2200      	movs	r2, #0
  401fdc:	4b08      	ldr	r3, [pc, #32]	; (402000 <vTaskStartScheduler+0x84>)
  401fde:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401fe0:	4b08      	ldr	r3, [pc, #32]	; (402004 <vTaskStartScheduler+0x88>)
  401fe2:	4798      	blx	r3
}
  401fe4:	b004      	add	sp, #16
  401fe6:	bd10      	pop	{r4, pc}
  401fe8:	00406e04 	.word	0x00406e04
  401fec:	00402321 	.word	0x00402321
  401ff0:	00401d49 	.word	0x00401d49
  401ff4:	00402961 	.word	0x00402961
  401ff8:	20400b18 	.word	0x20400b18
  401ffc:	20400b34 	.word	0x20400b34
  402000:	20400b60 	.word	0x20400b60
  402004:	0040123d 	.word	0x0040123d

00402008 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402008:	4a02      	ldr	r2, [pc, #8]	; (402014 <vTaskSuspendAll+0xc>)
  40200a:	6813      	ldr	r3, [r2, #0]
  40200c:	3301      	adds	r3, #1
  40200e:	6013      	str	r3, [r2, #0]
  402010:	4770      	bx	lr
  402012:	bf00      	nop
  402014:	20400ae0 	.word	0x20400ae0

00402018 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402018:	4b01      	ldr	r3, [pc, #4]	; (402020 <xTaskGetTickCount+0x8>)
  40201a:	6818      	ldr	r0, [r3, #0]
}
  40201c:	4770      	bx	lr
  40201e:	bf00      	nop
  402020:	20400b60 	.word	0x20400b60

00402024 <xTaskIncrementTick>:
{
  402024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402028:	4b42      	ldr	r3, [pc, #264]	; (402134 <xTaskIncrementTick+0x110>)
  40202a:	681b      	ldr	r3, [r3, #0]
  40202c:	2b00      	cmp	r3, #0
  40202e:	d178      	bne.n	402122 <xTaskIncrementTick+0xfe>
		++xTickCount;
  402030:	4b41      	ldr	r3, [pc, #260]	; (402138 <xTaskIncrementTick+0x114>)
  402032:	681a      	ldr	r2, [r3, #0]
  402034:	3201      	adds	r2, #1
  402036:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402038:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  40203a:	b9d6      	cbnz	r6, 402072 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  40203c:	4b3f      	ldr	r3, [pc, #252]	; (40213c <xTaskIncrementTick+0x118>)
  40203e:	681b      	ldr	r3, [r3, #0]
  402040:	681b      	ldr	r3, [r3, #0]
  402042:	b153      	cbz	r3, 40205a <xTaskIncrementTick+0x36>
  402044:	f04f 0380 	mov.w	r3, #128	; 0x80
  402048:	b672      	cpsid	i
  40204a:	f383 8811 	msr	BASEPRI, r3
  40204e:	f3bf 8f6f 	isb	sy
  402052:	f3bf 8f4f 	dsb	sy
  402056:	b662      	cpsie	i
  402058:	e7fe      	b.n	402058 <xTaskIncrementTick+0x34>
  40205a:	4a38      	ldr	r2, [pc, #224]	; (40213c <xTaskIncrementTick+0x118>)
  40205c:	6811      	ldr	r1, [r2, #0]
  40205e:	4b38      	ldr	r3, [pc, #224]	; (402140 <xTaskIncrementTick+0x11c>)
  402060:	6818      	ldr	r0, [r3, #0]
  402062:	6010      	str	r0, [r2, #0]
  402064:	6019      	str	r1, [r3, #0]
  402066:	4a37      	ldr	r2, [pc, #220]	; (402144 <xTaskIncrementTick+0x120>)
  402068:	6813      	ldr	r3, [r2, #0]
  40206a:	3301      	adds	r3, #1
  40206c:	6013      	str	r3, [r2, #0]
  40206e:	4b36      	ldr	r3, [pc, #216]	; (402148 <xTaskIncrementTick+0x124>)
  402070:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402072:	4b36      	ldr	r3, [pc, #216]	; (40214c <xTaskIncrementTick+0x128>)
  402074:	681b      	ldr	r3, [r3, #0]
  402076:	429e      	cmp	r6, r3
  402078:	d218      	bcs.n	4020ac <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  40207a:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40207c:	4b34      	ldr	r3, [pc, #208]	; (402150 <xTaskIncrementTick+0x12c>)
  40207e:	681b      	ldr	r3, [r3, #0]
  402080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402082:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402086:	4a33      	ldr	r2, [pc, #204]	; (402154 <xTaskIncrementTick+0x130>)
  402088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  40208c:	2b02      	cmp	r3, #2
  40208e:	bf28      	it	cs
  402090:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402092:	4b31      	ldr	r3, [pc, #196]	; (402158 <xTaskIncrementTick+0x134>)
  402094:	681b      	ldr	r3, [r3, #0]
  402096:	b90b      	cbnz	r3, 40209c <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402098:	4b30      	ldr	r3, [pc, #192]	; (40215c <xTaskIncrementTick+0x138>)
  40209a:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40209c:	4b30      	ldr	r3, [pc, #192]	; (402160 <xTaskIncrementTick+0x13c>)
  40209e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  4020a0:	2b00      	cmp	r3, #0
}
  4020a2:	bf0c      	ite	eq
  4020a4:	4620      	moveq	r0, r4
  4020a6:	2001      	movne	r0, #1
  4020a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4020ac:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020ae:	f8df 908c 	ldr.w	r9, [pc, #140]	; 40213c <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4020b2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 40216c <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  4020b6:	4f2b      	ldr	r7, [pc, #172]	; (402164 <xTaskIncrementTick+0x140>)
  4020b8:	e01f      	b.n	4020fa <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  4020ba:	f04f 32ff 	mov.w	r2, #4294967295
  4020be:	4b23      	ldr	r3, [pc, #140]	; (40214c <xTaskIncrementTick+0x128>)
  4020c0:	601a      	str	r2, [r3, #0]
						break;
  4020c2:	e7db      	b.n	40207c <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  4020c4:	4a21      	ldr	r2, [pc, #132]	; (40214c <xTaskIncrementTick+0x128>)
  4020c6:	6013      	str	r3, [r2, #0]
							break;
  4020c8:	e7d8      	b.n	40207c <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4020ca:	f105 0018 	add.w	r0, r5, #24
  4020ce:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  4020d0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  4020d2:	683a      	ldr	r2, [r7, #0]
  4020d4:	2301      	movs	r3, #1
  4020d6:	4083      	lsls	r3, r0
  4020d8:	4313      	orrs	r3, r2
  4020da:	603b      	str	r3, [r7, #0]
  4020dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020e0:	4651      	mov	r1, sl
  4020e2:	4b1c      	ldr	r3, [pc, #112]	; (402154 <xTaskIncrementTick+0x130>)
  4020e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4020e8:	4b1f      	ldr	r3, [pc, #124]	; (402168 <xTaskIncrementTick+0x144>)
  4020ea:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4020ec:	4b18      	ldr	r3, [pc, #96]	; (402150 <xTaskIncrementTick+0x12c>)
  4020ee:	681b      	ldr	r3, [r3, #0]
  4020f0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  4020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  4020f4:	429a      	cmp	r2, r3
  4020f6:	bf28      	it	cs
  4020f8:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020fa:	f8d9 3000 	ldr.w	r3, [r9]
  4020fe:	681b      	ldr	r3, [r3, #0]
  402100:	2b00      	cmp	r3, #0
  402102:	d0da      	beq.n	4020ba <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402104:	f8d9 3000 	ldr.w	r3, [r9]
  402108:	68db      	ldr	r3, [r3, #12]
  40210a:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  40210c:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  40210e:	429e      	cmp	r6, r3
  402110:	d3d8      	bcc.n	4020c4 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402112:	f105 0a04 	add.w	sl, r5, #4
  402116:	4650      	mov	r0, sl
  402118:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40211a:	6aab      	ldr	r3, [r5, #40]	; 0x28
  40211c:	2b00      	cmp	r3, #0
  40211e:	d1d4      	bne.n	4020ca <xTaskIncrementTick+0xa6>
  402120:	e7d6      	b.n	4020d0 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402122:	4a0d      	ldr	r2, [pc, #52]	; (402158 <xTaskIncrementTick+0x134>)
  402124:	6813      	ldr	r3, [r2, #0]
  402126:	3301      	adds	r3, #1
  402128:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40212a:	4b0c      	ldr	r3, [pc, #48]	; (40215c <xTaskIncrementTick+0x138>)
  40212c:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  40212e:	2400      	movs	r4, #0
  402130:	e7b4      	b.n	40209c <xTaskIncrementTick+0x78>
  402132:	bf00      	nop
  402134:	20400ae0 	.word	0x20400ae0
  402138:	20400b60 	.word	0x20400b60
  40213c:	20400a6c 	.word	0x20400a6c
  402140:	20400a70 	.word	0x20400a70
  402144:	20400b1c 	.word	0x20400b1c
  402148:	00401cc5 	.word	0x00401cc5
  40214c:	20400b18 	.word	0x20400b18
  402150:	20400a68 	.word	0x20400a68
  402154:	20400a74 	.word	0x20400a74
  402158:	20400adc 	.word	0x20400adc
  40215c:	00402f1d 	.word	0x00402f1d
  402160:	20400b64 	.word	0x20400b64
  402164:	20400aec 	.word	0x20400aec
  402168:	00400fd9 	.word	0x00400fd9
  40216c:	00401025 	.word	0x00401025

00402170 <xTaskResumeAll>:
{
  402170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402174:	4b38      	ldr	r3, [pc, #224]	; (402258 <xTaskResumeAll+0xe8>)
  402176:	681b      	ldr	r3, [r3, #0]
  402178:	b953      	cbnz	r3, 402190 <xTaskResumeAll+0x20>
  40217a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40217e:	b672      	cpsid	i
  402180:	f383 8811 	msr	BASEPRI, r3
  402184:	f3bf 8f6f 	isb	sy
  402188:	f3bf 8f4f 	dsb	sy
  40218c:	b662      	cpsie	i
  40218e:	e7fe      	b.n	40218e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402190:	4b32      	ldr	r3, [pc, #200]	; (40225c <xTaskResumeAll+0xec>)
  402192:	4798      	blx	r3
		--uxSchedulerSuspended;
  402194:	4b30      	ldr	r3, [pc, #192]	; (402258 <xTaskResumeAll+0xe8>)
  402196:	681a      	ldr	r2, [r3, #0]
  402198:	3a01      	subs	r2, #1
  40219a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40219c:	681b      	ldr	r3, [r3, #0]
  40219e:	2b00      	cmp	r3, #0
  4021a0:	d155      	bne.n	40224e <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4021a2:	4b2f      	ldr	r3, [pc, #188]	; (402260 <xTaskResumeAll+0xf0>)
  4021a4:	681b      	ldr	r3, [r3, #0]
  4021a6:	2b00      	cmp	r3, #0
  4021a8:	d132      	bne.n	402210 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  4021aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4021ac:	4b2d      	ldr	r3, [pc, #180]	; (402264 <xTaskResumeAll+0xf4>)
  4021ae:	4798      	blx	r3
}
  4021b0:	4620      	mov	r0, r4
  4021b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4021b6:	68fb      	ldr	r3, [r7, #12]
  4021b8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4021ba:	f104 0018 	add.w	r0, r4, #24
  4021be:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4021c0:	f104 0804 	add.w	r8, r4, #4
  4021c4:	4640      	mov	r0, r8
  4021c6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4021c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4021ca:	682a      	ldr	r2, [r5, #0]
  4021cc:	2301      	movs	r3, #1
  4021ce:	4083      	lsls	r3, r0
  4021d0:	4313      	orrs	r3, r2
  4021d2:	602b      	str	r3, [r5, #0]
  4021d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4021d8:	4641      	mov	r1, r8
  4021da:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  4021de:	4b22      	ldr	r3, [pc, #136]	; (402268 <xTaskResumeAll+0xf8>)
  4021e0:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4021e2:	4b22      	ldr	r3, [pc, #136]	; (40226c <xTaskResumeAll+0xfc>)
  4021e4:	681b      	ldr	r3, [r3, #0]
  4021e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4021ea:	429a      	cmp	r2, r3
  4021ec:	d20c      	bcs.n	402208 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4021ee:	683b      	ldr	r3, [r7, #0]
  4021f0:	2b00      	cmp	r3, #0
  4021f2:	d1e0      	bne.n	4021b6 <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  4021f4:	4b1e      	ldr	r3, [pc, #120]	; (402270 <xTaskResumeAll+0x100>)
  4021f6:	681b      	ldr	r3, [r3, #0]
  4021f8:	b1db      	cbz	r3, 402232 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  4021fa:	4b1d      	ldr	r3, [pc, #116]	; (402270 <xTaskResumeAll+0x100>)
  4021fc:	681b      	ldr	r3, [r3, #0]
  4021fe:	b1c3      	cbz	r3, 402232 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402200:	4e1c      	ldr	r6, [pc, #112]	; (402274 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402202:	4d1d      	ldr	r5, [pc, #116]	; (402278 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402204:	4c1a      	ldr	r4, [pc, #104]	; (402270 <xTaskResumeAll+0x100>)
  402206:	e00e      	b.n	402226 <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402208:	2201      	movs	r2, #1
  40220a:	4b1b      	ldr	r3, [pc, #108]	; (402278 <xTaskResumeAll+0x108>)
  40220c:	601a      	str	r2, [r3, #0]
  40220e:	e7ee      	b.n	4021ee <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402210:	4f1a      	ldr	r7, [pc, #104]	; (40227c <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402212:	4e1b      	ldr	r6, [pc, #108]	; (402280 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402214:	4d1b      	ldr	r5, [pc, #108]	; (402284 <xTaskResumeAll+0x114>)
  402216:	f8df 9074 	ldr.w	r9, [pc, #116]	; 40228c <xTaskResumeAll+0x11c>
  40221a:	e7e8      	b.n	4021ee <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  40221c:	6823      	ldr	r3, [r4, #0]
  40221e:	3b01      	subs	r3, #1
  402220:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402222:	6823      	ldr	r3, [r4, #0]
  402224:	b12b      	cbz	r3, 402232 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402226:	47b0      	blx	r6
  402228:	2800      	cmp	r0, #0
  40222a:	d0f7      	beq.n	40221c <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  40222c:	2301      	movs	r3, #1
  40222e:	602b      	str	r3, [r5, #0]
  402230:	e7f4      	b.n	40221c <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402232:	4b11      	ldr	r3, [pc, #68]	; (402278 <xTaskResumeAll+0x108>)
  402234:	681b      	ldr	r3, [r3, #0]
  402236:	2b01      	cmp	r3, #1
  402238:	d10b      	bne.n	402252 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40223a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40223e:	4b12      	ldr	r3, [pc, #72]	; (402288 <xTaskResumeAll+0x118>)
  402240:	601a      	str	r2, [r3, #0]
  402242:	f3bf 8f4f 	dsb	sy
  402246:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  40224a:	2401      	movs	r4, #1
  40224c:	e7ae      	b.n	4021ac <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  40224e:	2400      	movs	r4, #0
  402250:	e7ac      	b.n	4021ac <xTaskResumeAll+0x3c>
  402252:	2400      	movs	r4, #0
  402254:	e7aa      	b.n	4021ac <xTaskResumeAll+0x3c>
  402256:	bf00      	nop
  402258:	20400ae0 	.word	0x20400ae0
  40225c:	00401109 	.word	0x00401109
  402260:	20400ad8 	.word	0x20400ad8
  402264:	00401155 	.word	0x00401155
  402268:	00400fd9 	.word	0x00400fd9
  40226c:	20400a68 	.word	0x20400a68
  402270:	20400adc 	.word	0x20400adc
  402274:	00402025 	.word	0x00402025
  402278:	20400b64 	.word	0x20400b64
  40227c:	20400b20 	.word	0x20400b20
  402280:	00401025 	.word	0x00401025
  402284:	20400aec 	.word	0x20400aec
  402288:	e000ed04 	.word	0xe000ed04
  40228c:	20400a74 	.word	0x20400a74

00402290 <vTaskDelay>:
	{
  402290:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402292:	2800      	cmp	r0, #0
  402294:	d029      	beq.n	4022ea <vTaskDelay+0x5a>
  402296:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402298:	4b18      	ldr	r3, [pc, #96]	; (4022fc <vTaskDelay+0x6c>)
  40229a:	681b      	ldr	r3, [r3, #0]
  40229c:	b153      	cbz	r3, 4022b4 <vTaskDelay+0x24>
  40229e:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022a2:	b672      	cpsid	i
  4022a4:	f383 8811 	msr	BASEPRI, r3
  4022a8:	f3bf 8f6f 	isb	sy
  4022ac:	f3bf 8f4f 	dsb	sy
  4022b0:	b662      	cpsie	i
  4022b2:	e7fe      	b.n	4022b2 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4022b4:	4b12      	ldr	r3, [pc, #72]	; (402300 <vTaskDelay+0x70>)
  4022b6:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4022b8:	4b12      	ldr	r3, [pc, #72]	; (402304 <vTaskDelay+0x74>)
  4022ba:	681b      	ldr	r3, [r3, #0]
  4022bc:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4022be:	4b12      	ldr	r3, [pc, #72]	; (402308 <vTaskDelay+0x78>)
  4022c0:	6818      	ldr	r0, [r3, #0]
  4022c2:	3004      	adds	r0, #4
  4022c4:	4b11      	ldr	r3, [pc, #68]	; (40230c <vTaskDelay+0x7c>)
  4022c6:	4798      	blx	r3
  4022c8:	b948      	cbnz	r0, 4022de <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4022ca:	4b0f      	ldr	r3, [pc, #60]	; (402308 <vTaskDelay+0x78>)
  4022cc:	681a      	ldr	r2, [r3, #0]
  4022ce:	4910      	ldr	r1, [pc, #64]	; (402310 <vTaskDelay+0x80>)
  4022d0:	680b      	ldr	r3, [r1, #0]
  4022d2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4022d4:	2201      	movs	r2, #1
  4022d6:	4082      	lsls	r2, r0
  4022d8:	ea23 0302 	bic.w	r3, r3, r2
  4022dc:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  4022de:	4620      	mov	r0, r4
  4022e0:	4b0c      	ldr	r3, [pc, #48]	; (402314 <vTaskDelay+0x84>)
  4022e2:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4022e4:	4b0c      	ldr	r3, [pc, #48]	; (402318 <vTaskDelay+0x88>)
  4022e6:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4022e8:	b938      	cbnz	r0, 4022fa <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  4022ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4022ee:	4b0b      	ldr	r3, [pc, #44]	; (40231c <vTaskDelay+0x8c>)
  4022f0:	601a      	str	r2, [r3, #0]
  4022f2:	f3bf 8f4f 	dsb	sy
  4022f6:	f3bf 8f6f 	isb	sy
  4022fa:	bd10      	pop	{r4, pc}
  4022fc:	20400ae0 	.word	0x20400ae0
  402300:	00402009 	.word	0x00402009
  402304:	20400b60 	.word	0x20400b60
  402308:	20400a68 	.word	0x20400a68
  40230c:	00401025 	.word	0x00401025
  402310:	20400aec 	.word	0x20400aec
  402314:	00401cf1 	.word	0x00401cf1
  402318:	00402171 	.word	0x00402171
  40231c:	e000ed04 	.word	0xe000ed04

00402320 <prvIdleTask>:
{
  402320:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  402322:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4023ac <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402326:	4e19      	ldr	r6, [pc, #100]	; (40238c <prvIdleTask+0x6c>)
				taskYIELD();
  402328:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4023b0 <prvIdleTask+0x90>
  40232c:	e02a      	b.n	402384 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  40232e:	4b18      	ldr	r3, [pc, #96]	; (402390 <prvIdleTask+0x70>)
  402330:	681b      	ldr	r3, [r3, #0]
  402332:	2b01      	cmp	r3, #1
  402334:	d81e      	bhi.n	402374 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402336:	682b      	ldr	r3, [r5, #0]
  402338:	2b00      	cmp	r3, #0
  40233a:	d0f8      	beq.n	40232e <prvIdleTask+0xe>
			vTaskSuspendAll();
  40233c:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40233e:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402340:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402342:	2c00      	cmp	r4, #0
  402344:	d0f7      	beq.n	402336 <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  402346:	4b13      	ldr	r3, [pc, #76]	; (402394 <prvIdleTask+0x74>)
  402348:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40234a:	68f3      	ldr	r3, [r6, #12]
  40234c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  40234e:	1d20      	adds	r0, r4, #4
  402350:	4b11      	ldr	r3, [pc, #68]	; (402398 <prvIdleTask+0x78>)
  402352:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402354:	4a11      	ldr	r2, [pc, #68]	; (40239c <prvIdleTask+0x7c>)
  402356:	6813      	ldr	r3, [r2, #0]
  402358:	3b01      	subs	r3, #1
  40235a:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  40235c:	682b      	ldr	r3, [r5, #0]
  40235e:	3b01      	subs	r3, #1
  402360:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402362:	4b0f      	ldr	r3, [pc, #60]	; (4023a0 <prvIdleTask+0x80>)
  402364:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  402366:	6b20      	ldr	r0, [r4, #48]	; 0x30
  402368:	f8df a048 	ldr.w	sl, [pc, #72]	; 4023b4 <prvIdleTask+0x94>
  40236c:	47d0      	blx	sl
		vPortFree( pxTCB );
  40236e:	4620      	mov	r0, r4
  402370:	47d0      	blx	sl
  402372:	e7e0      	b.n	402336 <prvIdleTask+0x16>
				taskYIELD();
  402374:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402378:	f8c9 3000 	str.w	r3, [r9]
  40237c:	f3bf 8f4f 	dsb	sy
  402380:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402384:	4d07      	ldr	r5, [pc, #28]	; (4023a4 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  402386:	4f08      	ldr	r7, [pc, #32]	; (4023a8 <prvIdleTask+0x88>)
  402388:	e7d5      	b.n	402336 <prvIdleTask+0x16>
  40238a:	bf00      	nop
  40238c:	20400b4c 	.word	0x20400b4c
  402390:	20400a74 	.word	0x20400a74
  402394:	00401109 	.word	0x00401109
  402398:	00401025 	.word	0x00401025
  40239c:	20400ad8 	.word	0x20400ad8
  4023a0:	00401155 	.word	0x00401155
  4023a4:	20400ae8 	.word	0x20400ae8
  4023a8:	00402171 	.word	0x00402171
  4023ac:	00402009 	.word	0x00402009
  4023b0:	e000ed04 	.word	0xe000ed04
  4023b4:	00401395 	.word	0x00401395

004023b8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4023b8:	4b2d      	ldr	r3, [pc, #180]	; (402470 <vTaskSwitchContext+0xb8>)
  4023ba:	681b      	ldr	r3, [r3, #0]
  4023bc:	2b00      	cmp	r3, #0
  4023be:	d12c      	bne.n	40241a <vTaskSwitchContext+0x62>
{
  4023c0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4023c2:	2200      	movs	r2, #0
  4023c4:	4b2b      	ldr	r3, [pc, #172]	; (402474 <vTaskSwitchContext+0xbc>)
  4023c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4023c8:	4b2b      	ldr	r3, [pc, #172]	; (402478 <vTaskSwitchContext+0xc0>)
  4023ca:	681b      	ldr	r3, [r3, #0]
  4023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4023ce:	681a      	ldr	r2, [r3, #0]
  4023d0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4023d4:	d103      	bne.n	4023de <vTaskSwitchContext+0x26>
  4023d6:	685a      	ldr	r2, [r3, #4]
  4023d8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4023dc:	d021      	beq.n	402422 <vTaskSwitchContext+0x6a>
  4023de:	4b26      	ldr	r3, [pc, #152]	; (402478 <vTaskSwitchContext+0xc0>)
  4023e0:	6818      	ldr	r0, [r3, #0]
  4023e2:	6819      	ldr	r1, [r3, #0]
  4023e4:	3134      	adds	r1, #52	; 0x34
  4023e6:	4b25      	ldr	r3, [pc, #148]	; (40247c <vTaskSwitchContext+0xc4>)
  4023e8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4023ea:	4b25      	ldr	r3, [pc, #148]	; (402480 <vTaskSwitchContext+0xc8>)
  4023ec:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4023ee:	fab3 f383 	clz	r3, r3
  4023f2:	b2db      	uxtb	r3, r3
  4023f4:	f1c3 031f 	rsb	r3, r3, #31
  4023f8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4023fc:	4a21      	ldr	r2, [pc, #132]	; (402484 <vTaskSwitchContext+0xcc>)
  4023fe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  402402:	b9ba      	cbnz	r2, 402434 <vTaskSwitchContext+0x7c>
	__asm volatile
  402404:	f04f 0380 	mov.w	r3, #128	; 0x80
  402408:	b672      	cpsid	i
  40240a:	f383 8811 	msr	BASEPRI, r3
  40240e:	f3bf 8f6f 	isb	sy
  402412:	f3bf 8f4f 	dsb	sy
  402416:	b662      	cpsie	i
  402418:	e7fe      	b.n	402418 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40241a:	2201      	movs	r2, #1
  40241c:	4b15      	ldr	r3, [pc, #84]	; (402474 <vTaskSwitchContext+0xbc>)
  40241e:	601a      	str	r2, [r3, #0]
  402420:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402422:	689a      	ldr	r2, [r3, #8]
  402424:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402428:	d1d9      	bne.n	4023de <vTaskSwitchContext+0x26>
  40242a:	68db      	ldr	r3, [r3, #12]
  40242c:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402430:	d1d5      	bne.n	4023de <vTaskSwitchContext+0x26>
  402432:	e7da      	b.n	4023ea <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402434:	4a13      	ldr	r2, [pc, #76]	; (402484 <vTaskSwitchContext+0xcc>)
  402436:	0099      	lsls	r1, r3, #2
  402438:	18c8      	adds	r0, r1, r3
  40243a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40243e:	6844      	ldr	r4, [r0, #4]
  402440:	6864      	ldr	r4, [r4, #4]
  402442:	6044      	str	r4, [r0, #4]
  402444:	4419      	add	r1, r3
  402446:	4602      	mov	r2, r0
  402448:	3208      	adds	r2, #8
  40244a:	4294      	cmp	r4, r2
  40244c:	d009      	beq.n	402462 <vTaskSwitchContext+0xaa>
  40244e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402452:	4a0c      	ldr	r2, [pc, #48]	; (402484 <vTaskSwitchContext+0xcc>)
  402454:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402458:	685b      	ldr	r3, [r3, #4]
  40245a:	68da      	ldr	r2, [r3, #12]
  40245c:	4b06      	ldr	r3, [pc, #24]	; (402478 <vTaskSwitchContext+0xc0>)
  40245e:	601a      	str	r2, [r3, #0]
  402460:	bd10      	pop	{r4, pc}
  402462:	6860      	ldr	r0, [r4, #4]
  402464:	4a07      	ldr	r2, [pc, #28]	; (402484 <vTaskSwitchContext+0xcc>)
  402466:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40246a:	6050      	str	r0, [r2, #4]
  40246c:	e7ef      	b.n	40244e <vTaskSwitchContext+0x96>
  40246e:	bf00      	nop
  402470:	20400ae0 	.word	0x20400ae0
  402474:	20400b64 	.word	0x20400b64
  402478:	20400a68 	.word	0x20400a68
  40247c:	00402f05 	.word	0x00402f05
  402480:	20400aec 	.word	0x20400aec
  402484:	20400a74 	.word	0x20400a74

00402488 <vTaskPlaceOnEventList>:
{
  402488:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40248a:	b1e0      	cbz	r0, 4024c6 <vTaskPlaceOnEventList+0x3e>
  40248c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40248e:	4d17      	ldr	r5, [pc, #92]	; (4024ec <vTaskPlaceOnEventList+0x64>)
  402490:	6829      	ldr	r1, [r5, #0]
  402492:	3118      	adds	r1, #24
  402494:	4b16      	ldr	r3, [pc, #88]	; (4024f0 <vTaskPlaceOnEventList+0x68>)
  402496:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402498:	6828      	ldr	r0, [r5, #0]
  40249a:	3004      	adds	r0, #4
  40249c:	4b15      	ldr	r3, [pc, #84]	; (4024f4 <vTaskPlaceOnEventList+0x6c>)
  40249e:	4798      	blx	r3
  4024a0:	b940      	cbnz	r0, 4024b4 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4024a2:	682a      	ldr	r2, [r5, #0]
  4024a4:	4914      	ldr	r1, [pc, #80]	; (4024f8 <vTaskPlaceOnEventList+0x70>)
  4024a6:	680b      	ldr	r3, [r1, #0]
  4024a8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  4024aa:	2201      	movs	r2, #1
  4024ac:	4082      	lsls	r2, r0
  4024ae:	ea23 0302 	bic.w	r3, r3, r2
  4024b2:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4024b4:	f1b4 3fff 	cmp.w	r4, #4294967295
  4024b8:	d010      	beq.n	4024dc <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  4024ba:	4b10      	ldr	r3, [pc, #64]	; (4024fc <vTaskPlaceOnEventList+0x74>)
  4024bc:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4024be:	4420      	add	r0, r4
  4024c0:	4b0f      	ldr	r3, [pc, #60]	; (402500 <vTaskPlaceOnEventList+0x78>)
  4024c2:	4798      	blx	r3
  4024c4:	bd38      	pop	{r3, r4, r5, pc}
  4024c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4024ca:	b672      	cpsid	i
  4024cc:	f383 8811 	msr	BASEPRI, r3
  4024d0:	f3bf 8f6f 	isb	sy
  4024d4:	f3bf 8f4f 	dsb	sy
  4024d8:	b662      	cpsie	i
  4024da:	e7fe      	b.n	4024da <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4024dc:	4b03      	ldr	r3, [pc, #12]	; (4024ec <vTaskPlaceOnEventList+0x64>)
  4024de:	6819      	ldr	r1, [r3, #0]
  4024e0:	3104      	adds	r1, #4
  4024e2:	4808      	ldr	r0, [pc, #32]	; (402504 <vTaskPlaceOnEventList+0x7c>)
  4024e4:	4b08      	ldr	r3, [pc, #32]	; (402508 <vTaskPlaceOnEventList+0x80>)
  4024e6:	4798      	blx	r3
  4024e8:	bd38      	pop	{r3, r4, r5, pc}
  4024ea:	bf00      	nop
  4024ec:	20400a68 	.word	0x20400a68
  4024f0:	00400ff1 	.word	0x00400ff1
  4024f4:	00401025 	.word	0x00401025
  4024f8:	20400aec 	.word	0x20400aec
  4024fc:	20400b60 	.word	0x20400b60
  402500:	00401cf1 	.word	0x00401cf1
  402504:	20400b38 	.word	0x20400b38
  402508:	00400fd9 	.word	0x00400fd9

0040250c <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  40250c:	b1e8      	cbz	r0, 40254a <vTaskPlaceOnEventListRestricted+0x3e>
	{
  40250e:	b570      	push	{r4, r5, r6, lr}
  402510:	4615      	mov	r5, r2
  402512:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402514:	4e16      	ldr	r6, [pc, #88]	; (402570 <vTaskPlaceOnEventListRestricted+0x64>)
  402516:	6831      	ldr	r1, [r6, #0]
  402518:	3118      	adds	r1, #24
  40251a:	4b16      	ldr	r3, [pc, #88]	; (402574 <vTaskPlaceOnEventListRestricted+0x68>)
  40251c:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40251e:	6830      	ldr	r0, [r6, #0]
  402520:	3004      	adds	r0, #4
  402522:	4b15      	ldr	r3, [pc, #84]	; (402578 <vTaskPlaceOnEventListRestricted+0x6c>)
  402524:	4798      	blx	r3
  402526:	b940      	cbnz	r0, 40253a <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402528:	6832      	ldr	r2, [r6, #0]
  40252a:	4914      	ldr	r1, [pc, #80]	; (40257c <vTaskPlaceOnEventListRestricted+0x70>)
  40252c:	680b      	ldr	r3, [r1, #0]
  40252e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402530:	2201      	movs	r2, #1
  402532:	4082      	lsls	r2, r0
  402534:	ea23 0302 	bic.w	r3, r3, r2
  402538:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40253a:	2d01      	cmp	r5, #1
  40253c:	d010      	beq.n	402560 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  40253e:	4b10      	ldr	r3, [pc, #64]	; (402580 <vTaskPlaceOnEventListRestricted+0x74>)
  402540:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402542:	4420      	add	r0, r4
  402544:	4b0f      	ldr	r3, [pc, #60]	; (402584 <vTaskPlaceOnEventListRestricted+0x78>)
  402546:	4798      	blx	r3
  402548:	bd70      	pop	{r4, r5, r6, pc}
  40254a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40254e:	b672      	cpsid	i
  402550:	f383 8811 	msr	BASEPRI, r3
  402554:	f3bf 8f6f 	isb	sy
  402558:	f3bf 8f4f 	dsb	sy
  40255c:	b662      	cpsie	i
  40255e:	e7fe      	b.n	40255e <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402560:	4b03      	ldr	r3, [pc, #12]	; (402570 <vTaskPlaceOnEventListRestricted+0x64>)
  402562:	6819      	ldr	r1, [r3, #0]
  402564:	3104      	adds	r1, #4
  402566:	4808      	ldr	r0, [pc, #32]	; (402588 <vTaskPlaceOnEventListRestricted+0x7c>)
  402568:	4b02      	ldr	r3, [pc, #8]	; (402574 <vTaskPlaceOnEventListRestricted+0x68>)
  40256a:	4798      	blx	r3
  40256c:	bd70      	pop	{r4, r5, r6, pc}
  40256e:	bf00      	nop
  402570:	20400a68 	.word	0x20400a68
  402574:	00400fd9 	.word	0x00400fd9
  402578:	00401025 	.word	0x00401025
  40257c:	20400aec 	.word	0x20400aec
  402580:	20400b60 	.word	0x20400b60
  402584:	00401cf1 	.word	0x00401cf1
  402588:	20400b38 	.word	0x20400b38

0040258c <xTaskRemoveFromEventList>:
{
  40258c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40258e:	68c3      	ldr	r3, [r0, #12]
  402590:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402592:	b324      	cbz	r4, 4025de <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402594:	f104 0518 	add.w	r5, r4, #24
  402598:	4628      	mov	r0, r5
  40259a:	4b1a      	ldr	r3, [pc, #104]	; (402604 <xTaskRemoveFromEventList+0x78>)
  40259c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40259e:	4b1a      	ldr	r3, [pc, #104]	; (402608 <xTaskRemoveFromEventList+0x7c>)
  4025a0:	681b      	ldr	r3, [r3, #0]
  4025a2:	bb3b      	cbnz	r3, 4025f4 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4025a4:	1d25      	adds	r5, r4, #4
  4025a6:	4628      	mov	r0, r5
  4025a8:	4b16      	ldr	r3, [pc, #88]	; (402604 <xTaskRemoveFromEventList+0x78>)
  4025aa:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4025ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4025ae:	4a17      	ldr	r2, [pc, #92]	; (40260c <xTaskRemoveFromEventList+0x80>)
  4025b0:	6811      	ldr	r1, [r2, #0]
  4025b2:	2301      	movs	r3, #1
  4025b4:	4083      	lsls	r3, r0
  4025b6:	430b      	orrs	r3, r1
  4025b8:	6013      	str	r3, [r2, #0]
  4025ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4025be:	4629      	mov	r1, r5
  4025c0:	4b13      	ldr	r3, [pc, #76]	; (402610 <xTaskRemoveFromEventList+0x84>)
  4025c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4025c6:	4b13      	ldr	r3, [pc, #76]	; (402614 <xTaskRemoveFromEventList+0x88>)
  4025c8:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  4025ca:	4b13      	ldr	r3, [pc, #76]	; (402618 <xTaskRemoveFromEventList+0x8c>)
  4025cc:	681b      	ldr	r3, [r3, #0]
  4025ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4025d2:	429a      	cmp	r2, r3
  4025d4:	d913      	bls.n	4025fe <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4025d6:	2001      	movs	r0, #1
  4025d8:	4b10      	ldr	r3, [pc, #64]	; (40261c <xTaskRemoveFromEventList+0x90>)
  4025da:	6018      	str	r0, [r3, #0]
  4025dc:	bd38      	pop	{r3, r4, r5, pc}
  4025de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025e2:	b672      	cpsid	i
  4025e4:	f383 8811 	msr	BASEPRI, r3
  4025e8:	f3bf 8f6f 	isb	sy
  4025ec:	f3bf 8f4f 	dsb	sy
  4025f0:	b662      	cpsie	i
  4025f2:	e7fe      	b.n	4025f2 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4025f4:	4629      	mov	r1, r5
  4025f6:	480a      	ldr	r0, [pc, #40]	; (402620 <xTaskRemoveFromEventList+0x94>)
  4025f8:	4b06      	ldr	r3, [pc, #24]	; (402614 <xTaskRemoveFromEventList+0x88>)
  4025fa:	4798      	blx	r3
  4025fc:	e7e5      	b.n	4025ca <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4025fe:	2000      	movs	r0, #0
}
  402600:	bd38      	pop	{r3, r4, r5, pc}
  402602:	bf00      	nop
  402604:	00401025 	.word	0x00401025
  402608:	20400ae0 	.word	0x20400ae0
  40260c:	20400aec 	.word	0x20400aec
  402610:	20400a74 	.word	0x20400a74
  402614:	00400fd9 	.word	0x00400fd9
  402618:	20400a68 	.word	0x20400a68
  40261c:	20400b64 	.word	0x20400b64
  402620:	20400b20 	.word	0x20400b20

00402624 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402624:	b130      	cbz	r0, 402634 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402626:	4a09      	ldr	r2, [pc, #36]	; (40264c <vTaskSetTimeOutState+0x28>)
  402628:	6812      	ldr	r2, [r2, #0]
  40262a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  40262c:	4a08      	ldr	r2, [pc, #32]	; (402650 <vTaskSetTimeOutState+0x2c>)
  40262e:	6812      	ldr	r2, [r2, #0]
  402630:	6042      	str	r2, [r0, #4]
  402632:	4770      	bx	lr
  402634:	f04f 0380 	mov.w	r3, #128	; 0x80
  402638:	b672      	cpsid	i
  40263a:	f383 8811 	msr	BASEPRI, r3
  40263e:	f3bf 8f6f 	isb	sy
  402642:	f3bf 8f4f 	dsb	sy
  402646:	b662      	cpsie	i
  402648:	e7fe      	b.n	402648 <vTaskSetTimeOutState+0x24>
  40264a:	bf00      	nop
  40264c:	20400b1c 	.word	0x20400b1c
  402650:	20400b60 	.word	0x20400b60

00402654 <xTaskCheckForTimeOut>:
{
  402654:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402656:	b1c0      	cbz	r0, 40268a <xTaskCheckForTimeOut+0x36>
  402658:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40265a:	b309      	cbz	r1, 4026a0 <xTaskCheckForTimeOut+0x4c>
  40265c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  40265e:	4b1d      	ldr	r3, [pc, #116]	; (4026d4 <xTaskCheckForTimeOut+0x80>)
  402660:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402662:	4b1d      	ldr	r3, [pc, #116]	; (4026d8 <xTaskCheckForTimeOut+0x84>)
  402664:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402666:	682b      	ldr	r3, [r5, #0]
  402668:	f1b3 3fff 	cmp.w	r3, #4294967295
  40266c:	d02e      	beq.n	4026cc <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  40266e:	491b      	ldr	r1, [pc, #108]	; (4026dc <xTaskCheckForTimeOut+0x88>)
  402670:	6809      	ldr	r1, [r1, #0]
  402672:	6820      	ldr	r0, [r4, #0]
  402674:	4288      	cmp	r0, r1
  402676:	d002      	beq.n	40267e <xTaskCheckForTimeOut+0x2a>
  402678:	6861      	ldr	r1, [r4, #4]
  40267a:	428a      	cmp	r2, r1
  40267c:	d228      	bcs.n	4026d0 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  40267e:	6861      	ldr	r1, [r4, #4]
  402680:	1a50      	subs	r0, r2, r1
  402682:	4283      	cmp	r3, r0
  402684:	d817      	bhi.n	4026b6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402686:	2401      	movs	r4, #1
  402688:	e01c      	b.n	4026c4 <xTaskCheckForTimeOut+0x70>
  40268a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40268e:	b672      	cpsid	i
  402690:	f383 8811 	msr	BASEPRI, r3
  402694:	f3bf 8f6f 	isb	sy
  402698:	f3bf 8f4f 	dsb	sy
  40269c:	b662      	cpsie	i
  40269e:	e7fe      	b.n	40269e <xTaskCheckForTimeOut+0x4a>
  4026a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026a4:	b672      	cpsid	i
  4026a6:	f383 8811 	msr	BASEPRI, r3
  4026aa:	f3bf 8f6f 	isb	sy
  4026ae:	f3bf 8f4f 	dsb	sy
  4026b2:	b662      	cpsie	i
  4026b4:	e7fe      	b.n	4026b4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  4026b6:	1a9b      	subs	r3, r3, r2
  4026b8:	440b      	add	r3, r1
  4026ba:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  4026bc:	4620      	mov	r0, r4
  4026be:	4b08      	ldr	r3, [pc, #32]	; (4026e0 <xTaskCheckForTimeOut+0x8c>)
  4026c0:	4798      	blx	r3
			xReturn = pdFALSE;
  4026c2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4026c4:	4b07      	ldr	r3, [pc, #28]	; (4026e4 <xTaskCheckForTimeOut+0x90>)
  4026c6:	4798      	blx	r3
}
  4026c8:	4620      	mov	r0, r4
  4026ca:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4026cc:	2400      	movs	r4, #0
  4026ce:	e7f9      	b.n	4026c4 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4026d0:	2401      	movs	r4, #1
  4026d2:	e7f7      	b.n	4026c4 <xTaskCheckForTimeOut+0x70>
  4026d4:	00401109 	.word	0x00401109
  4026d8:	20400b60 	.word	0x20400b60
  4026dc:	20400b1c 	.word	0x20400b1c
  4026e0:	00402625 	.word	0x00402625
  4026e4:	00401155 	.word	0x00401155

004026e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4026e8:	2201      	movs	r2, #1
  4026ea:	4b01      	ldr	r3, [pc, #4]	; (4026f0 <vTaskMissedYield+0x8>)
  4026ec:	601a      	str	r2, [r3, #0]
  4026ee:	4770      	bx	lr
  4026f0:	20400b64 	.word	0x20400b64

004026f4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4026f4:	4b05      	ldr	r3, [pc, #20]	; (40270c <xTaskGetSchedulerState+0x18>)
  4026f6:	681b      	ldr	r3, [r3, #0]
  4026f8:	b133      	cbz	r3, 402708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4026fa:	4b05      	ldr	r3, [pc, #20]	; (402710 <xTaskGetSchedulerState+0x1c>)
  4026fc:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4026fe:	2b00      	cmp	r3, #0
  402700:	bf0c      	ite	eq
  402702:	2002      	moveq	r0, #2
  402704:	2000      	movne	r0, #0
  402706:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402708:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  40270a:	4770      	bx	lr
  40270c:	20400b34 	.word	0x20400b34
  402710:	20400ae0 	.word	0x20400ae0

00402714 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402714:	2800      	cmp	r0, #0
  402716:	d044      	beq.n	4027a2 <vTaskPriorityInherit+0x8e>
	{
  402718:	b538      	push	{r3, r4, r5, lr}
  40271a:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  40271c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  40271e:	4921      	ldr	r1, [pc, #132]	; (4027a4 <vTaskPriorityInherit+0x90>)
  402720:	6809      	ldr	r1, [r1, #0]
  402722:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402724:	428a      	cmp	r2, r1
  402726:	d214      	bcs.n	402752 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402728:	6981      	ldr	r1, [r0, #24]
  40272a:	2900      	cmp	r1, #0
  40272c:	db05      	blt.n	40273a <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40272e:	491d      	ldr	r1, [pc, #116]	; (4027a4 <vTaskPriorityInherit+0x90>)
  402730:	6809      	ldr	r1, [r1, #0]
  402732:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402734:	f1c1 0105 	rsb	r1, r1, #5
  402738:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40273a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  40273e:	491a      	ldr	r1, [pc, #104]	; (4027a8 <vTaskPriorityInherit+0x94>)
  402740:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402744:	6961      	ldr	r1, [r4, #20]
  402746:	4291      	cmp	r1, r2
  402748:	d004      	beq.n	402754 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40274a:	4a16      	ldr	r2, [pc, #88]	; (4027a4 <vTaskPriorityInherit+0x90>)
  40274c:	6812      	ldr	r2, [r2, #0]
  40274e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402750:	62e2      	str	r2, [r4, #44]	; 0x2c
  402752:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402754:	1d25      	adds	r5, r4, #4
  402756:	4628      	mov	r0, r5
  402758:	4b14      	ldr	r3, [pc, #80]	; (4027ac <vTaskPriorityInherit+0x98>)
  40275a:	4798      	blx	r3
  40275c:	b970      	cbnz	r0, 40277c <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  40275e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402760:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402764:	4a10      	ldr	r2, [pc, #64]	; (4027a8 <vTaskPriorityInherit+0x94>)
  402766:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40276a:	b93a      	cbnz	r2, 40277c <vTaskPriorityInherit+0x68>
  40276c:	4810      	ldr	r0, [pc, #64]	; (4027b0 <vTaskPriorityInherit+0x9c>)
  40276e:	6802      	ldr	r2, [r0, #0]
  402770:	2101      	movs	r1, #1
  402772:	fa01 f303 	lsl.w	r3, r1, r3
  402776:	ea22 0303 	bic.w	r3, r2, r3
  40277a:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40277c:	4b09      	ldr	r3, [pc, #36]	; (4027a4 <vTaskPriorityInherit+0x90>)
  40277e:	681b      	ldr	r3, [r3, #0]
  402780:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402782:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402784:	4a0a      	ldr	r2, [pc, #40]	; (4027b0 <vTaskPriorityInherit+0x9c>)
  402786:	6811      	ldr	r1, [r2, #0]
  402788:	2301      	movs	r3, #1
  40278a:	4083      	lsls	r3, r0
  40278c:	430b      	orrs	r3, r1
  40278e:	6013      	str	r3, [r2, #0]
  402790:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402794:	4629      	mov	r1, r5
  402796:	4b04      	ldr	r3, [pc, #16]	; (4027a8 <vTaskPriorityInherit+0x94>)
  402798:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40279c:	4b05      	ldr	r3, [pc, #20]	; (4027b4 <vTaskPriorityInherit+0xa0>)
  40279e:	4798      	blx	r3
  4027a0:	bd38      	pop	{r3, r4, r5, pc}
  4027a2:	4770      	bx	lr
  4027a4:	20400a68 	.word	0x20400a68
  4027a8:	20400a74 	.word	0x20400a74
  4027ac:	00401025 	.word	0x00401025
  4027b0:	20400aec 	.word	0x20400aec
  4027b4:	00400fd9 	.word	0x00400fd9

004027b8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  4027b8:	2800      	cmp	r0, #0
  4027ba:	d04d      	beq.n	402858 <xTaskPriorityDisinherit+0xa0>
	{
  4027bc:	b538      	push	{r3, r4, r5, lr}
  4027be:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  4027c0:	4a27      	ldr	r2, [pc, #156]	; (402860 <xTaskPriorityDisinherit+0xa8>)
  4027c2:	6812      	ldr	r2, [r2, #0]
  4027c4:	4290      	cmp	r0, r2
  4027c6:	d00a      	beq.n	4027de <xTaskPriorityDisinherit+0x26>
  4027c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027cc:	b672      	cpsid	i
  4027ce:	f383 8811 	msr	BASEPRI, r3
  4027d2:	f3bf 8f6f 	isb	sy
  4027d6:	f3bf 8f4f 	dsb	sy
  4027da:	b662      	cpsie	i
  4027dc:	e7fe      	b.n	4027dc <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4027de:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4027e0:	b952      	cbnz	r2, 4027f8 <xTaskPriorityDisinherit+0x40>
  4027e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027e6:	b672      	cpsid	i
  4027e8:	f383 8811 	msr	BASEPRI, r3
  4027ec:	f3bf 8f6f 	isb	sy
  4027f0:	f3bf 8f4f 	dsb	sy
  4027f4:	b662      	cpsie	i
  4027f6:	e7fe      	b.n	4027f6 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4027f8:	3a01      	subs	r2, #1
  4027fa:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4027fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4027fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402800:	4288      	cmp	r0, r1
  402802:	d02b      	beq.n	40285c <xTaskPriorityDisinherit+0xa4>
  402804:	bb52      	cbnz	r2, 40285c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402806:	1d25      	adds	r5, r4, #4
  402808:	4628      	mov	r0, r5
  40280a:	4b16      	ldr	r3, [pc, #88]	; (402864 <xTaskPriorityDisinherit+0xac>)
  40280c:	4798      	blx	r3
  40280e:	b968      	cbnz	r0, 40282c <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402810:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402812:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  402816:	4b14      	ldr	r3, [pc, #80]	; (402868 <xTaskPriorityDisinherit+0xb0>)
  402818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40281c:	b933      	cbnz	r3, 40282c <xTaskPriorityDisinherit+0x74>
  40281e:	4813      	ldr	r0, [pc, #76]	; (40286c <xTaskPriorityDisinherit+0xb4>)
  402820:	6803      	ldr	r3, [r0, #0]
  402822:	2201      	movs	r2, #1
  402824:	408a      	lsls	r2, r1
  402826:	ea23 0302 	bic.w	r3, r3, r2
  40282a:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  40282c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  40282e:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402830:	f1c0 0305 	rsb	r3, r0, #5
  402834:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402836:	4a0d      	ldr	r2, [pc, #52]	; (40286c <xTaskPriorityDisinherit+0xb4>)
  402838:	6811      	ldr	r1, [r2, #0]
  40283a:	2401      	movs	r4, #1
  40283c:	fa04 f300 	lsl.w	r3, r4, r0
  402840:	430b      	orrs	r3, r1
  402842:	6013      	str	r3, [r2, #0]
  402844:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402848:	4629      	mov	r1, r5
  40284a:	4b07      	ldr	r3, [pc, #28]	; (402868 <xTaskPriorityDisinherit+0xb0>)
  40284c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402850:	4b07      	ldr	r3, [pc, #28]	; (402870 <xTaskPriorityDisinherit+0xb8>)
  402852:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402854:	4620      	mov	r0, r4
  402856:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402858:	2000      	movs	r0, #0
  40285a:	4770      	bx	lr
  40285c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  40285e:	bd38      	pop	{r3, r4, r5, pc}
  402860:	20400a68 	.word	0x20400a68
  402864:	00401025 	.word	0x00401025
  402868:	20400a74 	.word	0x20400a74
  40286c:	20400aec 	.word	0x20400aec
  402870:	00400fd9 	.word	0x00400fd9

00402874 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402874:	4b05      	ldr	r3, [pc, #20]	; (40288c <pvTaskIncrementMutexHeldCount+0x18>)
  402876:	681b      	ldr	r3, [r3, #0]
  402878:	b123      	cbz	r3, 402884 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40287a:	4b04      	ldr	r3, [pc, #16]	; (40288c <pvTaskIncrementMutexHeldCount+0x18>)
  40287c:	681a      	ldr	r2, [r3, #0]
  40287e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402880:	3301      	adds	r3, #1
  402882:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402884:	4b01      	ldr	r3, [pc, #4]	; (40288c <pvTaskIncrementMutexHeldCount+0x18>)
  402886:	6818      	ldr	r0, [r3, #0]
	}
  402888:	4770      	bx	lr
  40288a:	bf00      	nop
  40288c:	20400a68 	.word	0x20400a68

00402890 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402890:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402892:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402894:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402896:	4291      	cmp	r1, r2
  402898:	d80c      	bhi.n	4028b4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40289a:	1ad2      	subs	r2, r2, r3
  40289c:	6983      	ldr	r3, [r0, #24]
  40289e:	429a      	cmp	r2, r3
  4028a0:	d301      	bcc.n	4028a6 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4028a2:	2001      	movs	r0, #1
  4028a4:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4028a6:	1d01      	adds	r1, r0, #4
  4028a8:	4b09      	ldr	r3, [pc, #36]	; (4028d0 <prvInsertTimerInActiveList+0x40>)
  4028aa:	6818      	ldr	r0, [r3, #0]
  4028ac:	4b09      	ldr	r3, [pc, #36]	; (4028d4 <prvInsertTimerInActiveList+0x44>)
  4028ae:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4028b0:	2000      	movs	r0, #0
  4028b2:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  4028b4:	429a      	cmp	r2, r3
  4028b6:	d203      	bcs.n	4028c0 <prvInsertTimerInActiveList+0x30>
  4028b8:	4299      	cmp	r1, r3
  4028ba:	d301      	bcc.n	4028c0 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  4028bc:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  4028be:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  4028c0:	1d01      	adds	r1, r0, #4
  4028c2:	4b05      	ldr	r3, [pc, #20]	; (4028d8 <prvInsertTimerInActiveList+0x48>)
  4028c4:	6818      	ldr	r0, [r3, #0]
  4028c6:	4b03      	ldr	r3, [pc, #12]	; (4028d4 <prvInsertTimerInActiveList+0x44>)
  4028c8:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  4028ca:	2000      	movs	r0, #0
  4028cc:	bd08      	pop	{r3, pc}
  4028ce:	bf00      	nop
  4028d0:	20400b6c 	.word	0x20400b6c
  4028d4:	00400ff1 	.word	0x00400ff1
  4028d8:	20400b68 	.word	0x20400b68

004028dc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4028dc:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4028de:	4b15      	ldr	r3, [pc, #84]	; (402934 <prvCheckForValidListAndQueue+0x58>)
  4028e0:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4028e2:	4b15      	ldr	r3, [pc, #84]	; (402938 <prvCheckForValidListAndQueue+0x5c>)
  4028e4:	681b      	ldr	r3, [r3, #0]
  4028e6:	b113      	cbz	r3, 4028ee <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4028e8:	4b14      	ldr	r3, [pc, #80]	; (40293c <prvCheckForValidListAndQueue+0x60>)
  4028ea:	4798      	blx	r3
  4028ec:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4028ee:	4d14      	ldr	r5, [pc, #80]	; (402940 <prvCheckForValidListAndQueue+0x64>)
  4028f0:	4628      	mov	r0, r5
  4028f2:	4e14      	ldr	r6, [pc, #80]	; (402944 <prvCheckForValidListAndQueue+0x68>)
  4028f4:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4028f6:	4c14      	ldr	r4, [pc, #80]	; (402948 <prvCheckForValidListAndQueue+0x6c>)
  4028f8:	4620      	mov	r0, r4
  4028fa:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4028fc:	4b13      	ldr	r3, [pc, #76]	; (40294c <prvCheckForValidListAndQueue+0x70>)
  4028fe:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402900:	4b13      	ldr	r3, [pc, #76]	; (402950 <prvCheckForValidListAndQueue+0x74>)
  402902:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402904:	2200      	movs	r2, #0
  402906:	2110      	movs	r1, #16
  402908:	2005      	movs	r0, #5
  40290a:	4b12      	ldr	r3, [pc, #72]	; (402954 <prvCheckForValidListAndQueue+0x78>)
  40290c:	4798      	blx	r3
  40290e:	4b0a      	ldr	r3, [pc, #40]	; (402938 <prvCheckForValidListAndQueue+0x5c>)
  402910:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402912:	b118      	cbz	r0, 40291c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402914:	4910      	ldr	r1, [pc, #64]	; (402958 <prvCheckForValidListAndQueue+0x7c>)
  402916:	4b11      	ldr	r3, [pc, #68]	; (40295c <prvCheckForValidListAndQueue+0x80>)
  402918:	4798      	blx	r3
  40291a:	e7e5      	b.n	4028e8 <prvCheckForValidListAndQueue+0xc>
  40291c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402920:	b672      	cpsid	i
  402922:	f383 8811 	msr	BASEPRI, r3
  402926:	f3bf 8f6f 	isb	sy
  40292a:	f3bf 8f4f 	dsb	sy
  40292e:	b662      	cpsie	i
  402930:	e7fe      	b.n	402930 <prvCheckForValidListAndQueue+0x54>
  402932:	bf00      	nop
  402934:	00401109 	.word	0x00401109
  402938:	20400b9c 	.word	0x20400b9c
  40293c:	00401155 	.word	0x00401155
  402940:	20400b70 	.word	0x20400b70
  402944:	00400fbd 	.word	0x00400fbd
  402948:	20400b84 	.word	0x20400b84
  40294c:	20400b68 	.word	0x20400b68
  402950:	20400b6c 	.word	0x20400b6c
  402954:	00401629 	.word	0x00401629
  402958:	00406e0c 	.word	0x00406e0c
  40295c:	00401c39 	.word	0x00401c39

00402960 <xTimerCreateTimerTask>:
{
  402960:	b510      	push	{r4, lr}
  402962:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402964:	4b0f      	ldr	r3, [pc, #60]	; (4029a4 <xTimerCreateTimerTask+0x44>)
  402966:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402968:	4b0f      	ldr	r3, [pc, #60]	; (4029a8 <xTimerCreateTimerTask+0x48>)
  40296a:	681b      	ldr	r3, [r3, #0]
  40296c:	b173      	cbz	r3, 40298c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  40296e:	2300      	movs	r3, #0
  402970:	9303      	str	r3, [sp, #12]
  402972:	9302      	str	r3, [sp, #8]
  402974:	9301      	str	r3, [sp, #4]
  402976:	2204      	movs	r2, #4
  402978:	9200      	str	r2, [sp, #0]
  40297a:	f44f 7282 	mov.w	r2, #260	; 0x104
  40297e:	490b      	ldr	r1, [pc, #44]	; (4029ac <xTimerCreateTimerTask+0x4c>)
  402980:	480b      	ldr	r0, [pc, #44]	; (4029b0 <xTimerCreateTimerTask+0x50>)
  402982:	4c0c      	ldr	r4, [pc, #48]	; (4029b4 <xTimerCreateTimerTask+0x54>)
  402984:	47a0      	blx	r4
	configASSERT( xReturn );
  402986:	b108      	cbz	r0, 40298c <xTimerCreateTimerTask+0x2c>
}
  402988:	b004      	add	sp, #16
  40298a:	bd10      	pop	{r4, pc}
  40298c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402990:	b672      	cpsid	i
  402992:	f383 8811 	msr	BASEPRI, r3
  402996:	f3bf 8f6f 	isb	sy
  40299a:	f3bf 8f4f 	dsb	sy
  40299e:	b662      	cpsie	i
  4029a0:	e7fe      	b.n	4029a0 <xTimerCreateTimerTask+0x40>
  4029a2:	bf00      	nop
  4029a4:	004028dd 	.word	0x004028dd
  4029a8:	20400b9c 	.word	0x20400b9c
  4029ac:	00406e14 	.word	0x00406e14
  4029b0:	00402ae1 	.word	0x00402ae1
  4029b4:	00401d49 	.word	0x00401d49

004029b8 <xTimerGenericCommand>:
	configASSERT( xTimer );
  4029b8:	b1d8      	cbz	r0, 4029f2 <xTimerGenericCommand+0x3a>
{
  4029ba:	b530      	push	{r4, r5, lr}
  4029bc:	b085      	sub	sp, #20
  4029be:	4615      	mov	r5, r2
  4029c0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  4029c2:	4a15      	ldr	r2, [pc, #84]	; (402a18 <xTimerGenericCommand+0x60>)
  4029c4:	6810      	ldr	r0, [r2, #0]
  4029c6:	b320      	cbz	r0, 402a12 <xTimerGenericCommand+0x5a>
  4029c8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  4029ca:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4029cc:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4029ce:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4029d0:	2905      	cmp	r1, #5
  4029d2:	dc19      	bgt.n	402a08 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4029d4:	4b11      	ldr	r3, [pc, #68]	; (402a1c <xTimerGenericCommand+0x64>)
  4029d6:	4798      	blx	r3
  4029d8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4029da:	f04f 0300 	mov.w	r3, #0
  4029de:	bf0c      	ite	eq
  4029e0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4029e2:	461a      	movne	r2, r3
  4029e4:	4669      	mov	r1, sp
  4029e6:	480c      	ldr	r0, [pc, #48]	; (402a18 <xTimerGenericCommand+0x60>)
  4029e8:	6800      	ldr	r0, [r0, #0]
  4029ea:	4c0d      	ldr	r4, [pc, #52]	; (402a20 <xTimerGenericCommand+0x68>)
  4029ec:	47a0      	blx	r4
}
  4029ee:	b005      	add	sp, #20
  4029f0:	bd30      	pop	{r4, r5, pc}
  4029f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4029f6:	b672      	cpsid	i
  4029f8:	f383 8811 	msr	BASEPRI, r3
  4029fc:	f3bf 8f6f 	isb	sy
  402a00:	f3bf 8f4f 	dsb	sy
  402a04:	b662      	cpsie	i
  402a06:	e7fe      	b.n	402a06 <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402a08:	2300      	movs	r3, #0
  402a0a:	4669      	mov	r1, sp
  402a0c:	4c05      	ldr	r4, [pc, #20]	; (402a24 <xTimerGenericCommand+0x6c>)
  402a0e:	47a0      	blx	r4
  402a10:	e7ed      	b.n	4029ee <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402a12:	2000      	movs	r0, #0
	return xReturn;
  402a14:	e7eb      	b.n	4029ee <xTimerGenericCommand+0x36>
  402a16:	bf00      	nop
  402a18:	20400b9c 	.word	0x20400b9c
  402a1c:	004026f5 	.word	0x004026f5
  402a20:	004016a5 	.word	0x004016a5
  402a24:	00401889 	.word	0x00401889

00402a28 <prvSampleTimeNow>:
{
  402a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402a2c:	b082      	sub	sp, #8
  402a2e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402a30:	4b24      	ldr	r3, [pc, #144]	; (402ac4 <prvSampleTimeNow+0x9c>)
  402a32:	4798      	blx	r3
  402a34:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402a36:	4b24      	ldr	r3, [pc, #144]	; (402ac8 <prvSampleTimeNow+0xa0>)
  402a38:	681b      	ldr	r3, [r3, #0]
  402a3a:	4298      	cmp	r0, r3
  402a3c:	d31b      	bcc.n	402a76 <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402a3e:	2300      	movs	r3, #0
  402a40:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402a44:	4b20      	ldr	r3, [pc, #128]	; (402ac8 <prvSampleTimeNow+0xa0>)
  402a46:	601f      	str	r7, [r3, #0]
}
  402a48:	4638      	mov	r0, r7
  402a4a:	b002      	add	sp, #8
  402a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402a50:	2100      	movs	r1, #0
  402a52:	9100      	str	r1, [sp, #0]
  402a54:	460b      	mov	r3, r1
  402a56:	4652      	mov	r2, sl
  402a58:	4620      	mov	r0, r4
  402a5a:	4c1c      	ldr	r4, [pc, #112]	; (402acc <prvSampleTimeNow+0xa4>)
  402a5c:	47a0      	blx	r4
				configASSERT( xResult );
  402a5e:	b960      	cbnz	r0, 402a7a <prvSampleTimeNow+0x52>
  402a60:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a64:	b672      	cpsid	i
  402a66:	f383 8811 	msr	BASEPRI, r3
  402a6a:	f3bf 8f6f 	isb	sy
  402a6e:	f3bf 8f4f 	dsb	sy
  402a72:	b662      	cpsie	i
  402a74:	e7fe      	b.n	402a74 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a76:	4d16      	ldr	r5, [pc, #88]	; (402ad0 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a78:	4e16      	ldr	r6, [pc, #88]	; (402ad4 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402a7a:	682b      	ldr	r3, [r5, #0]
  402a7c:	681a      	ldr	r2, [r3, #0]
  402a7e:	b1c2      	cbz	r2, 402ab2 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a80:	68db      	ldr	r3, [r3, #12]
  402a82:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402a86:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402a88:	f104 0904 	add.w	r9, r4, #4
  402a8c:	4648      	mov	r0, r9
  402a8e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402a92:	4620      	mov	r0, r4
  402a94:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402a96:	69e3      	ldr	r3, [r4, #28]
  402a98:	2b01      	cmp	r3, #1
  402a9a:	d1ee      	bne.n	402a7a <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402a9c:	69a3      	ldr	r3, [r4, #24]
  402a9e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402aa0:	459a      	cmp	sl, r3
  402aa2:	d2d5      	bcs.n	402a50 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402aa4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402aa6:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402aa8:	4649      	mov	r1, r9
  402aaa:	6828      	ldr	r0, [r5, #0]
  402aac:	4b0a      	ldr	r3, [pc, #40]	; (402ad8 <prvSampleTimeNow+0xb0>)
  402aae:	4798      	blx	r3
  402ab0:	e7e3      	b.n	402a7a <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402ab2:	4a0a      	ldr	r2, [pc, #40]	; (402adc <prvSampleTimeNow+0xb4>)
  402ab4:	6810      	ldr	r0, [r2, #0]
  402ab6:	4906      	ldr	r1, [pc, #24]	; (402ad0 <prvSampleTimeNow+0xa8>)
  402ab8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402aba:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402abc:	2301      	movs	r3, #1
  402abe:	f8c8 3000 	str.w	r3, [r8]
  402ac2:	e7bf      	b.n	402a44 <prvSampleTimeNow+0x1c>
  402ac4:	00402019 	.word	0x00402019
  402ac8:	20400b98 	.word	0x20400b98
  402acc:	004029b9 	.word	0x004029b9
  402ad0:	20400b68 	.word	0x20400b68
  402ad4:	00401025 	.word	0x00401025
  402ad8:	00400ff1 	.word	0x00400ff1
  402adc:	20400b6c 	.word	0x20400b6c

00402ae0 <prvTimerTask>:
{
  402ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ae4:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402ae6:	4e75      	ldr	r6, [pc, #468]	; (402cbc <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  402ae8:	4f75      	ldr	r7, [pc, #468]	; (402cc0 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  402aea:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402ce8 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402aee:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402cec <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402af2:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  402af4:	681a      	ldr	r2, [r3, #0]
  402af6:	2a00      	cmp	r2, #0
  402af8:	f000 80ce 	beq.w	402c98 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402afc:	68db      	ldr	r3, [r3, #12]
  402afe:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  402b00:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402b02:	a804      	add	r0, sp, #16
  402b04:	4b6f      	ldr	r3, [pc, #444]	; (402cc4 <prvTimerTask+0x1e4>)
  402b06:	4798      	blx	r3
  402b08:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402b0a:	9b04      	ldr	r3, [sp, #16]
  402b0c:	2b00      	cmp	r3, #0
  402b0e:	d144      	bne.n	402b9a <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  402b10:	42a0      	cmp	r0, r4
  402b12:	d212      	bcs.n	402b3a <prvTimerTask+0x5a>
  402b14:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  402b16:	1b61      	subs	r1, r4, r5
  402b18:	4b6b      	ldr	r3, [pc, #428]	; (402cc8 <prvTimerTask+0x1e8>)
  402b1a:	6818      	ldr	r0, [r3, #0]
  402b1c:	4b6b      	ldr	r3, [pc, #428]	; (402ccc <prvTimerTask+0x1ec>)
  402b1e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402b20:	4b6b      	ldr	r3, [pc, #428]	; (402cd0 <prvTimerTask+0x1f0>)
  402b22:	4798      	blx	r3
  402b24:	2800      	cmp	r0, #0
  402b26:	d13a      	bne.n	402b9e <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  402b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402b2c:	f8c9 3000 	str.w	r3, [r9]
  402b30:	f3bf 8f4f 	dsb	sy
  402b34:	f3bf 8f6f 	isb	sy
  402b38:	e031      	b.n	402b9e <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  402b3a:	4b65      	ldr	r3, [pc, #404]	; (402cd0 <prvTimerTask+0x1f0>)
  402b3c:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402b3e:	6833      	ldr	r3, [r6, #0]
  402b40:	68db      	ldr	r3, [r3, #12]
  402b42:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402b46:	f10a 0004 	add.w	r0, sl, #4
  402b4a:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402b4c:	f8da 301c 	ldr.w	r3, [sl, #28]
  402b50:	2b01      	cmp	r3, #1
  402b52:	d004      	beq.n	402b5e <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402b54:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402b58:	4650      	mov	r0, sl
  402b5a:	4798      	blx	r3
  402b5c:	e01f      	b.n	402b9e <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402b5e:	f8da 1018 	ldr.w	r1, [sl, #24]
  402b62:	4623      	mov	r3, r4
  402b64:	462a      	mov	r2, r5
  402b66:	4421      	add	r1, r4
  402b68:	4650      	mov	r0, sl
  402b6a:	4d5a      	ldr	r5, [pc, #360]	; (402cd4 <prvTimerTask+0x1f4>)
  402b6c:	47a8      	blx	r5
  402b6e:	2801      	cmp	r0, #1
  402b70:	d1f0      	bne.n	402b54 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402b72:	2100      	movs	r1, #0
  402b74:	9100      	str	r1, [sp, #0]
  402b76:	460b      	mov	r3, r1
  402b78:	4622      	mov	r2, r4
  402b7a:	4650      	mov	r0, sl
  402b7c:	4c56      	ldr	r4, [pc, #344]	; (402cd8 <prvTimerTask+0x1f8>)
  402b7e:	47a0      	blx	r4
			configASSERT( xResult );
  402b80:	2800      	cmp	r0, #0
  402b82:	d1e7      	bne.n	402b54 <prvTimerTask+0x74>
  402b84:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b88:	b672      	cpsid	i
  402b8a:	f383 8811 	msr	BASEPRI, r3
  402b8e:	f3bf 8f6f 	isb	sy
  402b92:	f3bf 8f4f 	dsb	sy
  402b96:	b662      	cpsie	i
  402b98:	e7fe      	b.n	402b98 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  402b9a:	4b4d      	ldr	r3, [pc, #308]	; (402cd0 <prvTimerTask+0x1f0>)
  402b9c:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402b9e:	4d4a      	ldr	r5, [pc, #296]	; (402cc8 <prvTimerTask+0x1e8>)
  402ba0:	4c4e      	ldr	r4, [pc, #312]	; (402cdc <prvTimerTask+0x1fc>)
  402ba2:	e006      	b.n	402bb2 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402ba4:	9907      	ldr	r1, [sp, #28]
  402ba6:	9806      	ldr	r0, [sp, #24]
  402ba8:	9b05      	ldr	r3, [sp, #20]
  402baa:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402bac:	9b04      	ldr	r3, [sp, #16]
  402bae:	2b00      	cmp	r3, #0
  402bb0:	da09      	bge.n	402bc6 <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402bb2:	2300      	movs	r3, #0
  402bb4:	461a      	mov	r2, r3
  402bb6:	a904      	add	r1, sp, #16
  402bb8:	6828      	ldr	r0, [r5, #0]
  402bba:	47a0      	blx	r4
  402bbc:	2800      	cmp	r0, #0
  402bbe:	d098      	beq.n	402af2 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402bc0:	9b04      	ldr	r3, [sp, #16]
  402bc2:	2b00      	cmp	r3, #0
  402bc4:	dbee      	blt.n	402ba4 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  402bc6:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  402bca:	f8da 3014 	ldr.w	r3, [sl, #20]
  402bce:	b113      	cbz	r3, 402bd6 <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402bd0:	f10a 0004 	add.w	r0, sl, #4
  402bd4:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402bd6:	a803      	add	r0, sp, #12
  402bd8:	4b3a      	ldr	r3, [pc, #232]	; (402cc4 <prvTimerTask+0x1e4>)
  402bda:	4798      	blx	r3
			switch( xMessage.xMessageID )
  402bdc:	9b04      	ldr	r3, [sp, #16]
  402bde:	2b09      	cmp	r3, #9
  402be0:	d8e7      	bhi.n	402bb2 <prvTimerTask+0xd2>
  402be2:	a201      	add	r2, pc, #4	; (adr r2, 402be8 <prvTimerTask+0x108>)
  402be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402be8:	00402c11 	.word	0x00402c11
  402bec:	00402c11 	.word	0x00402c11
  402bf0:	00402c11 	.word	0x00402c11
  402bf4:	00402bb3 	.word	0x00402bb3
  402bf8:	00402c65 	.word	0x00402c65
  402bfc:	00402c91 	.word	0x00402c91
  402c00:	00402c11 	.word	0x00402c11
  402c04:	00402c11 	.word	0x00402c11
  402c08:	00402bb3 	.word	0x00402bb3
  402c0c:	00402c65 	.word	0x00402c65
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  402c10:	9c05      	ldr	r4, [sp, #20]
  402c12:	f8da 1018 	ldr.w	r1, [sl, #24]
  402c16:	4623      	mov	r3, r4
  402c18:	4602      	mov	r2, r0
  402c1a:	4421      	add	r1, r4
  402c1c:	4650      	mov	r0, sl
  402c1e:	4c2d      	ldr	r4, [pc, #180]	; (402cd4 <prvTimerTask+0x1f4>)
  402c20:	47a0      	blx	r4
  402c22:	2801      	cmp	r0, #1
  402c24:	d1bc      	bne.n	402ba0 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402c26:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  402c2a:	4650      	mov	r0, sl
  402c2c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402c2e:	f8da 301c 	ldr.w	r3, [sl, #28]
  402c32:	2b01      	cmp	r3, #1
  402c34:	d1b4      	bne.n	402ba0 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402c36:	f8da 2018 	ldr.w	r2, [sl, #24]
  402c3a:	2100      	movs	r1, #0
  402c3c:	9100      	str	r1, [sp, #0]
  402c3e:	460b      	mov	r3, r1
  402c40:	9805      	ldr	r0, [sp, #20]
  402c42:	4402      	add	r2, r0
  402c44:	4650      	mov	r0, sl
  402c46:	4c24      	ldr	r4, [pc, #144]	; (402cd8 <prvTimerTask+0x1f8>)
  402c48:	47a0      	blx	r4
							configASSERT( xResult );
  402c4a:	2800      	cmp	r0, #0
  402c4c:	d1a8      	bne.n	402ba0 <prvTimerTask+0xc0>
  402c4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c52:	b672      	cpsid	i
  402c54:	f383 8811 	msr	BASEPRI, r3
  402c58:	f3bf 8f6f 	isb	sy
  402c5c:	f3bf 8f4f 	dsb	sy
  402c60:	b662      	cpsie	i
  402c62:	e7fe      	b.n	402c62 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402c64:	9905      	ldr	r1, [sp, #20]
  402c66:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402c6a:	b131      	cbz	r1, 402c7a <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402c6c:	4603      	mov	r3, r0
  402c6e:	4602      	mov	r2, r0
  402c70:	4401      	add	r1, r0
  402c72:	4650      	mov	r0, sl
  402c74:	4c17      	ldr	r4, [pc, #92]	; (402cd4 <prvTimerTask+0x1f4>)
  402c76:	47a0      	blx	r4
  402c78:	e792      	b.n	402ba0 <prvTimerTask+0xc0>
  402c7a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c7e:	b672      	cpsid	i
  402c80:	f383 8811 	msr	BASEPRI, r3
  402c84:	f3bf 8f6f 	isb	sy
  402c88:	f3bf 8f4f 	dsb	sy
  402c8c:	b662      	cpsie	i
  402c8e:	e7fe      	b.n	402c8e <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402c90:	4650      	mov	r0, sl
  402c92:	4b13      	ldr	r3, [pc, #76]	; (402ce0 <prvTimerTask+0x200>)
  402c94:	4798      	blx	r3
  402c96:	e783      	b.n	402ba0 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402c98:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402c9a:	a804      	add	r0, sp, #16
  402c9c:	4b09      	ldr	r3, [pc, #36]	; (402cc4 <prvTimerTask+0x1e4>)
  402c9e:	4798      	blx	r3
  402ca0:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402ca2:	9b04      	ldr	r3, [sp, #16]
  402ca4:	2b00      	cmp	r3, #0
  402ca6:	f47f af78 	bne.w	402b9a <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402caa:	4b0e      	ldr	r3, [pc, #56]	; (402ce4 <prvTimerTask+0x204>)
  402cac:	681b      	ldr	r3, [r3, #0]
  402cae:	681a      	ldr	r2, [r3, #0]
  402cb0:	fab2 f282 	clz	r2, r2
  402cb4:	0952      	lsrs	r2, r2, #5
  402cb6:	2400      	movs	r4, #0
  402cb8:	e72d      	b.n	402b16 <prvTimerTask+0x36>
  402cba:	bf00      	nop
  402cbc:	20400b68 	.word	0x20400b68
  402cc0:	00402009 	.word	0x00402009
  402cc4:	00402a29 	.word	0x00402a29
  402cc8:	20400b9c 	.word	0x20400b9c
  402ccc:	00401c6d 	.word	0x00401c6d
  402cd0:	00402171 	.word	0x00402171
  402cd4:	00402891 	.word	0x00402891
  402cd8:	004029b9 	.word	0x004029b9
  402cdc:	00401a69 	.word	0x00401a69
  402ce0:	00401395 	.word	0x00401395
  402ce4:	20400b6c 	.word	0x20400b6c
  402ce8:	e000ed04 	.word	0xe000ed04
  402cec:	00401025 	.word	0x00401025

00402cf0 <but1_callBack>:
void but_callback(void);
static void ECHO_init(void);
static void USART1_init(void);
uint32_t usart_puts(uint8_t *pstring);

void but1_callBack(){
  402cf0:	4770      	bx	lr
	...

00402cf4 <counting_motor1>:
	/* Enable PWM channels for LEDs */
	pwm_channel_enable(PWM0, channel);
}

void counting_motor1(void){
	counter_motor1 +=1;
  402cf4:	4a02      	ldr	r2, [pc, #8]	; (402d00 <counting_motor1+0xc>)
  402cf6:	6813      	ldr	r3, [r2, #0]
  402cf8:	3301      	adds	r3, #1
  402cfa:	6013      	str	r3, [r2, #0]
  402cfc:	4770      	bx	lr
  402cfe:	bf00      	nop
  402d00:	20400bac 	.word	0x20400bac

00402d04 <counting2_motor1>:
	
}

void counting2_motor1(void){
	counter2_motor1 +=1;
  402d04:	4a02      	ldr	r2, [pc, #8]	; (402d10 <counting2_motor1+0xc>)
  402d06:	6813      	ldr	r3, [r2, #0]
  402d08:	3301      	adds	r3, #1
  402d0a:	6013      	str	r3, [r2, #0]
  402d0c:	4770      	bx	lr
  402d0e:	bf00      	nop
  402d10:	20400ba0 	.word	0x20400ba0

00402d14 <counting_motor2>:
}

//MOTOR 2

void counting_motor2(void){
	counter_motor2 +=1;
  402d14:	4a02      	ldr	r2, [pc, #8]	; (402d20 <counting_motor2+0xc>)
  402d16:	6813      	ldr	r3, [r2, #0]
  402d18:	3301      	adds	r3, #1
  402d1a:	6013      	str	r3, [r2, #0]
  402d1c:	4770      	bx	lr
  402d1e:	bf00      	nop
  402d20:	20400bb0 	.word	0x20400bb0

00402d24 <counting2_motor2>:
	
}

void counting2_motor2(void){
	counter2_motor2 +=1;
  402d24:	4a02      	ldr	r2, [pc, #8]	; (402d30 <counting2_motor2+0xc>)
  402d26:	6813      	ldr	r3, [r2, #0]
  402d28:	3301      	adds	r3, #1
  402d2a:	6013      	str	r3, [r2, #0]
  402d2c:	4770      	bx	lr
  402d2e:	bf00      	nop
  402d30:	20400ba4 	.word	0x20400ba4

00402d34 <counting_motor3>:
}

//MOTOR 3

void counting_motor3(void){
	counter_motor3 +=1;
  402d34:	4a02      	ldr	r2, [pc, #8]	; (402d40 <counting_motor3+0xc>)
  402d36:	6813      	ldr	r3, [r2, #0]
  402d38:	3301      	adds	r3, #1
  402d3a:	6013      	str	r3, [r2, #0]
  402d3c:	4770      	bx	lr
  402d3e:	bf00      	nop
  402d40:	20400bb4 	.word	0x20400bb4

00402d44 <counting2_motor3>:
	
}

void counting2_motor3(void){
	counter2_motor3 +=1;
  402d44:	4a02      	ldr	r2, [pc, #8]	; (402d50 <counting2_motor3+0xc>)
  402d46:	6813      	ldr	r3, [r2, #0]
  402d48:	3301      	adds	r3, #1
  402d4a:	6013      	str	r3, [r2, #0]
  402d4c:	4770      	bx	lr
  402d4e:	bf00      	nop
  402d50:	20400ba8 	.word	0x20400ba8

00402d54 <usart_serial_putchar>:
{
  402d54:	b570      	push	{r4, r5, r6, lr}
  402d56:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402d58:	4b2a      	ldr	r3, [pc, #168]	; (402e04 <usart_serial_putchar+0xb0>)
  402d5a:	4298      	cmp	r0, r3
  402d5c:	d013      	beq.n	402d86 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402d5e:	4b2a      	ldr	r3, [pc, #168]	; (402e08 <usart_serial_putchar+0xb4>)
  402d60:	4298      	cmp	r0, r3
  402d62:	d019      	beq.n	402d98 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402d64:	4b29      	ldr	r3, [pc, #164]	; (402e0c <usart_serial_putchar+0xb8>)
  402d66:	4298      	cmp	r0, r3
  402d68:	d01f      	beq.n	402daa <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402d6a:	4b29      	ldr	r3, [pc, #164]	; (402e10 <usart_serial_putchar+0xbc>)
  402d6c:	4298      	cmp	r0, r3
  402d6e:	d025      	beq.n	402dbc <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402d70:	4b28      	ldr	r3, [pc, #160]	; (402e14 <usart_serial_putchar+0xc0>)
  402d72:	4298      	cmp	r0, r3
  402d74:	d02b      	beq.n	402dce <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402d76:	4b28      	ldr	r3, [pc, #160]	; (402e18 <usart_serial_putchar+0xc4>)
  402d78:	4298      	cmp	r0, r3
  402d7a:	d031      	beq.n	402de0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402d7c:	4b27      	ldr	r3, [pc, #156]	; (402e1c <usart_serial_putchar+0xc8>)
  402d7e:	4298      	cmp	r0, r3
  402d80:	d037      	beq.n	402df2 <usart_serial_putchar+0x9e>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  402d82:	2000      	movs	r0, #0
}
  402d84:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402d86:	461e      	mov	r6, r3
  402d88:	4d25      	ldr	r5, [pc, #148]	; (402e20 <usart_serial_putchar+0xcc>)
  402d8a:	4621      	mov	r1, r4
  402d8c:	4630      	mov	r0, r6
  402d8e:	47a8      	blx	r5
  402d90:	2800      	cmp	r0, #0
  402d92:	d1fa      	bne.n	402d8a <usart_serial_putchar+0x36>
		return 1;
  402d94:	2001      	movs	r0, #1
  402d96:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402d98:	461e      	mov	r6, r3
  402d9a:	4d21      	ldr	r5, [pc, #132]	; (402e20 <usart_serial_putchar+0xcc>)
  402d9c:	4621      	mov	r1, r4
  402d9e:	4630      	mov	r0, r6
  402da0:	47a8      	blx	r5
  402da2:	2800      	cmp	r0, #0
  402da4:	d1fa      	bne.n	402d9c <usart_serial_putchar+0x48>
		return 1;
  402da6:	2001      	movs	r0, #1
  402da8:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402daa:	461e      	mov	r6, r3
  402dac:	4d1c      	ldr	r5, [pc, #112]	; (402e20 <usart_serial_putchar+0xcc>)
  402dae:	4621      	mov	r1, r4
  402db0:	4630      	mov	r0, r6
  402db2:	47a8      	blx	r5
  402db4:	2800      	cmp	r0, #0
  402db6:	d1fa      	bne.n	402dae <usart_serial_putchar+0x5a>
		return 1;
  402db8:	2001      	movs	r0, #1
  402dba:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402dbc:	461e      	mov	r6, r3
  402dbe:	4d18      	ldr	r5, [pc, #96]	; (402e20 <usart_serial_putchar+0xcc>)
  402dc0:	4621      	mov	r1, r4
  402dc2:	4630      	mov	r0, r6
  402dc4:	47a8      	blx	r5
  402dc6:	2800      	cmp	r0, #0
  402dc8:	d1fa      	bne.n	402dc0 <usart_serial_putchar+0x6c>
		return 1;
  402dca:	2001      	movs	r0, #1
  402dcc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402dce:	461e      	mov	r6, r3
  402dd0:	4d14      	ldr	r5, [pc, #80]	; (402e24 <usart_serial_putchar+0xd0>)
  402dd2:	4621      	mov	r1, r4
  402dd4:	4630      	mov	r0, r6
  402dd6:	47a8      	blx	r5
  402dd8:	2800      	cmp	r0, #0
  402dda:	d1fa      	bne.n	402dd2 <usart_serial_putchar+0x7e>
		return 1;
  402ddc:	2001      	movs	r0, #1
  402dde:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402de0:	461e      	mov	r6, r3
  402de2:	4d10      	ldr	r5, [pc, #64]	; (402e24 <usart_serial_putchar+0xd0>)
  402de4:	4621      	mov	r1, r4
  402de6:	4630      	mov	r0, r6
  402de8:	47a8      	blx	r5
  402dea:	2800      	cmp	r0, #0
  402dec:	d1fa      	bne.n	402de4 <usart_serial_putchar+0x90>
		return 1;
  402dee:	2001      	movs	r0, #1
  402df0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402df2:	461e      	mov	r6, r3
  402df4:	4d0b      	ldr	r5, [pc, #44]	; (402e24 <usart_serial_putchar+0xd0>)
  402df6:	4621      	mov	r1, r4
  402df8:	4630      	mov	r0, r6
  402dfa:	47a8      	blx	r5
  402dfc:	2800      	cmp	r0, #0
  402dfe:	d1fa      	bne.n	402df6 <usart_serial_putchar+0xa2>
		return 1;
  402e00:	2001      	movs	r0, #1
  402e02:	bd70      	pop	{r4, r5, r6, pc}
  402e04:	400e0800 	.word	0x400e0800
  402e08:	400e0a00 	.word	0x400e0a00
  402e0c:	400e1a00 	.word	0x400e1a00
  402e10:	400e1c00 	.word	0x400e1c00
  402e14:	40024000 	.word	0x40024000
  402e18:	40028000 	.word	0x40028000
  402e1c:	4002c000 	.word	0x4002c000
  402e20:	00400bd3 	.word	0x00400bd3
  402e24:	00400cdd 	.word	0x00400cdd

00402e28 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402e28:	b5f0      	push	{r4, r5, r6, r7, lr}
  402e2a:	b083      	sub	sp, #12
  402e2c:	4605      	mov	r5, r0
  402e2e:	460c      	mov	r4, r1
	uint32_t val = 0;
  402e30:	2300      	movs	r3, #0
  402e32:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402e34:	4b2a      	ldr	r3, [pc, #168]	; (402ee0 <usart_serial_getchar+0xb8>)
  402e36:	4298      	cmp	r0, r3
  402e38:	d013      	beq.n	402e62 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402e3a:	4b2a      	ldr	r3, [pc, #168]	; (402ee4 <usart_serial_getchar+0xbc>)
  402e3c:	4298      	cmp	r0, r3
  402e3e:	d018      	beq.n	402e72 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402e40:	4b29      	ldr	r3, [pc, #164]	; (402ee8 <usart_serial_getchar+0xc0>)
  402e42:	4298      	cmp	r0, r3
  402e44:	d01d      	beq.n	402e82 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402e46:	4b29      	ldr	r3, [pc, #164]	; (402eec <usart_serial_getchar+0xc4>)
  402e48:	429d      	cmp	r5, r3
  402e4a:	d022      	beq.n	402e92 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402e4c:	4b28      	ldr	r3, [pc, #160]	; (402ef0 <usart_serial_getchar+0xc8>)
  402e4e:	429d      	cmp	r5, r3
  402e50:	d027      	beq.n	402ea2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402e52:	4b28      	ldr	r3, [pc, #160]	; (402ef4 <usart_serial_getchar+0xcc>)
  402e54:	429d      	cmp	r5, r3
  402e56:	d02e      	beq.n	402eb6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402e58:	4b27      	ldr	r3, [pc, #156]	; (402ef8 <usart_serial_getchar+0xd0>)
  402e5a:	429d      	cmp	r5, r3
  402e5c:	d035      	beq.n	402eca <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402e5e:	b003      	add	sp, #12
  402e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402e62:	461f      	mov	r7, r3
  402e64:	4e25      	ldr	r6, [pc, #148]	; (402efc <usart_serial_getchar+0xd4>)
  402e66:	4621      	mov	r1, r4
  402e68:	4638      	mov	r0, r7
  402e6a:	47b0      	blx	r6
  402e6c:	2800      	cmp	r0, #0
  402e6e:	d1fa      	bne.n	402e66 <usart_serial_getchar+0x3e>
  402e70:	e7e9      	b.n	402e46 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402e72:	461f      	mov	r7, r3
  402e74:	4e21      	ldr	r6, [pc, #132]	; (402efc <usart_serial_getchar+0xd4>)
  402e76:	4621      	mov	r1, r4
  402e78:	4638      	mov	r0, r7
  402e7a:	47b0      	blx	r6
  402e7c:	2800      	cmp	r0, #0
  402e7e:	d1fa      	bne.n	402e76 <usart_serial_getchar+0x4e>
  402e80:	e7e4      	b.n	402e4c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402e82:	461f      	mov	r7, r3
  402e84:	4e1d      	ldr	r6, [pc, #116]	; (402efc <usart_serial_getchar+0xd4>)
  402e86:	4621      	mov	r1, r4
  402e88:	4638      	mov	r0, r7
  402e8a:	47b0      	blx	r6
  402e8c:	2800      	cmp	r0, #0
  402e8e:	d1fa      	bne.n	402e86 <usart_serial_getchar+0x5e>
  402e90:	e7df      	b.n	402e52 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402e92:	461f      	mov	r7, r3
  402e94:	4e19      	ldr	r6, [pc, #100]	; (402efc <usart_serial_getchar+0xd4>)
  402e96:	4621      	mov	r1, r4
  402e98:	4638      	mov	r0, r7
  402e9a:	47b0      	blx	r6
  402e9c:	2800      	cmp	r0, #0
  402e9e:	d1fa      	bne.n	402e96 <usart_serial_getchar+0x6e>
  402ea0:	e7da      	b.n	402e58 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402ea2:	461e      	mov	r6, r3
  402ea4:	4d16      	ldr	r5, [pc, #88]	; (402f00 <usart_serial_getchar+0xd8>)
  402ea6:	a901      	add	r1, sp, #4
  402ea8:	4630      	mov	r0, r6
  402eaa:	47a8      	blx	r5
  402eac:	2800      	cmp	r0, #0
  402eae:	d1fa      	bne.n	402ea6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402eb0:	9b01      	ldr	r3, [sp, #4]
  402eb2:	7023      	strb	r3, [r4, #0]
  402eb4:	e7d3      	b.n	402e5e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402eb6:	461e      	mov	r6, r3
  402eb8:	4d11      	ldr	r5, [pc, #68]	; (402f00 <usart_serial_getchar+0xd8>)
  402eba:	a901      	add	r1, sp, #4
  402ebc:	4630      	mov	r0, r6
  402ebe:	47a8      	blx	r5
  402ec0:	2800      	cmp	r0, #0
  402ec2:	d1fa      	bne.n	402eba <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402ec4:	9b01      	ldr	r3, [sp, #4]
  402ec6:	7023      	strb	r3, [r4, #0]
  402ec8:	e7c9      	b.n	402e5e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402eca:	461e      	mov	r6, r3
  402ecc:	4d0c      	ldr	r5, [pc, #48]	; (402f00 <usart_serial_getchar+0xd8>)
  402ece:	a901      	add	r1, sp, #4
  402ed0:	4630      	mov	r0, r6
  402ed2:	47a8      	blx	r5
  402ed4:	2800      	cmp	r0, #0
  402ed6:	d1fa      	bne.n	402ece <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402ed8:	9b01      	ldr	r3, [sp, #4]
  402eda:	7023      	strb	r3, [r4, #0]
}
  402edc:	e7bf      	b.n	402e5e <usart_serial_getchar+0x36>
  402ede:	bf00      	nop
  402ee0:	400e0800 	.word	0x400e0800
  402ee4:	400e0a00 	.word	0x400e0a00
  402ee8:	400e1a00 	.word	0x400e1a00
  402eec:	400e1c00 	.word	0x400e1c00
  402ef0:	40024000 	.word	0x40024000
  402ef4:	40028000 	.word	0x40028000
  402ef8:	4002c000 	.word	0x4002c000
  402efc:	00400be5 	.word	0x00400be5
  402f00:	00400cf3 	.word	0x00400cf3

00402f04 <vApplicationStackOverflowHook>:
{
  402f04:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402f06:	460a      	mov	r2, r1
  402f08:	4601      	mov	r1, r0
  402f0a:	4802      	ldr	r0, [pc, #8]	; (402f14 <vApplicationStackOverflowHook+0x10>)
  402f0c:	4b02      	ldr	r3, [pc, #8]	; (402f18 <vApplicationStackOverflowHook+0x14>)
  402f0e:	4798      	blx	r3
  402f10:	e7fe      	b.n	402f10 <vApplicationStackOverflowHook+0xc>
  402f12:	bf00      	nop
  402f14:	00406fdc 	.word	0x00406fdc
  402f18:	00403d95 	.word	0x00403d95

00402f1c <vApplicationTickHook>:
{
  402f1c:	4770      	bx	lr

00402f1e <vApplicationMallocFailedHook>:
  402f1e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f22:	b672      	cpsid	i
  402f24:	f383 8811 	msr	BASEPRI, r3
  402f28:	f3bf 8f6f 	isb	sy
  402f2c:	f3bf 8f4f 	dsb	sy
  402f30:	b662      	cpsie	i
  402f32:	e7fe      	b.n	402f32 <vApplicationMallocFailedHook+0x14>

00402f34 <PWM0_init>:
void PWM0_init(uint channel, uint duty){
  402f34:	b570      	push	{r4, r5, r6, lr}
  402f36:	b084      	sub	sp, #16
  402f38:	4605      	mov	r5, r0
  402f3a:	460e      	mov	r6, r1
	pmc_enable_periph_clk(ID_PWM0);
  402f3c:	201f      	movs	r0, #31
  402f3e:	4b13      	ldr	r3, [pc, #76]	; (402f8c <PWM0_init+0x58>)
  402f40:	4798      	blx	r3
	pwm_channel_disable(PWM0, PIN_PWM_LED0_CHANNEL);
  402f42:	4c13      	ldr	r4, [pc, #76]	; (402f90 <PWM0_init+0x5c>)
  402f44:	2100      	movs	r1, #0
  402f46:	4620      	mov	r0, r4
  402f48:	4b12      	ldr	r3, [pc, #72]	; (402f94 <PWM0_init+0x60>)
  402f4a:	4798      	blx	r3
	pwm_clock_t clock_setting = {
  402f4c:	4b12      	ldr	r3, [pc, #72]	; (402f98 <PWM0_init+0x64>)
  402f4e:	9301      	str	r3, [sp, #4]
  402f50:	2300      	movs	r3, #0
  402f52:	9302      	str	r3, [sp, #8]
  402f54:	4b11      	ldr	r3, [pc, #68]	; (402f9c <PWM0_init+0x68>)
  402f56:	9303      	str	r3, [sp, #12]
	pwm_init(PWM0, &clock_setting);
  402f58:	a901      	add	r1, sp, #4
  402f5a:	4620      	mov	r0, r4
  402f5c:	4b10      	ldr	r3, [pc, #64]	; (402fa0 <PWM0_init+0x6c>)
  402f5e:	4798      	blx	r3
	g_pwm_channel_led.alignment = PWM_ALIGN_CENTER;
  402f60:	4910      	ldr	r1, [pc, #64]	; (402fa4 <PWM0_init+0x70>)
  402f62:	f44f 7380 	mov.w	r3, #256	; 0x100
  402f66:	810b      	strh	r3, [r1, #8]
	g_pwm_channel_led.polarity = PWM_HIGH;
  402f68:	2301      	movs	r3, #1
  402f6a:	728b      	strb	r3, [r1, #10]
	g_pwm_channel_led.ul_prescaler = PWM_CMR_CPRE_CLKA;
  402f6c:	230b      	movs	r3, #11
  402f6e:	604b      	str	r3, [r1, #4]
	g_pwm_channel_led.ul_period = PERIOD_VALUE;
  402f70:	2364      	movs	r3, #100	; 0x64
  402f72:	610b      	str	r3, [r1, #16]
	g_pwm_channel_led.ul_duty = duty;
  402f74:	60ce      	str	r6, [r1, #12]
	g_pwm_channel_led.channel = channel;
  402f76:	600d      	str	r5, [r1, #0]
	pwm_channel_init(PWM0, &g_pwm_channel_led);
  402f78:	4620      	mov	r0, r4
  402f7a:	4b0b      	ldr	r3, [pc, #44]	; (402fa8 <PWM0_init+0x74>)
  402f7c:	4798      	blx	r3
	pwm_channel_enable(PWM0, channel);
  402f7e:	4629      	mov	r1, r5
  402f80:	4620      	mov	r0, r4
  402f82:	4b0a      	ldr	r3, [pc, #40]	; (402fac <PWM0_init+0x78>)
  402f84:	4798      	blx	r3
}
  402f86:	b004      	add	sp, #16
  402f88:	bd70      	pop	{r4, r5, r6, pc}
  402f8a:	bf00      	nop
  402f8c:	0040094d 	.word	0x0040094d
  402f90:	40020000 	.word	0x40020000
  402f94:	00400bc9 	.word	0x00400bc9
  402f98:	000186a0 	.word	0x000186a0
  402f9c:	08f0d180 	.word	0x08f0d180
  402fa0:	004009f5 	.word	0x004009f5
  402fa4:	20400c54 	.word	0x20400c54
  402fa8:	00400a39 	.word	0x00400a39
  402fac:	00400bbf 	.word	0x00400bbf

00402fb0 <io_init>:
	while(*(pstring + i))
		if(uart_is_tx_empty(USART_COM))
			usart_serial_putchar(USART_COM, *(pstring+i++));
}

void io_init(void){
  402fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402fb4:	b083      	sub	sp, #12

  // Configura led
	pmc_enable_periph_clk(LED_PIO_ID);
  402fb6:	200c      	movs	r0, #12
  402fb8:	4e92      	ldr	r6, [pc, #584]	; (403204 <io_init+0x254>)
  402fba:	47b0      	blx	r6
	pmc_enable_periph_clk(ENC1_ID_motor1);
  402fbc:	200c      	movs	r0, #12
  402fbe:	47b0      	blx	r6
	pmc_enable_periph_clk(ENC2_ID_motor1);
  402fc0:	2010      	movs	r0, #16
  402fc2:	47b0      	blx	r6
	
	pmc_enable_periph_clk(ENC1_ID_motor2);
  402fc4:	2010      	movs	r0, #16
  402fc6:	47b0      	blx	r6
	pmc_enable_periph_clk(ENC2_ID_motor2);
  402fc8:	200a      	movs	r0, #10
  402fca:	47b0      	blx	r6
	
	pmc_enable_periph_clk(ENC1_ID_motor3);
  402fcc:	2010      	movs	r0, #16
  402fce:	47b0      	blx	r6
	pmc_enable_periph_clk(ENC2_ID_motor3);
  402fd0:	200c      	movs	r0, #12
  402fd2:	47b0      	blx	r6
	
	
	pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
  402fd4:	f8df b264 	ldr.w	fp, [pc, #612]	; 40323c <io_init+0x28c>
  402fd8:	2300      	movs	r3, #0
  402fda:	f44f 7280 	mov.w	r2, #256	; 0x100
  402fde:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402fe2:	4658      	mov	r0, fp
  402fe4:	4f88      	ldr	r7, [pc, #544]	; (403208 <io_init+0x258>)
  402fe6:	47b8      	blx	r7
	pio_configure(ENC1_PIO_motor1, PIO_INPUT, ENC1_MASK_motor1, PIO_DEFAULT| PIO_DEBOUNCE);
  402fe8:	2308      	movs	r3, #8
  402fea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  402fee:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402ff2:	4658      	mov	r0, fp
  402ff4:	47b8      	blx	r7
	pio_configure(ENC2_PIO_motor1, PIO_INPUT, ENC2_MASK_motor1, PIO_DEFAULT| PIO_DEBOUNCE);
  402ff6:	4d85      	ldr	r5, [pc, #532]	; (40320c <io_init+0x25c>)
  402ff8:	2308      	movs	r3, #8
  402ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402ffe:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403002:	4628      	mov	r0, r5
  403004:	47b8      	blx	r7
	
	pio_configure(ENC1_PIO_motor2, PIO_INPUT, ENC1_MASK_motor2, PIO_DEFAULT| PIO_DEBOUNCE);
  403006:	2308      	movs	r3, #8
  403008:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40300c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403010:	4628      	mov	r0, r5
  403012:	47b8      	blx	r7
	pio_configure(ENC2_PIO_motor2, PIO_INPUT, ENC2_MASK_motor2, PIO_DEFAULT| PIO_DEBOUNCE);
  403014:	2308      	movs	r3, #8
  403016:	2240      	movs	r2, #64	; 0x40
  403018:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40301c:	487c      	ldr	r0, [pc, #496]	; (403210 <io_init+0x260>)
  40301e:	47b8      	blx	r7
	
	pio_configure(ENC1_PIO_motor3, PIO_INPUT, ENC1_MASK_motor3, PIO_DEFAULT| PIO_DEBOUNCE);
  403020:	2308      	movs	r3, #8
  403022:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  403026:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40302a:	4628      	mov	r0, r5
  40302c:	47b8      	blx	r7
	pio_configure(ENC2_PIO_motor3, PIO_INPUT, ENC2_MASK_motor3, PIO_DEFAULT| PIO_DEBOUNCE);
  40302e:	2308      	movs	r3, #8
  403030:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403034:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403038:	4658      	mov	r0, fp
  40303a:	47b8      	blx	r7
	
	
	
	
	pio_set_output(MOTOR_PIO, MOTOR_PIO_IDX_MASK, 0, 0, 0);
  40303c:	2400      	movs	r4, #0
  40303e:	9400      	str	r4, [sp, #0]
  403040:	4623      	mov	r3, r4
  403042:	4622      	mov	r2, r4
  403044:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  403048:	4628      	mov	r0, r5
  40304a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 403240 <io_init+0x290>
  40304e:	47d0      	blx	sl
	/* led */
	//pmc_enable_periph_clk(LED_PIO_ID);
	//pio_configure(LED_PIO, PIO_OUTPUT_0, LED_IDX_MASK, PIO_DEFAULT);
	pmc_enable_periph_clk(BUT1_PIO_ID);
  403050:	200a      	movs	r0, #10
  403052:	47b0      	blx	r6
	
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403054:	2309      	movs	r3, #9
  403056:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40305a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40305e:	486c      	ldr	r0, [pc, #432]	; (403210 <io_init+0x260>)
  403060:	47b8      	blx	r7
	pio_configure(BUT1_PIO, PIO_INPUT, BUT1_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403062:	2309      	movs	r3, #9
  403064:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403068:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40306c:	4868      	ldr	r0, [pc, #416]	; (403210 <io_init+0x260>)
  40306e:	47b8      	blx	r7
	
	pio_set_input(PIOA, (1u << 0), PIO_DEBOUNCE);
  403070:	2208      	movs	r2, #8
  403072:	2101      	movs	r1, #1
  403074:	4866      	ldr	r0, [pc, #408]	; (403210 <io_init+0x260>)
  403076:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 403244 <io_init+0x294>
  40307a:	47c8      	blx	r9
	pio_set_debounce_filter(PIOA, (1u << 0), 300);
  40307c:	f44f 7296 	mov.w	r2, #300	; 0x12c
  403080:	2101      	movs	r1, #1
  403082:	4863      	ldr	r0, [pc, #396]	; (403210 <io_init+0x260>)
  403084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 403248 <io_init+0x298>
  403088:	47c0      	blx	r8
	
	
	pio_set_input(PIOA, (1u << 1), PIO_DEBOUNCE);
  40308a:	2208      	movs	r2, #8
  40308c:	2102      	movs	r1, #2
  40308e:	4860      	ldr	r0, [pc, #384]	; (403210 <io_init+0x260>)
  403090:	47c8      	blx	r9
	pio_set_debounce_filter(PIOA, (1u << 1), 300);
  403092:	f44f 7296 	mov.w	r2, #300	; 0x12c
  403096:	2102      	movs	r1, #2
  403098:	485d      	ldr	r0, [pc, #372]	; (403210 <io_init+0x260>)
  40309a:	47c0      	blx	r8
	
	
	
	//pmc_enable_periph_clk(BUT1_PIO_ID);
	pio_set_output(PINO1_MOTOR,PINO1_MOTOR_IDX_MASK,0,0,0);
  40309c:	9400      	str	r4, [sp, #0]
  40309e:	4623      	mov	r3, r4
  4030a0:	4622      	mov	r2, r4
  4030a2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4030a6:	4658      	mov	r0, fp
  4030a8:	47d0      	blx	sl
	pio_set_output(PINO2_MOTOR,PINO2_MOTOR_IDX_MASK,0,0,0);
  4030aa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 40324c <io_init+0x29c>
  4030ae:	9400      	str	r4, [sp, #0]
  4030b0:	4623      	mov	r3, r4
  4030b2:	4622      	mov	r2, r4
  4030b4:	2108      	movs	r1, #8
  4030b6:	4648      	mov	r0, r9
  4030b8:	47d0      	blx	sl
	pio_set_output(PINO3_MOTOR,PINO3_MOTOR_IDX_MASK,0,0,0);
  4030ba:	9400      	str	r4, [sp, #0]
  4030bc:	4623      	mov	r3, r4
  4030be:	4622      	mov	r2, r4
  4030c0:	2104      	movs	r1, #4
  4030c2:	4648      	mov	r0, r9
  4030c4:	47d0      	blx	sl
	pio_set_output(PINO4_MOTOR,PINO4_MOTOR_IDX_MASK,0,0,0);
  4030c6:	9400      	str	r4, [sp, #0]
  4030c8:	4623      	mov	r3, r4
  4030ca:	4622      	mov	r2, r4
  4030cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4030d0:	4658      	mov	r0, fp
  4030d2:	47d0      	blx	sl
	
	pio_handler_set(BUT1_PIO,
  4030d4:	4b4f      	ldr	r3, [pc, #316]	; (403214 <io_init+0x264>)
  4030d6:	9300      	str	r3, [sp, #0]
  4030d8:	2350      	movs	r3, #80	; 0x50
  4030da:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4030de:	210a      	movs	r1, #10
  4030e0:	484b      	ldr	r0, [pc, #300]	; (403210 <io_init+0x260>)
  4030e2:	4c4d      	ldr	r4, [pc, #308]	; (403218 <io_init+0x268>)
  4030e4:	47a0      	blx	r4
	PIO_IT_FALL_EDGE,
	but1_callBack);
	
	//MOTOR1
	
	pio_handler_set(ENC1_PIO_motor1,
  4030e6:	4b4d      	ldr	r3, [pc, #308]	; (40321c <io_init+0x26c>)
  4030e8:	9300      	str	r3, [sp, #0]
  4030ea:	2370      	movs	r3, #112	; 0x70
  4030ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4030f0:	210c      	movs	r1, #12
  4030f2:	4658      	mov	r0, fp
  4030f4:	47a0      	blx	r4
	ENC1_ID_motor1,
	ENC1_MASK_motor1,
	PIO_IT_RISE_EDGE,
	counting_motor1);
	
	pio_handler_set(ENC2_PIO_motor1,
  4030f6:	4b4a      	ldr	r3, [pc, #296]	; (403220 <io_init+0x270>)
  4030f8:	9300      	str	r3, [sp, #0]
  4030fa:	2370      	movs	r3, #112	; 0x70
  4030fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403100:	2110      	movs	r1, #16
  403102:	4628      	mov	r0, r5
  403104:	47a0      	blx	r4
	PIO_IT_RISE_EDGE,
	counting2_motor1);
	
	//MOTOR2
	
	pio_handler_set(ENC1_PIO_motor2,
  403106:	4b47      	ldr	r3, [pc, #284]	; (403224 <io_init+0x274>)
  403108:	9300      	str	r3, [sp, #0]
  40310a:	2370      	movs	r3, #112	; 0x70
  40310c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403110:	2110      	movs	r1, #16
  403112:	4628      	mov	r0, r5
  403114:	47a0      	blx	r4
	ENC1_ID_motor2,
	ENC1_MASK_motor2,
	PIO_IT_RISE_EDGE,
	counting_motor2);
	
	pio_handler_set(ENC2_PIO_motor2,
  403116:	4b44      	ldr	r3, [pc, #272]	; (403228 <io_init+0x278>)
  403118:	9300      	str	r3, [sp, #0]
  40311a:	2370      	movs	r3, #112	; 0x70
  40311c:	2240      	movs	r2, #64	; 0x40
  40311e:	210a      	movs	r1, #10
  403120:	483b      	ldr	r0, [pc, #236]	; (403210 <io_init+0x260>)
  403122:	47a0      	blx	r4
	PIO_IT_RISE_EDGE,
	counting2_motor2);
	
	//MOTOR 3
	
	pio_handler_set(ENC1_PIO_motor3,
  403124:	4b41      	ldr	r3, [pc, #260]	; (40322c <io_init+0x27c>)
  403126:	9300      	str	r3, [sp, #0]
  403128:	2370      	movs	r3, #112	; 0x70
  40312a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40312e:	2110      	movs	r1, #16
  403130:	4628      	mov	r0, r5
  403132:	47a0      	blx	r4
	ENC1_ID_motor3,
	ENC1_MASK_motor3,
	PIO_IT_RISE_EDGE,
	counting_motor3);
	
	pio_handler_set(ENC2_PIO_motor3,
  403134:	4b3e      	ldr	r3, [pc, #248]	; (403230 <io_init+0x280>)
  403136:	9300      	str	r3, [sp, #0]
  403138:	2370      	movs	r3, #112	; 0x70
  40313a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40313e:	210c      	movs	r1, #12
  403140:	4658      	mov	r0, fp
  403142:	47a0      	blx	r4
	ENC2_ID_motor3,
	ENC2_MASK_motor3,
	PIO_IT_RISE_EDGE,
	counting2_motor3);
	
	pio_set_debounce_filter(ENC1_PIO_motor1, ENC1_MASK_motor1, 300);
  403144:	f44f 7296 	mov.w	r2, #300	; 0x12c
  403148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40314c:	4658      	mov	r0, fp
  40314e:	47c0      	blx	r8
	pio_set_debounce_filter(ENC2_PIO_motor1, ENC2_MASK_motor1, 300);
  403150:	f44f 7296 	mov.w	r2, #300	; 0x12c
  403154:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403158:	4628      	mov	r0, r5
  40315a:	47c0      	blx	r8
	
	pio_set_debounce_filter(ENC1_PIO_motor2, ENC1_MASK_motor2, 300);
  40315c:	f44f 7296 	mov.w	r2, #300	; 0x12c
  403160:	f44f 6100 	mov.w	r1, #2048	; 0x800
  403164:	4628      	mov	r0, r5
  403166:	47c0      	blx	r8
	pio_set_debounce_filter(ENC2_PIO_motor2, ENC2_MASK_motor2, 300);
  403168:	f44f 7296 	mov.w	r2, #300	; 0x12c
  40316c:	2140      	movs	r1, #64	; 0x40
  40316e:	4828      	ldr	r0, [pc, #160]	; (403210 <io_init+0x260>)
  403170:	47c0      	blx	r8
	
	pio_set_debounce_filter(ENC1_PIO_motor3, ENC1_MASK_motor3, 300);
  403172:	f44f 7296 	mov.w	r2, #300	; 0x12c
  403176:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  40317a:	4628      	mov	r0, r5
  40317c:	47c0      	blx	r8
	pio_set_debounce_filter(ENC2_PIO_motor3, ENC2_MASK_motor3, 300);
  40317e:	f44f 7296 	mov.w	r2, #300	; 0x12c
  403182:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  403186:	4658      	mov	r0, fp
  403188:	47c0      	blx	r8
	
	
	
	pio_enable_interrupt(BUT1_PIO, BUT1_IDX_MASK);
  40318a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40318e:	4820      	ldr	r0, [pc, #128]	; (403210 <io_init+0x260>)
  403190:	4c28      	ldr	r4, [pc, #160]	; (403234 <io_init+0x284>)
  403192:	47a0      	blx	r4
	
	pio_enable_interrupt(ENC1_PIO_motor1, ENC1_MASK_motor1);
  403194:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  403198:	4658      	mov	r0, fp
  40319a:	47a0      	blx	r4
	pio_enable_interrupt(ENC2_PIO_motor1, ENC2_MASK_motor1);
  40319c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4031a0:	4628      	mov	r0, r5
  4031a2:	47a0      	blx	r4
	
	pio_enable_interrupt(ENC1_PIO_motor2, ENC1_MASK_motor2);
  4031a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4031a8:	4628      	mov	r0, r5
  4031aa:	47a0      	blx	r4
	pio_enable_interrupt(ENC2_PIO_motor2, ENC2_MASK_motor2);
  4031ac:	2140      	movs	r1, #64	; 0x40
  4031ae:	4818      	ldr	r0, [pc, #96]	; (403210 <io_init+0x260>)
  4031b0:	47a0      	blx	r4
	
	pio_enable_interrupt(ENC1_PIO_motor3, ENC1_MASK_motor3);
  4031b2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4031b6:	4628      	mov	r0, r5
  4031b8:	47a0      	blx	r4
	pio_enable_interrupt(ENC2_PIO_motor3, ENC2_MASK_motor3);
  4031ba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4031be:	4658      	mov	r0, fp
  4031c0:	47a0      	blx	r4
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4031c2:	4b1d      	ldr	r3, [pc, #116]	; (403238 <io_init+0x288>)
  4031c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4031c8:	601c      	str	r4, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4031ca:	22a0      	movs	r2, #160	; 0xa0
  4031cc:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4031d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  4031d4:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4031d6:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4031da:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4031de:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4031e0:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4031e4:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4031e6:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4031ea:	601c      	str	r4, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4031ec:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4031f0:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4031f2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4031f6:	6018      	str	r0, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4031f8:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	
	NVIC_EnableIRQ(ENC1_ID_motor3);
	NVIC_SetPriority(ENC1_ID_motor3, 5);
	NVIC_EnableIRQ(ENC2_ID_motor3);
	NVIC_SetPriority(ENC2_ID_motor3, 5);
}
  4031fc:	b003      	add	sp, #12
  4031fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403202:	bf00      	nop
  403204:	0040094d 	.word	0x0040094d
  403208:	0040062d 	.word	0x0040062d
  40320c:	400e1400 	.word	0x400e1400
  403210:	400e0e00 	.word	0x400e0e00
  403214:	00402cf1 	.word	0x00402cf1
  403218:	00400759 	.word	0x00400759
  40321c:	00402cf5 	.word	0x00402cf5
  403220:	00402d05 	.word	0x00402d05
  403224:	00402d15 	.word	0x00402d15
  403228:	00402d25 	.word	0x00402d25
  40322c:	00402d35 	.word	0x00402d35
  403230:	00402d45 	.word	0x00402d45
  403234:	004006fb 	.word	0x004006fb
  403238:	e000e100 	.word	0xe000e100
  40323c:	400e1200 	.word	0x400e1200
  403240:	00400603 	.word	0x00400603
  403244:	004005cd 	.word	0x004005cd
  403248:	00400519 	.word	0x00400519
  40324c:	400e1000 	.word	0x400e1000

00403250 <fechando_mm>:

void fechando_mm(){
  403250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	pio_set(PINO4_MOTOR, PINO4_MOTOR_IDX_MASK);
  403254:	4d16      	ldr	r5, [pc, #88]	; (4032b0 <fechando_mm+0x60>)
  403256:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40325a:	4628      	mov	r0, r5
  40325c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 4032c0 <fechando_mm+0x70>
  403260:	47c0      	blx	r8
	vTaskDelay(delay_motor_passo);
  403262:	4f14      	ldr	r7, [pc, #80]	; (4032b4 <fechando_mm+0x64>)
  403264:	6838      	ldr	r0, [r7, #0]
  403266:	4e14      	ldr	r6, [pc, #80]	; (4032b8 <fechando_mm+0x68>)
  403268:	47b0      	blx	r6
	pio_clear(PINO4_MOTOR, PINO4_MOTOR_IDX_MASK);
  40326a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40326e:	4628      	mov	r0, r5
  403270:	4c12      	ldr	r4, [pc, #72]	; (4032bc <fechando_mm+0x6c>)
  403272:	47a0      	blx	r4
	pio_set(PINO3_MOTOR, PINO3_MOTOR_IDX_MASK);
  403274:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4032c4 <fechando_mm+0x74>
  403278:	2104      	movs	r1, #4
  40327a:	4648      	mov	r0, r9
  40327c:	47c0      	blx	r8
	vTaskDelay(delay_motor_passo);
  40327e:	6838      	ldr	r0, [r7, #0]
  403280:	47b0      	blx	r6
	pio_clear(PINO3_MOTOR, PINO3_MOTOR_IDX_MASK);
  403282:	2104      	movs	r1, #4
  403284:	4648      	mov	r0, r9
  403286:	47a0      	blx	r4
	pio_set(PINO2_MOTOR, PINO2_MOTOR_IDX_MASK);
  403288:	2108      	movs	r1, #8
  40328a:	4648      	mov	r0, r9
  40328c:	47c0      	blx	r8
	vTaskDelay(delay_motor_passo);
  40328e:	6838      	ldr	r0, [r7, #0]
  403290:	47b0      	blx	r6
	pio_clear(PINO2_MOTOR, PINO2_MOTOR_IDX_MASK);
  403292:	2108      	movs	r1, #8
  403294:	4648      	mov	r0, r9
  403296:	47a0      	blx	r4
	pio_set(PINO1_MOTOR, PINO1_MOTOR_IDX_MASK);
  403298:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  40329c:	4628      	mov	r0, r5
  40329e:	47c0      	blx	r8
	vTaskDelay(delay_motor_passo);
  4032a0:	6838      	ldr	r0, [r7, #0]
  4032a2:	47b0      	blx	r6
	pio_clear(PINO1_MOTOR, PINO1_MOTOR_IDX_MASK);
  4032a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4032a8:	4628      	mov	r0, r5
  4032aa:	47a0      	blx	r4
  4032ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4032b0:	400e1200 	.word	0x400e1200
  4032b4:	20400018 	.word	0x20400018
  4032b8:	00402291 	.word	0x00402291
  4032bc:	00400537 	.word	0x00400537
  4032c0:	00400533 	.word	0x00400533
  4032c4:	400e1000 	.word	0x400e1000

004032c8 <abrindo_mm>:
}

/////////////////////
void abrindo_mm(){
  4032c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	pio_set(PINO1_MOTOR, PINO1_MOTOR_IDX_MASK);
  4032cc:	4d16      	ldr	r5, [pc, #88]	; (403328 <abrindo_mm+0x60>)
  4032ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4032d2:	4628      	mov	r0, r5
  4032d4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 403338 <abrindo_mm+0x70>
  4032d8:	47c0      	blx	r8
	vTaskDelay(delay_motor_passo);
  4032da:	4f14      	ldr	r7, [pc, #80]	; (40332c <abrindo_mm+0x64>)
  4032dc:	6838      	ldr	r0, [r7, #0]
  4032de:	4e14      	ldr	r6, [pc, #80]	; (403330 <abrindo_mm+0x68>)
  4032e0:	47b0      	blx	r6
	pio_clear(PINO1_MOTOR, PINO1_MOTOR_IDX_MASK);
  4032e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4032e6:	4628      	mov	r0, r5
  4032e8:	4c12      	ldr	r4, [pc, #72]	; (403334 <abrindo_mm+0x6c>)
  4032ea:	47a0      	blx	r4
	pio_set(PINO2_MOTOR, PINO2_MOTOR_IDX_MASK);
  4032ec:	f8df 904c 	ldr.w	r9, [pc, #76]	; 40333c <abrindo_mm+0x74>
  4032f0:	2108      	movs	r1, #8
  4032f2:	4648      	mov	r0, r9
  4032f4:	47c0      	blx	r8
	vTaskDelay(delay_motor_passo);
  4032f6:	6838      	ldr	r0, [r7, #0]
  4032f8:	47b0      	blx	r6
	pio_clear(PINO2_MOTOR, PINO2_MOTOR_IDX_MASK);
  4032fa:	2108      	movs	r1, #8
  4032fc:	4648      	mov	r0, r9
  4032fe:	47a0      	blx	r4
	pio_set(PINO3_MOTOR, PINO3_MOTOR_IDX_MASK);
  403300:	2104      	movs	r1, #4
  403302:	4648      	mov	r0, r9
  403304:	47c0      	blx	r8
	vTaskDelay(delay_motor_passo);
  403306:	6838      	ldr	r0, [r7, #0]
  403308:	47b0      	blx	r6
	pio_clear(PINO3_MOTOR, PINO3_MOTOR_IDX_MASK);
  40330a:	2104      	movs	r1, #4
  40330c:	4648      	mov	r0, r9
  40330e:	47a0      	blx	r4
	pio_set(PINO4_MOTOR, PINO4_MOTOR_IDX_MASK);
  403310:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403314:	4628      	mov	r0, r5
  403316:	47c0      	blx	r8
	vTaskDelay(delay_motor_passo);
  403318:	6838      	ldr	r0, [r7, #0]
  40331a:	47b0      	blx	r6
	pio_clear(PINO4_MOTOR, PINO4_MOTOR_IDX_MASK);
  40331c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  403320:	4628      	mov	r0, r5
  403322:	47a0      	blx	r4
  403324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403328:	400e1200 	.word	0x400e1200
  40332c:	20400018 	.word	0x20400018
  403330:	00402291 	.word	0x00402291
  403334:	00400537 	.word	0x00400537
  403338:	00400533 	.word	0x00400533
  40333c:	400e1000 	.word	0x400e1000

00403340 <task_mm>:
    vTaskDelay( 100);
  }
}

static void task_mm(void *pvParameters)
{
  403340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	
	xSemaphore1 = xSemaphoreCreateBinary();
  403344:	2203      	movs	r2, #3
  403346:	2100      	movs	r1, #0
  403348:	2001      	movs	r0, #1
  40334a:	4b0f      	ldr	r3, [pc, #60]	; (403388 <task_mm+0x48>)
  40334c:	4798      	blx	r3
  40334e:	4b0f      	ldr	r3, [pc, #60]	; (40338c <task_mm+0x4c>)
  403350:	6018      	str	r0, [r3, #0]
	while(1) {
		if( xSemaphoreTake(xSemaphore1, ( TickType_t ) 50) == pdTRUE ){
  403352:	4698      	mov	r8, r3
  403354:	4f0e      	ldr	r7, [pc, #56]	; (403390 <task_mm+0x50>)
			for (int i = 0; i<50; i++){
				abrindo_mm();
  403356:	4e0f      	ldr	r6, [pc, #60]	; (403394 <task_mm+0x54>)
		if( xSemaphoreTake(xSemaphore1, ( TickType_t ) 50) == pdTRUE ){
  403358:	2400      	movs	r4, #0
  40335a:	4623      	mov	r3, r4
  40335c:	2232      	movs	r2, #50	; 0x32
  40335e:	4621      	mov	r1, r4
  403360:	f8d8 0000 	ldr.w	r0, [r8]
  403364:	47b8      	blx	r7
  403366:	2801      	cmp	r0, #1
  403368:	d1f7      	bne.n	40335a <task_mm+0x1a>
  40336a:	2432      	movs	r4, #50	; 0x32
				abrindo_mm();
  40336c:	47b0      	blx	r6
			for (int i = 0; i<50; i++){
  40336e:	3c01      	subs	r4, #1
  403370:	d1fc      	bne.n	40336c <task_mm+0x2c>
			}
			vTaskDelay(delay_mm);
  403372:	4b09      	ldr	r3, [pc, #36]	; (403398 <task_mm+0x58>)
  403374:	6818      	ldr	r0, [r3, #0]
  403376:	4b09      	ldr	r3, [pc, #36]	; (40339c <task_mm+0x5c>)
  403378:	4798      	blx	r3
  40337a:	2432      	movs	r4, #50	; 0x32
			for (int j = 0; j<50; j++){
				fechando_mm();
  40337c:	4d08      	ldr	r5, [pc, #32]	; (4033a0 <task_mm+0x60>)
  40337e:	47a8      	blx	r5
			for (int j = 0; j<50; j++){
  403380:	3c01      	subs	r4, #1
  403382:	d1fc      	bne.n	40337e <task_mm+0x3e>
  403384:	e7e8      	b.n	403358 <task_mm+0x18>
  403386:	bf00      	nop
  403388:	00401629 	.word	0x00401629
  40338c:	20400c90 	.word	0x20400c90
  403390:	00401a69 	.word	0x00401a69
  403394:	004032c9 	.word	0x004032c9
  403398:	20400014 	.word	0x20400014
  40339c:	00402291 	.word	0x00402291
  4033a0:	00403251 	.word	0x00403251

004033a4 <usart_put_string>:
void usart_put_string(Usart *usart, char str[]) {
  4033a4:	b538      	push	{r3, r4, r5, lr}
  4033a6:	4605      	mov	r5, r0
  4033a8:	460c      	mov	r4, r1
  usart_serial_write_packet(usart, str, strlen(str));
  4033aa:	4608      	mov	r0, r1
  4033ac:	4b03      	ldr	r3, [pc, #12]	; (4033bc <usart_put_string+0x18>)
  4033ae:	4798      	blx	r3
  4033b0:	4602      	mov	r2, r0
  4033b2:	4621      	mov	r1, r4
  4033b4:	4628      	mov	r0, r5
  4033b6:	4b02      	ldr	r3, [pc, #8]	; (4033c0 <usart_put_string+0x1c>)
  4033b8:	4798      	blx	r3
  4033ba:	bd38      	pop	{r3, r4, r5, pc}
  4033bc:	00404801 	.word	0x00404801
  4033c0:	0040021d 	.word	0x0040021d

004033c4 <usart_get_string>:
int usart_get_string(Usart *usart, char buffer[], int bufferlen, uint timeout_ms) {
  4033c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4033c8:	b082      	sub	sp, #8
  4033ca:	4689      	mov	r9, r1
  while( (timecounter > 0) && (counter < bufferlen - 1)) {
  4033cc:	b1c3      	cbz	r3, 403400 <usart_get_string+0x3c>
  4033ce:	4680      	mov	r8, r0
  4033d0:	461d      	mov	r5, r3
  4033d2:	1e56      	subs	r6, r2, #1
  4033d4:	d01c      	beq.n	403410 <usart_get_string+0x4c>
  4033d6:	2400      	movs	r4, #0
    if(usart_read(usart, &rx) == 0) {
  4033d8:	4f0e      	ldr	r7, [pc, #56]	; (403414 <usart_get_string+0x50>)
      vTaskDelay(1);
  4033da:	f8df a03c 	ldr.w	sl, [pc, #60]	; 403418 <usart_get_string+0x54>
  4033de:	e005      	b.n	4033ec <usart_get_string+0x28>
      timecounter--;
  4033e0:	3d01      	subs	r5, #1
      vTaskDelay(1);
  4033e2:	2001      	movs	r0, #1
  4033e4:	47d0      	blx	sl
  while( (timecounter > 0) && (counter < bufferlen - 1)) {
  4033e6:	b165      	cbz	r5, 403402 <usart_get_string+0x3e>
  4033e8:	42b4      	cmp	r4, r6
  4033ea:	d20a      	bcs.n	403402 <usart_get_string+0x3e>
    if(usart_read(usart, &rx) == 0) {
  4033ec:	a901      	add	r1, sp, #4
  4033ee:	4640      	mov	r0, r8
  4033f0:	47b8      	blx	r7
  4033f2:	2800      	cmp	r0, #0
  4033f4:	d1f4      	bne.n	4033e0 <usart_get_string+0x1c>
      buffer[counter++] = rx;
  4033f6:	9b01      	ldr	r3, [sp, #4]
  4033f8:	f809 3004 	strb.w	r3, [r9, r4]
  4033fc:	3401      	adds	r4, #1
  4033fe:	e7f2      	b.n	4033e6 <usart_get_string+0x22>
  uint32_t counter = 0;
  403400:	2400      	movs	r4, #0
  buffer[counter] = 0x00;
  403402:	2300      	movs	r3, #0
  403404:	f809 3004 	strb.w	r3, [r9, r4]
}
  403408:	4620      	mov	r0, r4
  40340a:	b002      	add	sp, #8
  40340c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  uint32_t counter = 0;
  403410:	4634      	mov	r4, r6
  403412:	e7f6      	b.n	403402 <usart_get_string+0x3e>
  403414:	00400cf3 	.word	0x00400cf3
  403418:	00402291 	.word	0x00402291

0040341c <usart_send_command>:
void usart_send_command(Usart *usart, char buffer_rx[], int bufferlen, char buffer_tx[], int timeout) {
  40341c:	b570      	push	{r4, r5, r6, lr}
  40341e:	4604      	mov	r4, r0
  403420:	460d      	mov	r5, r1
  403422:	4616      	mov	r6, r2
  usart_put_string(usart, buffer_tx);
  403424:	4619      	mov	r1, r3
  403426:	4b04      	ldr	r3, [pc, #16]	; (403438 <usart_send_command+0x1c>)
  403428:	4798      	blx	r3
  usart_get_string(usart, buffer_rx, bufferlen, timeout);
  40342a:	9b04      	ldr	r3, [sp, #16]
  40342c:	4632      	mov	r2, r6
  40342e:	4629      	mov	r1, r5
  403430:	4620      	mov	r0, r4
  403432:	4c02      	ldr	r4, [pc, #8]	; (40343c <usart_send_command+0x20>)
  403434:	47a0      	blx	r4
  403436:	bd70      	pop	{r4, r5, r6, pc}
  403438:	004033a5 	.word	0x004033a5
  40343c:	004033c5 	.word	0x004033c5

00403440 <hc05_config_server>:
void hc05_config_server(void) {
  403440:	b5f0      	push	{r4, r5, r6, r7, lr}
  403442:	b087      	sub	sp, #28
  403444:	200d      	movs	r0, #13
  403446:	4c17      	ldr	r4, [pc, #92]	; (4034a4 <hc05_config_server+0x64>)
  403448:	47a0      	blx	r4
	usart_settings.baudrate = opt->baudrate;
  40344a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  40344e:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  403450:	23c0      	movs	r3, #192	; 0xc0
  403452:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  403454:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403458:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  40345a:	2500      	movs	r5, #0
  40345c:	9503      	str	r5, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40345e:	9504      	str	r5, [sp, #16]
  403460:	200d      	movs	r0, #13
  403462:	47a0      	blx	r4
		usart_init_rs232(p_usart, &usart_settings,
  403464:	4c10      	ldr	r4, [pc, #64]	; (4034a8 <hc05_config_server+0x68>)
  403466:	4a11      	ldr	r2, [pc, #68]	; (4034ac <hc05_config_server+0x6c>)
  403468:	4669      	mov	r1, sp
  40346a:	4620      	mov	r0, r4
  40346c:	4b10      	ldr	r3, [pc, #64]	; (4034b0 <hc05_config_server+0x70>)
  40346e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403470:	4620      	mov	r0, r4
  403472:	4f10      	ldr	r7, [pc, #64]	; (4034b4 <hc05_config_server+0x74>)
  403474:	47b8      	blx	r7
		usart_enable_rx(p_usart);
  403476:	4620      	mov	r0, r4
  403478:	4e0f      	ldr	r6, [pc, #60]	; (4034b8 <hc05_config_server+0x78>)
  40347a:	47b0      	blx	r6
  usart_enable_tx(USART_COM);
  40347c:	4620      	mov	r0, r4
  40347e:	47b8      	blx	r7
  usart_enable_rx(USART_COM);
  403480:	4620      	mov	r0, r4
  403482:	47b0      	blx	r6
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 0), PIO_DEFAULT);
  403484:	4e0d      	ldr	r6, [pc, #52]	; (4034bc <hc05_config_server+0x7c>)
  403486:	462b      	mov	r3, r5
  403488:	2201      	movs	r2, #1
  40348a:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40348e:	4630      	mov	r0, r6
  403490:	4c0b      	ldr	r4, [pc, #44]	; (4034c0 <hc05_config_server+0x80>)
  403492:	47a0      	blx	r4
  pio_configure(PIOB, PIO_PERIPH_C, (1 << 1), PIO_DEFAULT);
  403494:	462b      	mov	r3, r5
  403496:	2202      	movs	r2, #2
  403498:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40349c:	4630      	mov	r0, r6
  40349e:	47a0      	blx	r4
}
  4034a0:	b007      	add	sp, #28
  4034a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4034a4:	0040094d 	.word	0x0040094d
  4034a8:	40024000 	.word	0x40024000
  4034ac:	08f0d180 	.word	0x08f0d180
  4034b0:	00400c7d 	.word	0x00400c7d
  4034b4:	00400cd1 	.word	0x00400cd1
  4034b8:	00400cd7 	.word	0x00400cd7
  4034bc:	400e1000 	.word	0x400e1000
  4034c0:	0040062d 	.word	0x0040062d

004034c4 <hc05_server_init>:
int hc05_server_init(void) {
  4034c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4034c6:	b0a3      	sub	sp, #140	; 0x8c
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100); printf("AT\n");
  4034c8:	4f15      	ldr	r7, [pc, #84]	; (403520 <hc05_server_init+0x5c>)
  4034ca:	4d16      	ldr	r5, [pc, #88]	; (403524 <hc05_server_init+0x60>)
  4034cc:	2664      	movs	r6, #100	; 0x64
  4034ce:	9600      	str	r6, [sp, #0]
  4034d0:	463b      	mov	r3, r7
  4034d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4034d6:	a902      	add	r1, sp, #8
  4034d8:	4628      	mov	r0, r5
  4034da:	4c13      	ldr	r4, [pc, #76]	; (403528 <hc05_server_init+0x64>)
  4034dc:	47a0      	blx	r4
  4034de:	4813      	ldr	r0, [pc, #76]	; (40352c <hc05_server_init+0x68>)
  4034e0:	4b13      	ldr	r3, [pc, #76]	; (403530 <hc05_server_init+0x6c>)
  4034e2:	4798      	blx	r3
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100);
  4034e4:	9600      	str	r6, [sp, #0]
  4034e6:	463b      	mov	r3, r7
  4034e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4034ec:	a902      	add	r1, sp, #8
  4034ee:	4628      	mov	r0, r5
  4034f0:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+NAMECACANIQUELZIKA", 100);
  4034f2:	9600      	str	r6, [sp, #0]
  4034f4:	4b0f      	ldr	r3, [pc, #60]	; (403534 <hc05_server_init+0x70>)
  4034f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  4034fa:	a902      	add	r1, sp, #8
  4034fc:	4628      	mov	r0, r5
  4034fe:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT", 100);
  403500:	9600      	str	r6, [sp, #0]
  403502:	463b      	mov	r3, r7
  403504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403508:	a902      	add	r1, sp, #8
  40350a:	4628      	mov	r0, r5
  40350c:	47a0      	blx	r4
  usart_send_command(USART0, buffer_rx, 1000, "AT+PIN0000", 100);
  40350e:	9600      	str	r6, [sp, #0]
  403510:	4b09      	ldr	r3, [pc, #36]	; (403538 <hc05_server_init+0x74>)
  403512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  403516:	a902      	add	r1, sp, #8
  403518:	4628      	mov	r0, r5
  40351a:	47a0      	blx	r4
}
  40351c:	b023      	add	sp, #140	; 0x8c
  40351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  403520:	00406f14 	.word	0x00406f14
  403524:	40024000 	.word	0x40024000
  403528:	0040341d 	.word	0x0040341d
  40352c:	00406f18 	.word	0x00406f18
  403530:	00403d95 	.word	0x00403d95
  403534:	00406f1c 	.word	0x00406f1c
  403538:	00406f34 	.word	0x00406f34

0040353c <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask){
  40353c:	b538      	push	{r3, r4, r5, lr}
  40353e:	4604      	mov	r4, r0
  403540:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask)){
  403542:	4b06      	ldr	r3, [pc, #24]	; (40355c <pin_toggle+0x20>)
  403544:	4798      	blx	r3
  403546:	b920      	cbnz	r0, 403552 <pin_toggle+0x16>
		pio_set(pio,mask);
  403548:	4629      	mov	r1, r5
  40354a:	4620      	mov	r0, r4
  40354c:	4b04      	ldr	r3, [pc, #16]	; (403560 <pin_toggle+0x24>)
  40354e:	4798      	blx	r3
  403550:	bd38      	pop	{r3, r4, r5, pc}
		pio_clear(pio, mask);
  403552:	4629      	mov	r1, r5
  403554:	4620      	mov	r0, r4
  403556:	4b03      	ldr	r3, [pc, #12]	; (403564 <pin_toggle+0x28>)
  403558:	4798      	blx	r3
  40355a:	bd38      	pop	{r3, r4, r5, pc}
  40355c:	004006bd 	.word	0x004006bd
  403560:	00400533 	.word	0x00400533
  403564:	00400537 	.word	0x00400537

00403568 <ficha_comprada>:
void ficha_comprada(){
  403568:	b538      	push	{r3, r4, r5, lr}
	pin_toggle(LED_PIO, LED_IDX_MASK);
  40356a:	4d07      	ldr	r5, [pc, #28]	; (403588 <ficha_comprada+0x20>)
  40356c:	f44f 7180 	mov.w	r1, #256	; 0x100
  403570:	4628      	mov	r0, r5
  403572:	4c06      	ldr	r4, [pc, #24]	; (40358c <ficha_comprada+0x24>)
  403574:	47a0      	blx	r4
	delay_ms(200);
  403576:	4806      	ldr	r0, [pc, #24]	; (403590 <ficha_comprada+0x28>)
  403578:	4b06      	ldr	r3, [pc, #24]	; (403594 <ficha_comprada+0x2c>)
  40357a:	4798      	blx	r3
	pin_toggle(LED_PIO, LED_IDX_MASK);
  40357c:	f44f 7180 	mov.w	r1, #256	; 0x100
  403580:	4628      	mov	r0, r5
  403582:	47a0      	blx	r4
  403584:	bd38      	pop	{r3, r4, r5, pc}
  403586:	bf00      	nop
  403588:	400e1200 	.word	0x400e1200
  40358c:	0040353d 	.word	0x0040353d
  403590:	009a5649 	.word	0x009a5649
  403594:	20400001 	.word	0x20400001

00403598 <jogada_autorizada>:
void jogada_autorizada(){
  403598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40359a:	240f      	movs	r4, #15
		pin_toggle(LED_PIO, LED_IDX_MASK);
  40359c:	4f09      	ldr	r7, [pc, #36]	; (4035c4 <jogada_autorizada+0x2c>)
  40359e:	4e0a      	ldr	r6, [pc, #40]	; (4035c8 <jogada_autorizada+0x30>)
		delay_ms(40);
  4035a0:	4d0a      	ldr	r5, [pc, #40]	; (4035cc <jogada_autorizada+0x34>)
		pin_toggle(LED_PIO, LED_IDX_MASK);
  4035a2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4035a6:	4638      	mov	r0, r7
  4035a8:	47b0      	blx	r6
		delay_ms(40);
  4035aa:	4628      	mov	r0, r5
  4035ac:	4b08      	ldr	r3, [pc, #32]	; (4035d0 <jogada_autorizada+0x38>)
  4035ae:	4798      	blx	r3
	while(i>0){
  4035b0:	3c01      	subs	r4, #1
  4035b2:	d1f6      	bne.n	4035a2 <jogada_autorizada+0xa>
	xHigherPriorityTaskWoken = pdFALSE; 
  4035b4:	4907      	ldr	r1, [pc, #28]	; (4035d4 <jogada_autorizada+0x3c>)
  4035b6:	2300      	movs	r3, #0
  4035b8:	600b      	str	r3, [r1, #0]
	xSemaphoreGiveFromISR(StartGame, &xHigherPriorityTaskWoken);
  4035ba:	4b07      	ldr	r3, [pc, #28]	; (4035d8 <jogada_autorizada+0x40>)
  4035bc:	6818      	ldr	r0, [r3, #0]
  4035be:	4b07      	ldr	r3, [pc, #28]	; (4035dc <jogada_autorizada+0x44>)
  4035c0:	4798      	blx	r3
  4035c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4035c4:	400e1200 	.word	0x400e1200
  4035c8:	0040353d 	.word	0x0040353d
  4035cc:	001ede0f 	.word	0x001ede0f
  4035d0:	20400001 	.word	0x20400001
  4035d4:	20400bc4 	.word	0x20400bc4
  4035d8:	20400c98 	.word	0x20400c98
  4035dc:	00401989 	.word	0x00401989

004035e0 <task_bluetooth>:
void task_bluetooth(void){
  4035e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4035e4:	f5ad 6d80 	sub.w	sp, sp, #1024	; 0x400
  printf("Bluetooth initializing \n");
  4035e8:	4823      	ldr	r0, [pc, #140]	; (403678 <task_bluetooth+0x98>)
  4035ea:	4b24      	ldr	r3, [pc, #144]	; (40367c <task_bluetooth+0x9c>)
  4035ec:	4798      	blx	r3
  hc05_config_server();
  4035ee:	4b24      	ldr	r3, [pc, #144]	; (403680 <task_bluetooth+0xa0>)
  4035f0:	4798      	blx	r3
  hc05_server_init();
  4035f2:	4b24      	ldr	r3, [pc, #144]	; (403684 <task_bluetooth+0xa4>)
  4035f4:	4798      	blx	r3
	usart_get_string(USART0, buffer, 1024,1000);
  4035f6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 4036a0 <task_bluetooth+0xc0>
		usart_put_string(USART0, "3\n");
  4035fa:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 4036a4 <task_bluetooth+0xc4>
		usart_put_string(USART0, "4\n");
  4035fe:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 4036a8 <task_bluetooth+0xc8>
  403602:	e02d      	b.n	403660 <task_bluetooth+0x80>
	++count;
  403604:	3401      	adds	r4, #1
	for (char* s = (char*)str; (s = strstr(s, substr)); s += increment)
  403606:	1c58      	adds	r0, r3, #1
  403608:	4629      	mov	r1, r5
  40360a:	47b0      	blx	r6
  40360c:	4603      	mov	r3, r0
  40360e:	2800      	cmp	r0, #0
  403610:	d1f8      	bne.n	403604 <task_bluetooth+0x24>
	for(int i = 0;i < count_substr(buffer,"1",0);i++){
  403612:	42a7      	cmp	r7, r4
  403614:	da0a      	bge.n	40362c <task_bluetooth+0x4c>
		usart_put_string(USART0, "3\n");
  403616:	4649      	mov	r1, r9
  403618:	4640      	mov	r0, r8
  40361a:	4b1b      	ldr	r3, [pc, #108]	; (403688 <task_bluetooth+0xa8>)
  40361c:	4798      	blx	r3
		ficha_comprada();
  40361e:	4b1b      	ldr	r3, [pc, #108]	; (40368c <task_bluetooth+0xac>)
  403620:	4798      	blx	r3
	for(int i = 0;i < count_substr(buffer,"1",0);i++){
  403622:	3701      	adds	r7, #1
	for (char* s = (char*)str; (s = strstr(s, substr)); s += increment)
  403624:	4668      	mov	r0, sp
	int count = 0;
  403626:	2400      	movs	r4, #0
	for (char* s = (char*)str; (s = strstr(s, substr)); s += increment)
  403628:	2531      	movs	r5, #49	; 0x31
  40362a:	e7ed      	b.n	403608 <task_bluetooth+0x28>
  40362c:	2700      	movs	r7, #0
  40362e:	4e18      	ldr	r6, [pc, #96]	; (403690 <task_bluetooth+0xb0>)
  403630:	e00f      	b.n	403652 <task_bluetooth+0x72>
	++count;
  403632:	3401      	adds	r4, #1
	for (char* s = (char*)str; (s = strstr(s, substr)); s += increment)
  403634:	1c58      	adds	r0, r3, #1
  403636:	4629      	mov	r1, r5
  403638:	47b0      	blx	r6
  40363a:	4603      	mov	r3, r0
  40363c:	2800      	cmp	r0, #0
  40363e:	d1f8      	bne.n	403632 <task_bluetooth+0x52>
	for(int i = 0;i < count_substr(buffer,"2",0);i++){
  403640:	42a7      	cmp	r7, r4
  403642:	da0a      	bge.n	40365a <task_bluetooth+0x7a>
		usart_put_string(USART0, "4\n");
  403644:	4651      	mov	r1, sl
  403646:	4640      	mov	r0, r8
  403648:	4b0f      	ldr	r3, [pc, #60]	; (403688 <task_bluetooth+0xa8>)
  40364a:	4798      	blx	r3
		jogada_autorizada();
  40364c:	4b11      	ldr	r3, [pc, #68]	; (403694 <task_bluetooth+0xb4>)
  40364e:	4798      	blx	r3
	for(int i = 0;i < count_substr(buffer,"2",0);i++){
  403650:	3701      	adds	r7, #1
	for (char* s = (char*)str; (s = strstr(s, substr)); s += increment)
  403652:	4668      	mov	r0, sp
	int count = 0;
  403654:	2400      	movs	r4, #0
	for (char* s = (char*)str; (s = strstr(s, substr)); s += increment)
  403656:	2532      	movs	r5, #50	; 0x32
  403658:	e7ed      	b.n	403636 <task_bluetooth+0x56>
    vTaskDelay( 100);
  40365a:	2064      	movs	r0, #100	; 0x64
  40365c:	4b0e      	ldr	r3, [pc, #56]	; (403698 <task_bluetooth+0xb8>)
  40365e:	4798      	blx	r3
	usart_get_string(USART0, buffer, 1024,1000);
  403660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  403664:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403668:	4669      	mov	r1, sp
  40366a:	4640      	mov	r0, r8
  40366c:	4c0b      	ldr	r4, [pc, #44]	; (40369c <task_bluetooth+0xbc>)
  40366e:	47a0      	blx	r4
	for(int i = 0;i < count_substr(buffer,"1",0);i++){
  403670:	2700      	movs	r7, #0
	for (char* s = (char*)str; (s = strstr(s, substr)); s += increment)
  403672:	4e07      	ldr	r6, [pc, #28]	; (403690 <task_bluetooth+0xb0>)
	for(int i = 0;i < count_substr(buffer,"1",0);i++){
  403674:	e7d6      	b.n	403624 <task_bluetooth+0x44>
  403676:	bf00      	nop
  403678:	00406f74 	.word	0x00406f74
  40367c:	00403d95 	.word	0x00403d95
  403680:	00403441 	.word	0x00403441
  403684:	004034c5 	.word	0x004034c5
  403688:	004033a5 	.word	0x004033a5
  40368c:	00403569 	.word	0x00403569
  403690:	004046e9 	.word	0x004046e9
  403694:	00403599 	.word	0x00403599
  403698:	00402291 	.word	0x00402291
  40369c:	004033c5 	.word	0x004033c5
  4036a0:	40024000 	.word	0x40024000
  4036a4:	00406f90 	.word	0x00406f90
  4036a8:	00406f94 	.word	0x00406f94

004036ac <check_quadrante>:
void check_quadrante(){
  4036ac:	b538      	push	{r3, r4, r5, lr}
	printf("MOTOR 1 ENC1 :%u\n",counter_motor1);
  4036ae:	4c9a      	ldr	r4, [pc, #616]	; (403918 <check_quadrante+0x26c>)
  4036b0:	6821      	ldr	r1, [r4, #0]
  4036b2:	489a      	ldr	r0, [pc, #616]	; (40391c <check_quadrante+0x270>)
  4036b4:	4d9a      	ldr	r5, [pc, #616]	; (403920 <check_quadrante+0x274>)
  4036b6:	47a8      	blx	r5
	printf("MOTOR 1 ENC2 :%u\n",counter2_motor1);
  4036b8:	4b9a      	ldr	r3, [pc, #616]	; (403924 <check_quadrante+0x278>)
  4036ba:	6819      	ldr	r1, [r3, #0]
  4036bc:	489a      	ldr	r0, [pc, #616]	; (403928 <check_quadrante+0x27c>)
  4036be:	47a8      	blx	r5
	counter_motor1 = (counter_motor1) % 8;
  4036c0:	6823      	ldr	r3, [r4, #0]
  4036c2:	f003 0307 	and.w	r3, r3, #7
  4036c6:	6023      	str	r3, [r4, #0]
	if(counter_motor1 >=0 && counter_motor1 < 2){
  4036c8:	6823      	ldr	r3, [r4, #0]
  4036ca:	6823      	ldr	r3, [r4, #0]
  4036cc:	2b01      	cmp	r3, #1
  4036ce:	f240 80eb 	bls.w	4038a8 <check_quadrante+0x1fc>
		} else if(counter_motor1 >=2 && counter_motor1 < 4){
  4036d2:	4b91      	ldr	r3, [pc, #580]	; (403918 <check_quadrante+0x26c>)
  4036d4:	681b      	ldr	r3, [r3, #0]
  4036d6:	2b01      	cmp	r3, #1
  4036d8:	d904      	bls.n	4036e4 <check_quadrante+0x38>
  4036da:	4b8f      	ldr	r3, [pc, #572]	; (403918 <check_quadrante+0x26c>)
  4036dc:	681b      	ldr	r3, [r3, #0]
  4036de:	2b03      	cmp	r3, #3
  4036e0:	f240 80e8 	bls.w	4038b4 <check_quadrante+0x208>
		} else if(counter_motor1 >=4 && counter_motor1 < 6){
  4036e4:	4b8c      	ldr	r3, [pc, #560]	; (403918 <check_quadrante+0x26c>)
  4036e6:	681b      	ldr	r3, [r3, #0]
  4036e8:	2b03      	cmp	r3, #3
  4036ea:	d904      	bls.n	4036f6 <check_quadrante+0x4a>
  4036ec:	4b8a      	ldr	r3, [pc, #552]	; (403918 <check_quadrante+0x26c>)
  4036ee:	681b      	ldr	r3, [r3, #0]
  4036f0:	2b05      	cmp	r3, #5
  4036f2:	f240 80e6 	bls.w	4038c2 <check_quadrante+0x216>
			final_1 = 4;
  4036f6:	2204      	movs	r2, #4
  4036f8:	4b8c      	ldr	r3, [pc, #560]	; (40392c <check_quadrante+0x280>)
  4036fa:	601a      	str	r2, [r3, #0]
			printf("Quarto quadrante\n");
  4036fc:	488c      	ldr	r0, [pc, #560]	; (403930 <check_quadrante+0x284>)
  4036fe:	4b88      	ldr	r3, [pc, #544]	; (403920 <check_quadrante+0x274>)
  403700:	4798      	blx	r3
	counter2_motor1 = counter2_motor1 % 12;
  403702:	4a88      	ldr	r2, [pc, #544]	; (403924 <check_quadrante+0x278>)
  403704:	6811      	ldr	r1, [r2, #0]
  403706:	4b8b      	ldr	r3, [pc, #556]	; (403934 <check_quadrante+0x288>)
  403708:	fba3 0301 	umull	r0, r3, r3, r1
  40370c:	08db      	lsrs	r3, r3, #3
  40370e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  403712:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
  403716:	6013      	str	r3, [r2, #0]
	if(counter2_motor1 >=0 && counter2_motor1 < 3){
  403718:	6813      	ldr	r3, [r2, #0]
  40371a:	6813      	ldr	r3, [r2, #0]
  40371c:	2b02      	cmp	r3, #2
  40371e:	f240 80d7 	bls.w	4038d0 <check_quadrante+0x224>
		} else if(counter2_motor1 >=3 && counter2_motor1 < 6){
  403722:	4b80      	ldr	r3, [pc, #512]	; (403924 <check_quadrante+0x278>)
  403724:	681b      	ldr	r3, [r3, #0]
  403726:	2b02      	cmp	r3, #2
  403728:	d904      	bls.n	403734 <check_quadrante+0x88>
  40372a:	4b7e      	ldr	r3, [pc, #504]	; (403924 <check_quadrante+0x278>)
  40372c:	681b      	ldr	r3, [r3, #0]
  40372e:	2b05      	cmp	r3, #5
  403730:	f240 80d2 	bls.w	4038d8 <check_quadrante+0x22c>
		} else if(counter2_motor1 >=6 && counter2_motor1 < 9){
  403734:	4b7b      	ldr	r3, [pc, #492]	; (403924 <check_quadrante+0x278>)
  403736:	681b      	ldr	r3, [r3, #0]
  403738:	2b05      	cmp	r3, #5
  40373a:	d904      	bls.n	403746 <check_quadrante+0x9a>
  40373c:	4b79      	ldr	r3, [pc, #484]	; (403924 <check_quadrante+0x278>)
  40373e:	681b      	ldr	r3, [r3, #0]
  403740:	2b08      	cmp	r3, #8
  403742:	f240 80cd 	bls.w	4038e0 <check_quadrante+0x234>
		printf("Quarto quadrante\n");
  403746:	487a      	ldr	r0, [pc, #488]	; (403930 <check_quadrante+0x284>)
  403748:	4b75      	ldr	r3, [pc, #468]	; (403920 <check_quadrante+0x274>)
  40374a:	4798      	blx	r3
	printf("MOTOR 2 ENC1 :%u\n",counter_motor2);
  40374c:	4c7a      	ldr	r4, [pc, #488]	; (403938 <check_quadrante+0x28c>)
  40374e:	6821      	ldr	r1, [r4, #0]
  403750:	487a      	ldr	r0, [pc, #488]	; (40393c <check_quadrante+0x290>)
  403752:	4d73      	ldr	r5, [pc, #460]	; (403920 <check_quadrante+0x274>)
  403754:	47a8      	blx	r5
	printf("MOTOR 2 ENC2 :%u\n",counter2_motor2);
  403756:	4b7a      	ldr	r3, [pc, #488]	; (403940 <check_quadrante+0x294>)
  403758:	6819      	ldr	r1, [r3, #0]
  40375a:	487a      	ldr	r0, [pc, #488]	; (403944 <check_quadrante+0x298>)
  40375c:	47a8      	blx	r5
	counter_motor2 = counter_motor2 % 12;
  40375e:	6822      	ldr	r2, [r4, #0]
  403760:	4b74      	ldr	r3, [pc, #464]	; (403934 <check_quadrante+0x288>)
  403762:	fba3 1302 	umull	r1, r3, r3, r2
  403766:	08db      	lsrs	r3, r3, #3
  403768:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40376c:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
  403770:	6023      	str	r3, [r4, #0]
	if(counter_motor2 >=0 && counter_motor2 < 2){
  403772:	6823      	ldr	r3, [r4, #0]
  403774:	6823      	ldr	r3, [r4, #0]
  403776:	2b01      	cmp	r3, #1
  403778:	f240 80b6 	bls.w	4038e8 <check_quadrante+0x23c>
		} else if(counter_motor2 >=2 && counter_motor2 < 4){
  40377c:	4b6e      	ldr	r3, [pc, #440]	; (403938 <check_quadrante+0x28c>)
  40377e:	681b      	ldr	r3, [r3, #0]
  403780:	2b01      	cmp	r3, #1
  403782:	d904      	bls.n	40378e <check_quadrante+0xe2>
  403784:	4b6c      	ldr	r3, [pc, #432]	; (403938 <check_quadrante+0x28c>)
  403786:	681b      	ldr	r3, [r3, #0]
  403788:	2b03      	cmp	r3, #3
  40378a:	f240 80b3 	bls.w	4038f4 <check_quadrante+0x248>
		} else if(counter_motor2 >=4 && counter_motor2 < 6){
  40378e:	4b6a      	ldr	r3, [pc, #424]	; (403938 <check_quadrante+0x28c>)
  403790:	681b      	ldr	r3, [r3, #0]
  403792:	2b03      	cmp	r3, #3
  403794:	d904      	bls.n	4037a0 <check_quadrante+0xf4>
  403796:	4b68      	ldr	r3, [pc, #416]	; (403938 <check_quadrante+0x28c>)
  403798:	681b      	ldr	r3, [r3, #0]
  40379a:	2b05      	cmp	r3, #5
  40379c:	f240 80b1 	bls.w	403902 <check_quadrante+0x256>
			final_2 = 4;
  4037a0:	2204      	movs	r2, #4
  4037a2:	4b69      	ldr	r3, [pc, #420]	; (403948 <check_quadrante+0x29c>)
  4037a4:	601a      	str	r2, [r3, #0]
			printf("Quarto quadrante\n");
  4037a6:	4862      	ldr	r0, [pc, #392]	; (403930 <check_quadrante+0x284>)
  4037a8:	4b5d      	ldr	r3, [pc, #372]	; (403920 <check_quadrante+0x274>)
  4037aa:	4798      	blx	r3
	counter2_motor2 = counter2_motor2 % 15;
  4037ac:	4a64      	ldr	r2, [pc, #400]	; (403940 <check_quadrante+0x294>)
  4037ae:	6811      	ldr	r1, [r2, #0]
  4037b0:	4b66      	ldr	r3, [pc, #408]	; (40394c <check_quadrante+0x2a0>)
  4037b2:	fba3 0301 	umull	r0, r3, r3, r1
  4037b6:	08db      	lsrs	r3, r3, #3
  4037b8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  4037bc:	1acb      	subs	r3, r1, r3
  4037be:	6013      	str	r3, [r2, #0]
	if(counter2_motor2 >=0 && counter2_motor2 < 3){
  4037c0:	6813      	ldr	r3, [r2, #0]
  4037c2:	6813      	ldr	r3, [r2, #0]
  4037c4:	2b02      	cmp	r3, #2
  4037c6:	f240 80a3 	bls.w	403910 <check_quadrante+0x264>
		} else if(counter2_motor2 >=3 && counter2_motor2 < 6){
  4037ca:	4b5d      	ldr	r3, [pc, #372]	; (403940 <check_quadrante+0x294>)
  4037cc:	681b      	ldr	r3, [r3, #0]
  4037ce:	2b02      	cmp	r3, #2
  4037d0:	d904      	bls.n	4037dc <check_quadrante+0x130>
  4037d2:	4b5b      	ldr	r3, [pc, #364]	; (403940 <check_quadrante+0x294>)
  4037d4:	681b      	ldr	r3, [r3, #0]
  4037d6:	2b05      	cmp	r3, #5
  4037d8:	f240 80cc 	bls.w	403974 <check_quadrante+0x2c8>
		} else if(counter2_motor2 >=6 && counter2_motor2 < 9){
  4037dc:	4b58      	ldr	r3, [pc, #352]	; (403940 <check_quadrante+0x294>)
  4037de:	681b      	ldr	r3, [r3, #0]
  4037e0:	2b05      	cmp	r3, #5
  4037e2:	d904      	bls.n	4037ee <check_quadrante+0x142>
  4037e4:	4b56      	ldr	r3, [pc, #344]	; (403940 <check_quadrante+0x294>)
  4037e6:	681b      	ldr	r3, [r3, #0]
  4037e8:	2b08      	cmp	r3, #8
  4037ea:	f240 80c7 	bls.w	40397c <check_quadrante+0x2d0>
		printf("Quarto quadrante\n");
  4037ee:	4850      	ldr	r0, [pc, #320]	; (403930 <check_quadrante+0x284>)
  4037f0:	4b4b      	ldr	r3, [pc, #300]	; (403920 <check_quadrante+0x274>)
  4037f2:	4798      	blx	r3
	printf("MOTOR 3 ENC1 :%u\n",counter_motor3);
  4037f4:	4c56      	ldr	r4, [pc, #344]	; (403950 <check_quadrante+0x2a4>)
  4037f6:	6821      	ldr	r1, [r4, #0]
  4037f8:	4856      	ldr	r0, [pc, #344]	; (403954 <check_quadrante+0x2a8>)
  4037fa:	4d49      	ldr	r5, [pc, #292]	; (403920 <check_quadrante+0x274>)
  4037fc:	47a8      	blx	r5
	printf("MOTOR 3 ENC2 :%u\n",counter2_motor3);
  4037fe:	4b56      	ldr	r3, [pc, #344]	; (403958 <check_quadrante+0x2ac>)
  403800:	6819      	ldr	r1, [r3, #0]
  403802:	4856      	ldr	r0, [pc, #344]	; (40395c <check_quadrante+0x2b0>)
  403804:	47a8      	blx	r5
	counter_motor3 = counter_motor3 % 12;
  403806:	6822      	ldr	r2, [r4, #0]
  403808:	4b4a      	ldr	r3, [pc, #296]	; (403934 <check_quadrante+0x288>)
  40380a:	fba3 1302 	umull	r1, r3, r3, r2
  40380e:	08db      	lsrs	r3, r3, #3
  403810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  403814:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
  403818:	6023      	str	r3, [r4, #0]
	if(counter_motor2 >=0 && counter_motor2 < 3){
  40381a:	4b47      	ldr	r3, [pc, #284]	; (403938 <check_quadrante+0x28c>)
  40381c:	681a      	ldr	r2, [r3, #0]
  40381e:	681b      	ldr	r3, [r3, #0]
  403820:	2b02      	cmp	r3, #2
  403822:	f240 80af 	bls.w	403984 <check_quadrante+0x2d8>
		} else if(counter_motor2 >=2 && counter_motor2 < 6){
  403826:	4b44      	ldr	r3, [pc, #272]	; (403938 <check_quadrante+0x28c>)
  403828:	681b      	ldr	r3, [r3, #0]
  40382a:	2b01      	cmp	r3, #1
  40382c:	d904      	bls.n	403838 <check_quadrante+0x18c>
  40382e:	4b42      	ldr	r3, [pc, #264]	; (403938 <check_quadrante+0x28c>)
  403830:	681b      	ldr	r3, [r3, #0]
  403832:	2b05      	cmp	r3, #5
  403834:	f240 80ac 	bls.w	403990 <check_quadrante+0x2e4>
		} else if(counter_motor2 >=4 && counter_motor2 < 9){
  403838:	4b3f      	ldr	r3, [pc, #252]	; (403938 <check_quadrante+0x28c>)
  40383a:	681b      	ldr	r3, [r3, #0]
  40383c:	2b03      	cmp	r3, #3
  40383e:	d904      	bls.n	40384a <check_quadrante+0x19e>
  403840:	4b3d      	ldr	r3, [pc, #244]	; (403938 <check_quadrante+0x28c>)
  403842:	681b      	ldr	r3, [r3, #0]
  403844:	2b08      	cmp	r3, #8
  403846:	f240 80aa 	bls.w	40399e <check_quadrante+0x2f2>
			final_3 = 4;
  40384a:	2204      	movs	r2, #4
  40384c:	4b44      	ldr	r3, [pc, #272]	; (403960 <check_quadrante+0x2b4>)
  40384e:	601a      	str	r2, [r3, #0]
			printf("Quarto quadrante\n");
  403850:	4837      	ldr	r0, [pc, #220]	; (403930 <check_quadrante+0x284>)
  403852:	4b33      	ldr	r3, [pc, #204]	; (403920 <check_quadrante+0x274>)
  403854:	4798      	blx	r3
	counter2_motor3 = counter2_motor3 % 12;
  403856:	4a40      	ldr	r2, [pc, #256]	; (403958 <check_quadrante+0x2ac>)
  403858:	6811      	ldr	r1, [r2, #0]
  40385a:	4b36      	ldr	r3, [pc, #216]	; (403934 <check_quadrante+0x288>)
  40385c:	fba3 0301 	umull	r0, r3, r3, r1
  403860:	08db      	lsrs	r3, r3, #3
  403862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  403866:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
  40386a:	6013      	str	r3, [r2, #0]
	if(counter2_motor3 >=0 && counter2_motor3 < 3){
  40386c:	6813      	ldr	r3, [r2, #0]
  40386e:	6813      	ldr	r3, [r2, #0]
  403870:	2b02      	cmp	r3, #2
  403872:	f240 809b 	bls.w	4039ac <check_quadrante+0x300>
		} else if(counter2_motor3 >=3 && counter2_motor3 < 6){
  403876:	4b38      	ldr	r3, [pc, #224]	; (403958 <check_quadrante+0x2ac>)
  403878:	681b      	ldr	r3, [r3, #0]
  40387a:	2b02      	cmp	r3, #2
  40387c:	d904      	bls.n	403888 <check_quadrante+0x1dc>
  40387e:	4b36      	ldr	r3, [pc, #216]	; (403958 <check_quadrante+0x2ac>)
  403880:	681b      	ldr	r3, [r3, #0]
  403882:	2b05      	cmp	r3, #5
  403884:	f240 8096 	bls.w	4039b4 <check_quadrante+0x308>
		} else if(counter2_motor3 >=6 && counter2_motor3 < 9){
  403888:	4b33      	ldr	r3, [pc, #204]	; (403958 <check_quadrante+0x2ac>)
  40388a:	681b      	ldr	r3, [r3, #0]
  40388c:	2b05      	cmp	r3, #5
  40388e:	d904      	bls.n	40389a <check_quadrante+0x1ee>
  403890:	4b31      	ldr	r3, [pc, #196]	; (403958 <check_quadrante+0x2ac>)
  403892:	681b      	ldr	r3, [r3, #0]
  403894:	2b08      	cmp	r3, #8
  403896:	f240 8091 	bls.w	4039bc <check_quadrante+0x310>
		printf("Quarto quadrante\n");
  40389a:	4825      	ldr	r0, [pc, #148]	; (403930 <check_quadrante+0x284>)
  40389c:	4b20      	ldr	r3, [pc, #128]	; (403920 <check_quadrante+0x274>)
  40389e:	4798      	blx	r3
	printf("-------------------------------------------\n");
  4038a0:	4830      	ldr	r0, [pc, #192]	; (403964 <check_quadrante+0x2b8>)
  4038a2:	4b1f      	ldr	r3, [pc, #124]	; (403920 <check_quadrante+0x274>)
  4038a4:	4798      	blx	r3
  4038a6:	bd38      	pop	{r3, r4, r5, pc}
		final_1 = 1;
  4038a8:	2201      	movs	r2, #1
  4038aa:	4b20      	ldr	r3, [pc, #128]	; (40392c <check_quadrante+0x280>)
  4038ac:	601a      	str	r2, [r3, #0]
		printf("Primeiro quadrante\n");
  4038ae:	482e      	ldr	r0, [pc, #184]	; (403968 <check_quadrante+0x2bc>)
  4038b0:	47a8      	blx	r5
  4038b2:	e726      	b.n	403702 <check_quadrante+0x56>
			final_1 = 2;
  4038b4:	2202      	movs	r2, #2
  4038b6:	4b1d      	ldr	r3, [pc, #116]	; (40392c <check_quadrante+0x280>)
  4038b8:	601a      	str	r2, [r3, #0]
			printf("Segundo quadrante\n");
  4038ba:	482c      	ldr	r0, [pc, #176]	; (40396c <check_quadrante+0x2c0>)
  4038bc:	4b18      	ldr	r3, [pc, #96]	; (403920 <check_quadrante+0x274>)
  4038be:	4798      	blx	r3
  4038c0:	e71f      	b.n	403702 <check_quadrante+0x56>
			final_1 = 3;
  4038c2:	2203      	movs	r2, #3
  4038c4:	4b19      	ldr	r3, [pc, #100]	; (40392c <check_quadrante+0x280>)
  4038c6:	601a      	str	r2, [r3, #0]
			printf("Terceiro quadrante\n");
  4038c8:	4829      	ldr	r0, [pc, #164]	; (403970 <check_quadrante+0x2c4>)
  4038ca:	4b15      	ldr	r3, [pc, #84]	; (403920 <check_quadrante+0x274>)
  4038cc:	4798      	blx	r3
  4038ce:	e718      	b.n	403702 <check_quadrante+0x56>
		printf("Primeiro quadrante\n");
  4038d0:	4825      	ldr	r0, [pc, #148]	; (403968 <check_quadrante+0x2bc>)
  4038d2:	4b13      	ldr	r3, [pc, #76]	; (403920 <check_quadrante+0x274>)
  4038d4:	4798      	blx	r3
  4038d6:	e739      	b.n	40374c <check_quadrante+0xa0>
		printf("Segundo quadrante\n");
  4038d8:	4824      	ldr	r0, [pc, #144]	; (40396c <check_quadrante+0x2c0>)
  4038da:	4b11      	ldr	r3, [pc, #68]	; (403920 <check_quadrante+0x274>)
  4038dc:	4798      	blx	r3
  4038de:	e735      	b.n	40374c <check_quadrante+0xa0>
		printf("Terceiro quadrante\n");
  4038e0:	4823      	ldr	r0, [pc, #140]	; (403970 <check_quadrante+0x2c4>)
  4038e2:	4b0f      	ldr	r3, [pc, #60]	; (403920 <check_quadrante+0x274>)
  4038e4:	4798      	blx	r3
  4038e6:	e731      	b.n	40374c <check_quadrante+0xa0>
		final_2 = 1;
  4038e8:	2201      	movs	r2, #1
  4038ea:	4b17      	ldr	r3, [pc, #92]	; (403948 <check_quadrante+0x29c>)
  4038ec:	601a      	str	r2, [r3, #0]
		printf("Primeiro quadrante\n");
  4038ee:	481e      	ldr	r0, [pc, #120]	; (403968 <check_quadrante+0x2bc>)
  4038f0:	47a8      	blx	r5
  4038f2:	e75b      	b.n	4037ac <check_quadrante+0x100>
			final_2 = 2;
  4038f4:	2202      	movs	r2, #2
  4038f6:	4b14      	ldr	r3, [pc, #80]	; (403948 <check_quadrante+0x29c>)
  4038f8:	601a      	str	r2, [r3, #0]
			printf("Segundo quadrante\n");
  4038fa:	481c      	ldr	r0, [pc, #112]	; (40396c <check_quadrante+0x2c0>)
  4038fc:	4b08      	ldr	r3, [pc, #32]	; (403920 <check_quadrante+0x274>)
  4038fe:	4798      	blx	r3
  403900:	e754      	b.n	4037ac <check_quadrante+0x100>
			final_2 = 3;
  403902:	2203      	movs	r2, #3
  403904:	4b10      	ldr	r3, [pc, #64]	; (403948 <check_quadrante+0x29c>)
  403906:	601a      	str	r2, [r3, #0]
			printf("Terceiro quadrante\n");
  403908:	4819      	ldr	r0, [pc, #100]	; (403970 <check_quadrante+0x2c4>)
  40390a:	4b05      	ldr	r3, [pc, #20]	; (403920 <check_quadrante+0x274>)
  40390c:	4798      	blx	r3
  40390e:	e74d      	b.n	4037ac <check_quadrante+0x100>
		printf("Primeiro quadrante\n");
  403910:	4815      	ldr	r0, [pc, #84]	; (403968 <check_quadrante+0x2bc>)
  403912:	4b03      	ldr	r3, [pc, #12]	; (403920 <check_quadrante+0x274>)
  403914:	4798      	blx	r3
  403916:	e76d      	b.n	4037f4 <check_quadrante+0x148>
  403918:	20400bac 	.word	0x20400bac
  40391c:	00406e1c 	.word	0x00406e1c
  403920:	00403d95 	.word	0x00403d95
  403924:	20400ba0 	.word	0x20400ba0
  403928:	00406e30 	.word	0x00406e30
  40392c:	20400bb8 	.word	0x20400bb8
  403930:	00406e80 	.word	0x00406e80
  403934:	aaaaaaab 	.word	0xaaaaaaab
  403938:	20400bb0 	.word	0x20400bb0
  40393c:	00406e94 	.word	0x00406e94
  403940:	20400ba4 	.word	0x20400ba4
  403944:	00406ea8 	.word	0x00406ea8
  403948:	20400bbc 	.word	0x20400bbc
  40394c:	88888889 	.word	0x88888889
  403950:	20400bb4 	.word	0x20400bb4
  403954:	00406ebc 	.word	0x00406ebc
  403958:	20400ba8 	.word	0x20400ba8
  40395c:	00406ed0 	.word	0x00406ed0
  403960:	20400bc0 	.word	0x20400bc0
  403964:	00406ee4 	.word	0x00406ee4
  403968:	00406e44 	.word	0x00406e44
  40396c:	00406e58 	.word	0x00406e58
  403970:	00406e6c 	.word	0x00406e6c
		printf("Segundo quadrante\n");
  403974:	4813      	ldr	r0, [pc, #76]	; (4039c4 <check_quadrante+0x318>)
  403976:	4b14      	ldr	r3, [pc, #80]	; (4039c8 <check_quadrante+0x31c>)
  403978:	4798      	blx	r3
  40397a:	e73b      	b.n	4037f4 <check_quadrante+0x148>
		printf("Terceiro quadrante\n");
  40397c:	4813      	ldr	r0, [pc, #76]	; (4039cc <check_quadrante+0x320>)
  40397e:	4b12      	ldr	r3, [pc, #72]	; (4039c8 <check_quadrante+0x31c>)
  403980:	4798      	blx	r3
  403982:	e737      	b.n	4037f4 <check_quadrante+0x148>
		final_3 = 1;
  403984:	2201      	movs	r2, #1
  403986:	4b12      	ldr	r3, [pc, #72]	; (4039d0 <check_quadrante+0x324>)
  403988:	601a      	str	r2, [r3, #0]
		printf("Primeiro quadrante\n");
  40398a:	4812      	ldr	r0, [pc, #72]	; (4039d4 <check_quadrante+0x328>)
  40398c:	47a8      	blx	r5
  40398e:	e762      	b.n	403856 <check_quadrante+0x1aa>
			final_3 = 2;
  403990:	2202      	movs	r2, #2
  403992:	4b0f      	ldr	r3, [pc, #60]	; (4039d0 <check_quadrante+0x324>)
  403994:	601a      	str	r2, [r3, #0]
			printf("Segundo quadrante\n");
  403996:	480b      	ldr	r0, [pc, #44]	; (4039c4 <check_quadrante+0x318>)
  403998:	4b0b      	ldr	r3, [pc, #44]	; (4039c8 <check_quadrante+0x31c>)
  40399a:	4798      	blx	r3
  40399c:	e75b      	b.n	403856 <check_quadrante+0x1aa>
			final_3 = 3;
  40399e:	2203      	movs	r2, #3
  4039a0:	4b0b      	ldr	r3, [pc, #44]	; (4039d0 <check_quadrante+0x324>)
  4039a2:	601a      	str	r2, [r3, #0]
			printf("Terceiro quadrante\n");
  4039a4:	4809      	ldr	r0, [pc, #36]	; (4039cc <check_quadrante+0x320>)
  4039a6:	4b08      	ldr	r3, [pc, #32]	; (4039c8 <check_quadrante+0x31c>)
  4039a8:	4798      	blx	r3
  4039aa:	e754      	b.n	403856 <check_quadrante+0x1aa>
		printf("Primeiro quadrante\n");
  4039ac:	4809      	ldr	r0, [pc, #36]	; (4039d4 <check_quadrante+0x328>)
  4039ae:	4b06      	ldr	r3, [pc, #24]	; (4039c8 <check_quadrante+0x31c>)
  4039b0:	4798      	blx	r3
  4039b2:	e775      	b.n	4038a0 <check_quadrante+0x1f4>
		printf("Segundo quadrante\n");
  4039b4:	4803      	ldr	r0, [pc, #12]	; (4039c4 <check_quadrante+0x318>)
  4039b6:	4b04      	ldr	r3, [pc, #16]	; (4039c8 <check_quadrante+0x31c>)
  4039b8:	4798      	blx	r3
  4039ba:	e771      	b.n	4038a0 <check_quadrante+0x1f4>
		printf("Terceiro quadrante\n");
  4039bc:	4803      	ldr	r0, [pc, #12]	; (4039cc <check_quadrante+0x320>)
  4039be:	4b02      	ldr	r3, [pc, #8]	; (4039c8 <check_quadrante+0x31c>)
  4039c0:	4798      	blx	r3
  4039c2:	e76d      	b.n	4038a0 <check_quadrante+0x1f4>
  4039c4:	00406e58 	.word	0x00406e58
  4039c8:	00403d95 	.word	0x00403d95
  4039cc:	00406e6c 	.word	0x00406e6c
  4039d0:	20400bc0 	.word	0x20400bc0
  4039d4:	00406e44 	.word	0x00406e44

004039d8 <checkMatches>:
			
		}
	}
}

int checkMatches(int final_1, int final_2,int final_3){
  4039d8:	b410      	push	{r4}
  4039da:	b087      	sub	sp, #28
	int numLen = 3;
	int finals[5];
	int matches = 0;
	
	finals[0] = final_1;
  4039dc:	9001      	str	r0, [sp, #4]
	finals[1] = final_2;
  4039de:	9102      	str	r1, [sp, #8]
	finals[2] = final_3;
  4039e0:	9203      	str	r2, [sp, #12]
	finals[3] = final_1;
  4039e2:	9004      	str	r0, [sp, #16]
	finals[4] = final_2;
  4039e4:	9105      	str	r1, [sp, #20]
  4039e6:	ab01      	add	r3, sp, #4
  4039e8:	ac04      	add	r4, sp, #16
	int matches = 0;
  4039ea:	2000      	movs	r0, #0
  4039ec:	e007      	b.n	4039fe <checkMatches+0x26>
	
	
	for(int i = 0; i < numLen; i++){
		if(finals[i] == finals[i+1] && finals[i] == finals[i+2]){
  4039ee:	6859      	ldr	r1, [r3, #4]
  4039f0:	428a      	cmp	r2, r1
  4039f2:	d00d      	beq.n	403a10 <checkMatches+0x38>
  4039f4:	2802      	cmp	r0, #2
  4039f6:	bfb8      	it	lt
  4039f8:	2002      	movlt	r0, #2
	for(int i = 0; i < numLen; i++){
  4039fa:	42a3      	cmp	r3, r4
  4039fc:	d00a      	beq.n	403a14 <checkMatches+0x3c>
		if(finals[i] == finals[i+1] && finals[i] == finals[i+2]){
  4039fe:	681a      	ldr	r2, [r3, #0]
  403a00:	f853 1f04 	ldr.w	r1, [r3, #4]!
  403a04:	428a      	cmp	r2, r1
  403a06:	d0f2      	beq.n	4039ee <checkMatches+0x16>
			matches = 3;
		}else{
			if(finals[i] == finals[i+1] || finals[i] == finals[i+2]){
  403a08:	6859      	ldr	r1, [r3, #4]
  403a0a:	428a      	cmp	r2, r1
  403a0c:	d1f5      	bne.n	4039fa <checkMatches+0x22>
  403a0e:	e7f1      	b.n	4039f4 <checkMatches+0x1c>
			matches = 3;
  403a10:	2003      	movs	r0, #3
  403a12:	e7f2      	b.n	4039fa <checkMatches+0x22>
			}
		}
	}
	return matches;
	
}
  403a14:	b007      	add	sp, #28
  403a16:	f85d 4b04 	ldr.w	r4, [sp], #4
  403a1a:	4770      	bx	lr

00403a1c <winning>:

void winning(){
  403a1c:	b570      	push	{r4, r5, r6, lr}
	int matches;
	matches = checkMatches(final_1,final_2,final_3);
  403a1e:	4b15      	ldr	r3, [pc, #84]	; (403a74 <winning+0x58>)
  403a20:	6818      	ldr	r0, [r3, #0]
  403a22:	4b15      	ldr	r3, [pc, #84]	; (403a78 <winning+0x5c>)
  403a24:	6819      	ldr	r1, [r3, #0]
  403a26:	4b15      	ldr	r3, [pc, #84]	; (403a7c <winning+0x60>)
  403a28:	681a      	ldr	r2, [r3, #0]
  403a2a:	4b15      	ldr	r3, [pc, #84]	; (403a80 <winning+0x64>)
  403a2c:	4798      	blx	r3
  403a2e:	4604      	mov	r4, r0

	printf("MATCHESSSS %d\n", matches);
  403a30:	4601      	mov	r1, r0
  403a32:	4814      	ldr	r0, [pc, #80]	; (403a84 <winning+0x68>)
  403a34:	4b14      	ldr	r3, [pc, #80]	; (403a88 <winning+0x6c>)
  403a36:	4798      	blx	r3
	if(matches == 2){
  403a38:	2c02      	cmp	r4, #2
  403a3a:	d002      	beq.n	403a42 <winning+0x26>
		static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
		xSemaphoreGiveFromISR(xSemaphore1, &xHigherPriorityTaskWoken);
	} else if (matches > 2){
  403a3c:	2c02      	cmp	r4, #2
  403a3e:	dc08      	bgt.n	403a52 <winning+0x36>
  403a40:	bd70      	pop	{r4, r5, r6, pc}
		xHigherPriorityTaskWoken = pdFALSE;
  403a42:	4912      	ldr	r1, [pc, #72]	; (403a8c <winning+0x70>)
  403a44:	2300      	movs	r3, #0
  403a46:	600b      	str	r3, [r1, #0]
		xSemaphoreGiveFromISR(xSemaphore1, &xHigherPriorityTaskWoken);
  403a48:	4b11      	ldr	r3, [pc, #68]	; (403a90 <winning+0x74>)
  403a4a:	6818      	ldr	r0, [r3, #0]
  403a4c:	4b11      	ldr	r3, [pc, #68]	; (403a94 <winning+0x78>)
  403a4e:	4798      	blx	r3
  403a50:	bd70      	pop	{r4, r5, r6, pc}
		static  BaseType_t xHigherPriorityTaskWoken;
		xHigherPriorityTaskWoken = pdFALSE;
  403a52:	4911      	ldr	r1, [pc, #68]	; (403a98 <winning+0x7c>)
  403a54:	2600      	movs	r6, #0
  403a56:	600e      	str	r6, [r1, #0]
		xSemaphoreGiveFromISR(xSemaphore1, &xHigherPriorityTaskWoken);
  403a58:	4d0d      	ldr	r5, [pc, #52]	; (403a90 <winning+0x74>)
  403a5a:	6828      	ldr	r0, [r5, #0]
  403a5c:	4c0d      	ldr	r4, [pc, #52]	; (403a94 <winning+0x78>)
  403a5e:	47a0      	blx	r4
		vTaskDelay(delay_mm*2);
  403a60:	4b0e      	ldr	r3, [pc, #56]	; (403a9c <winning+0x80>)
  403a62:	6818      	ldr	r0, [r3, #0]
  403a64:	0040      	lsls	r0, r0, #1
  403a66:	4b0e      	ldr	r3, [pc, #56]	; (403aa0 <winning+0x84>)
  403a68:	4798      	blx	r3
		static  BaseType_t xHigherPriorityTaskWoken2;
		xHigherPriorityTaskWoken2 = pdFALSE;
  403a6a:	490e      	ldr	r1, [pc, #56]	; (403aa4 <winning+0x88>)
  403a6c:	600e      	str	r6, [r1, #0]
		xSemaphoreGiveFromISR(xSemaphore1, &xHigherPriorityTaskWoken2);
  403a6e:	6828      	ldr	r0, [r5, #0]
  403a70:	47a0      	blx	r4
				//xHigherPriorityTaskWoken = pdFALSE;
				//xSemaphoreGiveFromISR(xSemaphore1, &xHigherPriorityTaskWoken);
			//}
		//}
	//}
}
  403a72:	e7e5      	b.n	403a40 <winning+0x24>
  403a74:	20400bb8 	.word	0x20400bb8
  403a78:	20400bbc 	.word	0x20400bbc
  403a7c:	20400bc0 	.word	0x20400bc0
  403a80:	004039d9 	.word	0x004039d9
  403a84:	00406ff4 	.word	0x00406ff4
  403a88:	00403d95 	.word	0x00403d95
  403a8c:	20400bc8 	.word	0x20400bc8
  403a90:	20400c90 	.word	0x20400c90
  403a94:	00401989 	.word	0x00401989
  403a98:	20400bcc 	.word	0x20400bcc
  403a9c:	20400014 	.word	0x20400014
  403aa0:	00402291 	.word	0x00402291
  403aa4:	20400bd0 	.word	0x20400bd0

00403aa8 <tsk_losing>:

void tsk_losing(){
  403aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	StartGame = xSemaphoreCreateBinary();
  403aac:	2203      	movs	r2, #3
  403aae:	2100      	movs	r1, #0
  403ab0:	2001      	movs	r0, #1
  403ab2:	4b3f      	ldr	r3, [pc, #252]	; (403bb0 <tsk_losing+0x108>)
  403ab4:	4798      	blx	r3
  403ab6:	4b3f      	ldr	r3, [pc, #252]	; (403bb4 <tsk_losing+0x10c>)
  403ab8:	6018      	str	r0, [r3, #0]
	io_init();
  403aba:	4b3f      	ldr	r3, [pc, #252]	; (403bb8 <tsk_losing+0x110>)
  403abc:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIO_PWM_0);
  403abe:	200a      	movs	r0, #10
  403ac0:	4b3e      	ldr	r3, [pc, #248]	; (403bbc <tsk_losing+0x114>)
  403ac2:	4798      	blx	r3
	pio_set_peripheral(PIO_PWM_0, PIO_PERIPH_A, MASK_PIN_PWM_0 );
  403ac4:	2201      	movs	r2, #1
  403ac6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403aca:	483d      	ldr	r0, [pc, #244]	; (403bc0 <tsk_losing+0x118>)
  403acc:	4b3d      	ldr	r3, [pc, #244]	; (403bc4 <tsk_losing+0x11c>)
  403ace:	4798      	blx	r3
	pio_clear(MOTOR_PIO,MOTOR_PIO_IDX_MASK);
  403ad0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  403ad4:	483c      	ldr	r0, [pc, #240]	; (403bc8 <tsk_losing+0x120>)
  403ad6:	4b3d      	ldr	r3, [pc, #244]	; (403bcc <tsk_losing+0x124>)
  403ad8:	4798      	blx	r3
	pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 0);
  403ada:	2200      	movs	r2, #0
  403adc:	493c      	ldr	r1, [pc, #240]	; (403bd0 <tsk_losing+0x128>)
  403ade:	483d      	ldr	r0, [pc, #244]	; (403bd4 <tsk_losing+0x12c>)
  403ae0:	4b3d      	ldr	r3, [pc, #244]	; (403bd8 <tsk_losing+0x130>)
  403ae2:	4798      	blx	r3
	uint duty = 0;
	PWM0_init(0, duty);
  403ae4:	2100      	movs	r1, #0
  403ae6:	4608      	mov	r0, r1
  403ae8:	4b3c      	ldr	r3, [pc, #240]	; (403bdc <tsk_losing+0x134>)
  403aea:	4798      	blx	r3
	
	counter_motor1 = 0 ;
  403aec:	2300      	movs	r3, #0
  403aee:	4a3c      	ldr	r2, [pc, #240]	; (403be0 <tsk_losing+0x138>)
  403af0:	6013      	str	r3, [r2, #0]
	counter2_motor1 = 0;
  403af2:	4a3c      	ldr	r2, [pc, #240]	; (403be4 <tsk_losing+0x13c>)
  403af4:	6013      	str	r3, [r2, #0]
	counter_motor2 = 0;
  403af6:	4a3c      	ldr	r2, [pc, #240]	; (403be8 <tsk_losing+0x140>)
  403af8:	6013      	str	r3, [r2, #0]
	counter2_motor2 = 0;
  403afa:	4a3c      	ldr	r2, [pc, #240]	; (403bec <tsk_losing+0x144>)
  403afc:	6013      	str	r3, [r2, #0]
	counter_motor3 = 0;
  403afe:	4a3c      	ldr	r2, [pc, #240]	; (403bf0 <tsk_losing+0x148>)
  403b00:	6013      	str	r3, [r2, #0]
	counter2_motor3 = 0;
  403b02:	4a3c      	ldr	r2, [pc, #240]	; (403bf4 <tsk_losing+0x14c>)
  403b04:	6013      	str	r3, [r2, #0]
	/* Infinite loop */
	/* fade in */
	for (;;){
		//xSemaphoreTake(xSemaphoreBut, (TickType_t) 50) == pdTRUE
		
		if(xSemaphoreTake(StartGame, (TickType_t) 50)){
  403b06:	4e2b      	ldr	r6, [pc, #172]	; (403bb4 <tsk_losing+0x10c>)
  403b08:	4d3b      	ldr	r5, [pc, #236]	; (403bf8 <tsk_losing+0x150>)
				printf("M1 : %d, M2 : %d , M3: %d \n------------------------------------\n", final_1, final_2,final_3);
				winning();
				
			
			}else {
				pio_clear(MOTOR_PIO,MOTOR_PIO_IDX_MASK);
  403b0a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 403bc8 <tsk_losing+0x120>
  403b0e:	e016      	b.n	403b3e <tsk_losing+0x96>
  403b10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  403b14:	4640      	mov	r0, r8
  403b16:	4b2d      	ldr	r3, [pc, #180]	; (403bcc <tsk_losing+0x124>)
  403b18:	4798      	blx	r3
				pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 0);
  403b1a:	2200      	movs	r2, #0
  403b1c:	492c      	ldr	r1, [pc, #176]	; (403bd0 <tsk_losing+0x128>)
  403b1e:	482d      	ldr	r0, [pc, #180]	; (403bd4 <tsk_losing+0x12c>)
  403b20:	4b2d      	ldr	r3, [pc, #180]	; (403bd8 <tsk_losing+0x130>)
  403b22:	4798      	blx	r3
				counter_motor1 = 0 ;
  403b24:	2300      	movs	r3, #0
  403b26:	4a2e      	ldr	r2, [pc, #184]	; (403be0 <tsk_losing+0x138>)
  403b28:	6013      	str	r3, [r2, #0]
				counter2_motor1 = 0;
  403b2a:	4a2e      	ldr	r2, [pc, #184]	; (403be4 <tsk_losing+0x13c>)
  403b2c:	6013      	str	r3, [r2, #0]
				counter_motor2 = 0;
  403b2e:	4a2e      	ldr	r2, [pc, #184]	; (403be8 <tsk_losing+0x140>)
  403b30:	6013      	str	r3, [r2, #0]
				counter2_motor2 = 0;
  403b32:	4a2e      	ldr	r2, [pc, #184]	; (403bec <tsk_losing+0x144>)
  403b34:	6013      	str	r3, [r2, #0]
				counter_motor3 = 0;
  403b36:	4a2e      	ldr	r2, [pc, #184]	; (403bf0 <tsk_losing+0x148>)
  403b38:	6013      	str	r3, [r2, #0]
				counter2_motor3 = 0;
  403b3a:	4a2e      	ldr	r2, [pc, #184]	; (403bf4 <tsk_losing+0x14c>)
  403b3c:	6013      	str	r3, [r2, #0]
		if(xSemaphoreTake(StartGame, (TickType_t) 50)){
  403b3e:	2300      	movs	r3, #0
  403b40:	2232      	movs	r2, #50	; 0x32
  403b42:	4619      	mov	r1, r3
  403b44:	6830      	ldr	r0, [r6, #0]
  403b46:	47a8      	blx	r5
  403b48:	2800      	cmp	r0, #0
  403b4a:	d0e1      	beq.n	403b10 <tsk_losing+0x68>
			pio_set(MOTOR_PIO,MOTOR_PIO_IDX_MASK);
  403b4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  403b50:	4640      	mov	r0, r8
  403b52:	4b2a      	ldr	r3, [pc, #168]	; (403bfc <tsk_losing+0x154>)
  403b54:	4798      	blx	r3
			pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 0);
  403b56:	f8df a078 	ldr.w	sl, [pc, #120]	; 403bd0 <tsk_losing+0x128>
  403b5a:	f8df 9078 	ldr.w	r9, [pc, #120]	; 403bd4 <tsk_losing+0x12c>
  403b5e:	2200      	movs	r2, #0
  403b60:	4651      	mov	r1, sl
  403b62:	4648      	mov	r0, r9
  403b64:	4c1c      	ldr	r4, [pc, #112]	; (403bd8 <tsk_losing+0x130>)
  403b66:	47a0      	blx	r4
			vTaskDelay(2000);
  403b68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  403b6c:	4f24      	ldr	r7, [pc, #144]	; (403c00 <tsk_losing+0x158>)
  403b6e:	47b8      	blx	r7
				pwm_channel_update_duty(PWM0, &g_pwm_channel_led, 0);
  403b70:	2200      	movs	r2, #0
  403b72:	4651      	mov	r1, sl
  403b74:	4648      	mov	r0, r9
  403b76:	47a0      	blx	r4
				pio_clear(MOTOR_PIO,MOTOR_PIO_IDX_MASK);
  403b78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  403b7c:	4640      	mov	r0, r8
  403b7e:	4b13      	ldr	r3, [pc, #76]	; (403bcc <tsk_losing+0x124>)
  403b80:	4798      	blx	r3
				vTaskDelay(3000);
  403b82:	f640 30b8 	movw	r0, #3000	; 0xbb8
  403b86:	47b8      	blx	r7
				check_quadrante();
  403b88:	4b1e      	ldr	r3, [pc, #120]	; (403c04 <tsk_losing+0x15c>)
  403b8a:	4798      	blx	r3
				xSemaphoreTake(StartGame, (TickType_t) 200);
  403b8c:	2300      	movs	r3, #0
  403b8e:	22c8      	movs	r2, #200	; 0xc8
  403b90:	4619      	mov	r1, r3
  403b92:	6830      	ldr	r0, [r6, #0]
  403b94:	47a8      	blx	r5
				printf("M1 : %d, M2 : %d , M3: %d \n------------------------------------\n", final_1, final_2,final_3);
  403b96:	4b1c      	ldr	r3, [pc, #112]	; (403c08 <tsk_losing+0x160>)
  403b98:	6819      	ldr	r1, [r3, #0]
  403b9a:	4b1c      	ldr	r3, [pc, #112]	; (403c0c <tsk_losing+0x164>)
  403b9c:	681a      	ldr	r2, [r3, #0]
  403b9e:	4b1c      	ldr	r3, [pc, #112]	; (403c10 <tsk_losing+0x168>)
  403ba0:	681b      	ldr	r3, [r3, #0]
  403ba2:	481c      	ldr	r0, [pc, #112]	; (403c14 <tsk_losing+0x16c>)
  403ba4:	4f1c      	ldr	r7, [pc, #112]	; (403c18 <tsk_losing+0x170>)
  403ba6:	47b8      	blx	r7
				winning();
  403ba8:	4b1c      	ldr	r3, [pc, #112]	; (403c1c <tsk_losing+0x174>)
  403baa:	4798      	blx	r3
  403bac:	e7c7      	b.n	403b3e <tsk_losing+0x96>
  403bae:	bf00      	nop
  403bb0:	00401629 	.word	0x00401629
  403bb4:	20400c98 	.word	0x20400c98
  403bb8:	00402fb1 	.word	0x00402fb1
  403bbc:	0040094d 	.word	0x0040094d
  403bc0:	400e0e00 	.word	0x400e0e00
  403bc4:	0040053b 	.word	0x0040053b
  403bc8:	400e1400 	.word	0x400e1400
  403bcc:	00400537 	.word	0x00400537
  403bd0:	20400c54 	.word	0x20400c54
  403bd4:	40020000 	.word	0x40020000
  403bd8:	00400ba3 	.word	0x00400ba3
  403bdc:	00402f35 	.word	0x00402f35
  403be0:	20400bac 	.word	0x20400bac
  403be4:	20400ba0 	.word	0x20400ba0
  403be8:	20400bb0 	.word	0x20400bb0
  403bec:	20400ba4 	.word	0x20400ba4
  403bf0:	20400bb4 	.word	0x20400bb4
  403bf4:	20400ba8 	.word	0x20400ba8
  403bf8:	00401a69 	.word	0x00401a69
  403bfc:	00400533 	.word	0x00400533
  403c00:	00402291 	.word	0x00402291
  403c04:	004036ad 	.word	0x004036ad
  403c08:	20400bb8 	.word	0x20400bb8
  403c0c:	20400bbc 	.word	0x20400bbc
  403c10:	20400bc0 	.word	0x20400bc0
  403c14:	00406f98 	.word	0x00406f98
  403c18:	00403d95 	.word	0x00403d95
  403c1c:	00403a1d 	.word	0x00403a1d

00403c20 <main>:
 
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void){
  403c20:	b500      	push	{lr}
  403c22:	b08b      	sub	sp, #44	; 0x2c
	/* Initialize the SAM system */
	sysclk_init();
  403c24:	4b2e      	ldr	r3, [pc, #184]	; (403ce0 <main+0xc0>)
  403c26:	4798      	blx	r3
	board_init();
  403c28:	4b2e      	ldr	r3, [pc, #184]	; (403ce4 <main+0xc4>)
  403c2a:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403c2c:	4d2e      	ldr	r5, [pc, #184]	; (403ce8 <main+0xc8>)
  403c2e:	4b2f      	ldr	r3, [pc, #188]	; (403cec <main+0xcc>)
  403c30:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403c32:	4a2f      	ldr	r2, [pc, #188]	; (403cf0 <main+0xd0>)
  403c34:	4b2f      	ldr	r3, [pc, #188]	; (403cf4 <main+0xd4>)
  403c36:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403c38:	4a2f      	ldr	r2, [pc, #188]	; (403cf8 <main+0xd8>)
  403c3a:	4b30      	ldr	r3, [pc, #192]	; (403cfc <main+0xdc>)
  403c3c:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403c3e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403c42:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403c44:	23c0      	movs	r3, #192	; 0xc0
  403c46:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403c4c:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403c4e:	2400      	movs	r4, #0
  403c50:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403c52:	9408      	str	r4, [sp, #32]
  403c54:	200e      	movs	r0, #14
  403c56:	4b2a      	ldr	r3, [pc, #168]	; (403d00 <main+0xe0>)
  403c58:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403c5a:	4a2a      	ldr	r2, [pc, #168]	; (403d04 <main+0xe4>)
  403c5c:	a904      	add	r1, sp, #16
  403c5e:	4628      	mov	r0, r5
  403c60:	4b29      	ldr	r3, [pc, #164]	; (403d08 <main+0xe8>)
  403c62:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403c64:	4628      	mov	r0, r5
  403c66:	4b29      	ldr	r3, [pc, #164]	; (403d0c <main+0xec>)
  403c68:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403c6a:	4628      	mov	r0, r5
  403c6c:	4b28      	ldr	r3, [pc, #160]	; (403d10 <main+0xf0>)
  403c6e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403c70:	4e28      	ldr	r6, [pc, #160]	; (403d14 <main+0xf4>)
  403c72:	6833      	ldr	r3, [r6, #0]
  403c74:	4621      	mov	r1, r4
  403c76:	6898      	ldr	r0, [r3, #8]
  403c78:	4d27      	ldr	r5, [pc, #156]	; (403d18 <main+0xf8>)
  403c7a:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403c7c:	6833      	ldr	r3, [r6, #0]
  403c7e:	4621      	mov	r1, r4
  403c80:	6858      	ldr	r0, [r3, #4]
  403c82:	47a8      	blx	r5
	setbuf(stdout, NULL);
  403c84:	6833      	ldr	r3, [r6, #0]
  403c86:	4621      	mov	r1, r4
  403c88:	6898      	ldr	r0, [r3, #8]
  403c8a:	47a8      	blx	r5
	/* Initialize the console uart */
	configure_console();
	//TC_init(TC0, ID_TC0, 1, 4);
	
	
	if (xTaskCreate(task_mm, "MM", TASK_MM_STACK_SIZE, NULL,TASK_MM_STACK_PRIORITY, NULL) != pdPASS) {
  403c8c:	9403      	str	r4, [sp, #12]
  403c8e:	9402      	str	r4, [sp, #8]
  403c90:	9401      	str	r4, [sp, #4]
  403c92:	9400      	str	r4, [sp, #0]
  403c94:	4623      	mov	r3, r4
  403c96:	f44f 7280 	mov.w	r2, #256	; 0x100
  403c9a:	4920      	ldr	r1, [pc, #128]	; (403d1c <main+0xfc>)
  403c9c:	4820      	ldr	r0, [pc, #128]	; (403d20 <main+0x100>)
  403c9e:	4c21      	ldr	r4, [pc, #132]	; (403d24 <main+0x104>)
  403ca0:	47a0      	blx	r4
  403ca2:	2801      	cmp	r0, #1
  403ca4:	d002      	beq.n	403cac <main+0x8c>
		printf("Failed to create test led task\r\n");
  403ca6:	4820      	ldr	r0, [pc, #128]	; (403d28 <main+0x108>)
  403ca8:	4b20      	ldr	r3, [pc, #128]	; (403d2c <main+0x10c>)
  403caa:	4798      	blx	r3
	}

	///* Create task to make led blink */
	xTaskCreate(task_bluetooth, "BLT", TASK_PROCESS_STACK_SIZE, NULL,	TASK_PROCESS_STACK_PRIORITY, NULL);
  403cac:	2400      	movs	r4, #0
  403cae:	9403      	str	r4, [sp, #12]
  403cb0:	9402      	str	r4, [sp, #8]
  403cb2:	9401      	str	r4, [sp, #4]
  403cb4:	2302      	movs	r3, #2
  403cb6:	9300      	str	r3, [sp, #0]
  403cb8:	4623      	mov	r3, r4
  403cba:	f44f 7200 	mov.w	r2, #512	; 0x200
  403cbe:	491c      	ldr	r1, [pc, #112]	; (403d30 <main+0x110>)
  403cc0:	481c      	ldr	r0, [pc, #112]	; (403d34 <main+0x114>)
  403cc2:	4d18      	ldr	r5, [pc, #96]	; (403d24 <main+0x104>)
  403cc4:	47a8      	blx	r5
	
	
	xTaskCreate(tsk_losing, "roleta", TASK_UARTTX_STACK_SIZE, NULL,TASK_UARTTX_STACK_PRIORITY, NULL);
  403cc6:	9403      	str	r4, [sp, #12]
  403cc8:	9402      	str	r4, [sp, #8]
  403cca:	9401      	str	r4, [sp, #4]
  403ccc:	9400      	str	r4, [sp, #0]
  403cce:	4623      	mov	r3, r4
  403cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
  403cd4:	4918      	ldr	r1, [pc, #96]	; (403d38 <main+0x118>)
  403cd6:	4819      	ldr	r0, [pc, #100]	; (403d3c <main+0x11c>)
  403cd8:	47a8      	blx	r5
  
	/* Start the scheduler. */
	
	vTaskStartScheduler();
  403cda:	4b19      	ldr	r3, [pc, #100]	; (403d40 <main+0x120>)
  403cdc:	4798      	blx	r3
  403cde:	e7fe      	b.n	403cde <main+0xbe>
  403ce0:	004001ad 	.word	0x004001ad
  403ce4:	00400381 	.word	0x00400381
  403ce8:	40028000 	.word	0x40028000
  403cec:	20400c10 	.word	0x20400c10
  403cf0:	00402d55 	.word	0x00402d55
  403cf4:	20400c0c 	.word	0x20400c0c
  403cf8:	00402e29 	.word	0x00402e29
  403cfc:	20400c08 	.word	0x20400c08
  403d00:	0040094d 	.word	0x0040094d
  403d04:	08f0d180 	.word	0x08f0d180
  403d08:	00400c7d 	.word	0x00400c7d
  403d0c:	00400cd1 	.word	0x00400cd1
  403d10:	00400cd7 	.word	0x00400cd7
  403d14:	2040001c 	.word	0x2040001c
  403d18:	00404549 	.word	0x00404549
  403d1c:	00406f40 	.word	0x00406f40
  403d20:	00403341 	.word	0x00403341
  403d24:	00401d49 	.word	0x00401d49
  403d28:	00406f44 	.word	0x00406f44
  403d2c:	00403d95 	.word	0x00403d95
  403d30:	00406f68 	.word	0x00406f68
  403d34:	004035e1 	.word	0x004035e1
  403d38:	00406f6c 	.word	0x00406f6c
  403d3c:	00403aa9 	.word	0x00403aa9
  403d40:	00401f7d 	.word	0x00401f7d

00403d44 <__libc_init_array>:
  403d44:	b570      	push	{r4, r5, r6, lr}
  403d46:	4e0f      	ldr	r6, [pc, #60]	; (403d84 <__libc_init_array+0x40>)
  403d48:	4d0f      	ldr	r5, [pc, #60]	; (403d88 <__libc_init_array+0x44>)
  403d4a:	1b76      	subs	r6, r6, r5
  403d4c:	10b6      	asrs	r6, r6, #2
  403d4e:	bf18      	it	ne
  403d50:	2400      	movne	r4, #0
  403d52:	d005      	beq.n	403d60 <__libc_init_array+0x1c>
  403d54:	3401      	adds	r4, #1
  403d56:	f855 3b04 	ldr.w	r3, [r5], #4
  403d5a:	4798      	blx	r3
  403d5c:	42a6      	cmp	r6, r4
  403d5e:	d1f9      	bne.n	403d54 <__libc_init_array+0x10>
  403d60:	4e0a      	ldr	r6, [pc, #40]	; (403d8c <__libc_init_array+0x48>)
  403d62:	4d0b      	ldr	r5, [pc, #44]	; (403d90 <__libc_init_array+0x4c>)
  403d64:	1b76      	subs	r6, r6, r5
  403d66:	f003 fa01 	bl	40716c <_init>
  403d6a:	10b6      	asrs	r6, r6, #2
  403d6c:	bf18      	it	ne
  403d6e:	2400      	movne	r4, #0
  403d70:	d006      	beq.n	403d80 <__libc_init_array+0x3c>
  403d72:	3401      	adds	r4, #1
  403d74:	f855 3b04 	ldr.w	r3, [r5], #4
  403d78:	4798      	blx	r3
  403d7a:	42a6      	cmp	r6, r4
  403d7c:	d1f9      	bne.n	403d72 <__libc_init_array+0x2e>
  403d7e:	bd70      	pop	{r4, r5, r6, pc}
  403d80:	bd70      	pop	{r4, r5, r6, pc}
  403d82:	bf00      	nop
  403d84:	00407178 	.word	0x00407178
  403d88:	00407178 	.word	0x00407178
  403d8c:	00407180 	.word	0x00407180
  403d90:	00407178 	.word	0x00407178

00403d94 <iprintf>:
  403d94:	b40f      	push	{r0, r1, r2, r3}
  403d96:	b500      	push	{lr}
  403d98:	4907      	ldr	r1, [pc, #28]	; (403db8 <iprintf+0x24>)
  403d9a:	b083      	sub	sp, #12
  403d9c:	ab04      	add	r3, sp, #16
  403d9e:	6808      	ldr	r0, [r1, #0]
  403da0:	f853 2b04 	ldr.w	r2, [r3], #4
  403da4:	6881      	ldr	r1, [r0, #8]
  403da6:	9301      	str	r3, [sp, #4]
  403da8:	f000 fdd8 	bl	40495c <_vfiprintf_r>
  403dac:	b003      	add	sp, #12
  403dae:	f85d eb04 	ldr.w	lr, [sp], #4
  403db2:	b004      	add	sp, #16
  403db4:	4770      	bx	lr
  403db6:	bf00      	nop
  403db8:	2040001c 	.word	0x2040001c

00403dbc <malloc>:
  403dbc:	4b02      	ldr	r3, [pc, #8]	; (403dc8 <malloc+0xc>)
  403dbe:	4601      	mov	r1, r0
  403dc0:	6818      	ldr	r0, [r3, #0]
  403dc2:	f000 b80b 	b.w	403ddc <_malloc_r>
  403dc6:	bf00      	nop
  403dc8:	2040001c 	.word	0x2040001c

00403dcc <free>:
  403dcc:	4b02      	ldr	r3, [pc, #8]	; (403dd8 <free+0xc>)
  403dce:	4601      	mov	r1, r0
  403dd0:	6818      	ldr	r0, [r3, #0]
  403dd2:	f001 bedf 	b.w	405b94 <_free_r>
  403dd6:	bf00      	nop
  403dd8:	2040001c 	.word	0x2040001c

00403ddc <_malloc_r>:
  403ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403de0:	f101 060b 	add.w	r6, r1, #11
  403de4:	2e16      	cmp	r6, #22
  403de6:	b083      	sub	sp, #12
  403de8:	4605      	mov	r5, r0
  403dea:	f240 809e 	bls.w	403f2a <_malloc_r+0x14e>
  403dee:	f036 0607 	bics.w	r6, r6, #7
  403df2:	f100 80bd 	bmi.w	403f70 <_malloc_r+0x194>
  403df6:	42b1      	cmp	r1, r6
  403df8:	f200 80ba 	bhi.w	403f70 <_malloc_r+0x194>
  403dfc:	f000 fb86 	bl	40450c <__malloc_lock>
  403e00:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403e04:	f0c0 8293 	bcc.w	40432e <_malloc_r+0x552>
  403e08:	0a73      	lsrs	r3, r6, #9
  403e0a:	f000 80b8 	beq.w	403f7e <_malloc_r+0x1a2>
  403e0e:	2b04      	cmp	r3, #4
  403e10:	f200 8179 	bhi.w	404106 <_malloc_r+0x32a>
  403e14:	09b3      	lsrs	r3, r6, #6
  403e16:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403e1a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403e1e:	00c3      	lsls	r3, r0, #3
  403e20:	4fbf      	ldr	r7, [pc, #764]	; (404120 <_malloc_r+0x344>)
  403e22:	443b      	add	r3, r7
  403e24:	f1a3 0108 	sub.w	r1, r3, #8
  403e28:	685c      	ldr	r4, [r3, #4]
  403e2a:	42a1      	cmp	r1, r4
  403e2c:	d106      	bne.n	403e3c <_malloc_r+0x60>
  403e2e:	e00c      	b.n	403e4a <_malloc_r+0x6e>
  403e30:	2a00      	cmp	r2, #0
  403e32:	f280 80aa 	bge.w	403f8a <_malloc_r+0x1ae>
  403e36:	68e4      	ldr	r4, [r4, #12]
  403e38:	42a1      	cmp	r1, r4
  403e3a:	d006      	beq.n	403e4a <_malloc_r+0x6e>
  403e3c:	6863      	ldr	r3, [r4, #4]
  403e3e:	f023 0303 	bic.w	r3, r3, #3
  403e42:	1b9a      	subs	r2, r3, r6
  403e44:	2a0f      	cmp	r2, #15
  403e46:	ddf3      	ble.n	403e30 <_malloc_r+0x54>
  403e48:	4670      	mov	r0, lr
  403e4a:	693c      	ldr	r4, [r7, #16]
  403e4c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404134 <_malloc_r+0x358>
  403e50:	4574      	cmp	r4, lr
  403e52:	f000 81ab 	beq.w	4041ac <_malloc_r+0x3d0>
  403e56:	6863      	ldr	r3, [r4, #4]
  403e58:	f023 0303 	bic.w	r3, r3, #3
  403e5c:	1b9a      	subs	r2, r3, r6
  403e5e:	2a0f      	cmp	r2, #15
  403e60:	f300 8190 	bgt.w	404184 <_malloc_r+0x3a8>
  403e64:	2a00      	cmp	r2, #0
  403e66:	f8c7 e014 	str.w	lr, [r7, #20]
  403e6a:	f8c7 e010 	str.w	lr, [r7, #16]
  403e6e:	f280 809d 	bge.w	403fac <_malloc_r+0x1d0>
  403e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403e76:	f080 8161 	bcs.w	40413c <_malloc_r+0x360>
  403e7a:	08db      	lsrs	r3, r3, #3
  403e7c:	f103 0c01 	add.w	ip, r3, #1
  403e80:	1099      	asrs	r1, r3, #2
  403e82:	687a      	ldr	r2, [r7, #4]
  403e84:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403e88:	f8c4 8008 	str.w	r8, [r4, #8]
  403e8c:	2301      	movs	r3, #1
  403e8e:	408b      	lsls	r3, r1
  403e90:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403e94:	4313      	orrs	r3, r2
  403e96:	3908      	subs	r1, #8
  403e98:	60e1      	str	r1, [r4, #12]
  403e9a:	607b      	str	r3, [r7, #4]
  403e9c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403ea0:	f8c8 400c 	str.w	r4, [r8, #12]
  403ea4:	1082      	asrs	r2, r0, #2
  403ea6:	2401      	movs	r4, #1
  403ea8:	4094      	lsls	r4, r2
  403eaa:	429c      	cmp	r4, r3
  403eac:	f200 808b 	bhi.w	403fc6 <_malloc_r+0x1ea>
  403eb0:	421c      	tst	r4, r3
  403eb2:	d106      	bne.n	403ec2 <_malloc_r+0xe6>
  403eb4:	f020 0003 	bic.w	r0, r0, #3
  403eb8:	0064      	lsls	r4, r4, #1
  403eba:	421c      	tst	r4, r3
  403ebc:	f100 0004 	add.w	r0, r0, #4
  403ec0:	d0fa      	beq.n	403eb8 <_malloc_r+0xdc>
  403ec2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403ec6:	46cc      	mov	ip, r9
  403ec8:	4680      	mov	r8, r0
  403eca:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403ece:	459c      	cmp	ip, r3
  403ed0:	d107      	bne.n	403ee2 <_malloc_r+0x106>
  403ed2:	e16d      	b.n	4041b0 <_malloc_r+0x3d4>
  403ed4:	2a00      	cmp	r2, #0
  403ed6:	f280 817b 	bge.w	4041d0 <_malloc_r+0x3f4>
  403eda:	68db      	ldr	r3, [r3, #12]
  403edc:	459c      	cmp	ip, r3
  403ede:	f000 8167 	beq.w	4041b0 <_malloc_r+0x3d4>
  403ee2:	6859      	ldr	r1, [r3, #4]
  403ee4:	f021 0103 	bic.w	r1, r1, #3
  403ee8:	1b8a      	subs	r2, r1, r6
  403eea:	2a0f      	cmp	r2, #15
  403eec:	ddf2      	ble.n	403ed4 <_malloc_r+0xf8>
  403eee:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403ef2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403ef6:	9300      	str	r3, [sp, #0]
  403ef8:	199c      	adds	r4, r3, r6
  403efa:	4628      	mov	r0, r5
  403efc:	f046 0601 	orr.w	r6, r6, #1
  403f00:	f042 0501 	orr.w	r5, r2, #1
  403f04:	605e      	str	r6, [r3, #4]
  403f06:	f8c8 c00c 	str.w	ip, [r8, #12]
  403f0a:	f8cc 8008 	str.w	r8, [ip, #8]
  403f0e:	617c      	str	r4, [r7, #20]
  403f10:	613c      	str	r4, [r7, #16]
  403f12:	f8c4 e00c 	str.w	lr, [r4, #12]
  403f16:	f8c4 e008 	str.w	lr, [r4, #8]
  403f1a:	6065      	str	r5, [r4, #4]
  403f1c:	505a      	str	r2, [r3, r1]
  403f1e:	f000 fafb 	bl	404518 <__malloc_unlock>
  403f22:	9b00      	ldr	r3, [sp, #0]
  403f24:	f103 0408 	add.w	r4, r3, #8
  403f28:	e01e      	b.n	403f68 <_malloc_r+0x18c>
  403f2a:	2910      	cmp	r1, #16
  403f2c:	d820      	bhi.n	403f70 <_malloc_r+0x194>
  403f2e:	f000 faed 	bl	40450c <__malloc_lock>
  403f32:	2610      	movs	r6, #16
  403f34:	2318      	movs	r3, #24
  403f36:	2002      	movs	r0, #2
  403f38:	4f79      	ldr	r7, [pc, #484]	; (404120 <_malloc_r+0x344>)
  403f3a:	443b      	add	r3, r7
  403f3c:	f1a3 0208 	sub.w	r2, r3, #8
  403f40:	685c      	ldr	r4, [r3, #4]
  403f42:	4294      	cmp	r4, r2
  403f44:	f000 813d 	beq.w	4041c2 <_malloc_r+0x3e6>
  403f48:	6863      	ldr	r3, [r4, #4]
  403f4a:	68e1      	ldr	r1, [r4, #12]
  403f4c:	68a6      	ldr	r6, [r4, #8]
  403f4e:	f023 0303 	bic.w	r3, r3, #3
  403f52:	4423      	add	r3, r4
  403f54:	4628      	mov	r0, r5
  403f56:	685a      	ldr	r2, [r3, #4]
  403f58:	60f1      	str	r1, [r6, #12]
  403f5a:	f042 0201 	orr.w	r2, r2, #1
  403f5e:	608e      	str	r6, [r1, #8]
  403f60:	605a      	str	r2, [r3, #4]
  403f62:	f000 fad9 	bl	404518 <__malloc_unlock>
  403f66:	3408      	adds	r4, #8
  403f68:	4620      	mov	r0, r4
  403f6a:	b003      	add	sp, #12
  403f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f70:	2400      	movs	r4, #0
  403f72:	230c      	movs	r3, #12
  403f74:	4620      	mov	r0, r4
  403f76:	602b      	str	r3, [r5, #0]
  403f78:	b003      	add	sp, #12
  403f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f7e:	2040      	movs	r0, #64	; 0x40
  403f80:	f44f 7300 	mov.w	r3, #512	; 0x200
  403f84:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403f88:	e74a      	b.n	403e20 <_malloc_r+0x44>
  403f8a:	4423      	add	r3, r4
  403f8c:	68e1      	ldr	r1, [r4, #12]
  403f8e:	685a      	ldr	r2, [r3, #4]
  403f90:	68a6      	ldr	r6, [r4, #8]
  403f92:	f042 0201 	orr.w	r2, r2, #1
  403f96:	60f1      	str	r1, [r6, #12]
  403f98:	4628      	mov	r0, r5
  403f9a:	608e      	str	r6, [r1, #8]
  403f9c:	605a      	str	r2, [r3, #4]
  403f9e:	f000 fabb 	bl	404518 <__malloc_unlock>
  403fa2:	3408      	adds	r4, #8
  403fa4:	4620      	mov	r0, r4
  403fa6:	b003      	add	sp, #12
  403fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fac:	4423      	add	r3, r4
  403fae:	4628      	mov	r0, r5
  403fb0:	685a      	ldr	r2, [r3, #4]
  403fb2:	f042 0201 	orr.w	r2, r2, #1
  403fb6:	605a      	str	r2, [r3, #4]
  403fb8:	f000 faae 	bl	404518 <__malloc_unlock>
  403fbc:	3408      	adds	r4, #8
  403fbe:	4620      	mov	r0, r4
  403fc0:	b003      	add	sp, #12
  403fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fc6:	68bc      	ldr	r4, [r7, #8]
  403fc8:	6863      	ldr	r3, [r4, #4]
  403fca:	f023 0803 	bic.w	r8, r3, #3
  403fce:	45b0      	cmp	r8, r6
  403fd0:	d304      	bcc.n	403fdc <_malloc_r+0x200>
  403fd2:	eba8 0306 	sub.w	r3, r8, r6
  403fd6:	2b0f      	cmp	r3, #15
  403fd8:	f300 8085 	bgt.w	4040e6 <_malloc_r+0x30a>
  403fdc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404138 <_malloc_r+0x35c>
  403fe0:	4b50      	ldr	r3, [pc, #320]	; (404124 <_malloc_r+0x348>)
  403fe2:	f8d9 2000 	ldr.w	r2, [r9]
  403fe6:	681b      	ldr	r3, [r3, #0]
  403fe8:	3201      	adds	r2, #1
  403fea:	4433      	add	r3, r6
  403fec:	eb04 0a08 	add.w	sl, r4, r8
  403ff0:	f000 8155 	beq.w	40429e <_malloc_r+0x4c2>
  403ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403ff8:	330f      	adds	r3, #15
  403ffa:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403ffe:	f02b 0b0f 	bic.w	fp, fp, #15
  404002:	4659      	mov	r1, fp
  404004:	4628      	mov	r0, r5
  404006:	f000 fa8d 	bl	404524 <_sbrk_r>
  40400a:	1c41      	adds	r1, r0, #1
  40400c:	4602      	mov	r2, r0
  40400e:	f000 80fc 	beq.w	40420a <_malloc_r+0x42e>
  404012:	4582      	cmp	sl, r0
  404014:	f200 80f7 	bhi.w	404206 <_malloc_r+0x42a>
  404018:	4b43      	ldr	r3, [pc, #268]	; (404128 <_malloc_r+0x34c>)
  40401a:	6819      	ldr	r1, [r3, #0]
  40401c:	4459      	add	r1, fp
  40401e:	6019      	str	r1, [r3, #0]
  404020:	f000 814d 	beq.w	4042be <_malloc_r+0x4e2>
  404024:	f8d9 0000 	ldr.w	r0, [r9]
  404028:	3001      	adds	r0, #1
  40402a:	bf1b      	ittet	ne
  40402c:	eba2 0a0a 	subne.w	sl, r2, sl
  404030:	4451      	addne	r1, sl
  404032:	f8c9 2000 	streq.w	r2, [r9]
  404036:	6019      	strne	r1, [r3, #0]
  404038:	f012 0107 	ands.w	r1, r2, #7
  40403c:	f000 8115 	beq.w	40426a <_malloc_r+0x48e>
  404040:	f1c1 0008 	rsb	r0, r1, #8
  404044:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404048:	4402      	add	r2, r0
  40404a:	3108      	adds	r1, #8
  40404c:	eb02 090b 	add.w	r9, r2, fp
  404050:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404054:	eba1 0909 	sub.w	r9, r1, r9
  404058:	4649      	mov	r1, r9
  40405a:	4628      	mov	r0, r5
  40405c:	9301      	str	r3, [sp, #4]
  40405e:	9200      	str	r2, [sp, #0]
  404060:	f000 fa60 	bl	404524 <_sbrk_r>
  404064:	1c43      	adds	r3, r0, #1
  404066:	e89d 000c 	ldmia.w	sp, {r2, r3}
  40406a:	f000 8143 	beq.w	4042f4 <_malloc_r+0x518>
  40406e:	1a80      	subs	r0, r0, r2
  404070:	4448      	add	r0, r9
  404072:	f040 0001 	orr.w	r0, r0, #1
  404076:	6819      	ldr	r1, [r3, #0]
  404078:	60ba      	str	r2, [r7, #8]
  40407a:	4449      	add	r1, r9
  40407c:	42bc      	cmp	r4, r7
  40407e:	6050      	str	r0, [r2, #4]
  404080:	6019      	str	r1, [r3, #0]
  404082:	d017      	beq.n	4040b4 <_malloc_r+0x2d8>
  404084:	f1b8 0f0f 	cmp.w	r8, #15
  404088:	f240 80fb 	bls.w	404282 <_malloc_r+0x4a6>
  40408c:	6860      	ldr	r0, [r4, #4]
  40408e:	f1a8 020c 	sub.w	r2, r8, #12
  404092:	f022 0207 	bic.w	r2, r2, #7
  404096:	eb04 0e02 	add.w	lr, r4, r2
  40409a:	f000 0001 	and.w	r0, r0, #1
  40409e:	f04f 0c05 	mov.w	ip, #5
  4040a2:	4310      	orrs	r0, r2
  4040a4:	2a0f      	cmp	r2, #15
  4040a6:	6060      	str	r0, [r4, #4]
  4040a8:	f8ce c004 	str.w	ip, [lr, #4]
  4040ac:	f8ce c008 	str.w	ip, [lr, #8]
  4040b0:	f200 8117 	bhi.w	4042e2 <_malloc_r+0x506>
  4040b4:	4b1d      	ldr	r3, [pc, #116]	; (40412c <_malloc_r+0x350>)
  4040b6:	68bc      	ldr	r4, [r7, #8]
  4040b8:	681a      	ldr	r2, [r3, #0]
  4040ba:	4291      	cmp	r1, r2
  4040bc:	bf88      	it	hi
  4040be:	6019      	strhi	r1, [r3, #0]
  4040c0:	4b1b      	ldr	r3, [pc, #108]	; (404130 <_malloc_r+0x354>)
  4040c2:	681a      	ldr	r2, [r3, #0]
  4040c4:	4291      	cmp	r1, r2
  4040c6:	6862      	ldr	r2, [r4, #4]
  4040c8:	bf88      	it	hi
  4040ca:	6019      	strhi	r1, [r3, #0]
  4040cc:	f022 0203 	bic.w	r2, r2, #3
  4040d0:	4296      	cmp	r6, r2
  4040d2:	eba2 0306 	sub.w	r3, r2, r6
  4040d6:	d801      	bhi.n	4040dc <_malloc_r+0x300>
  4040d8:	2b0f      	cmp	r3, #15
  4040da:	dc04      	bgt.n	4040e6 <_malloc_r+0x30a>
  4040dc:	4628      	mov	r0, r5
  4040de:	f000 fa1b 	bl	404518 <__malloc_unlock>
  4040e2:	2400      	movs	r4, #0
  4040e4:	e740      	b.n	403f68 <_malloc_r+0x18c>
  4040e6:	19a2      	adds	r2, r4, r6
  4040e8:	f043 0301 	orr.w	r3, r3, #1
  4040ec:	f046 0601 	orr.w	r6, r6, #1
  4040f0:	6066      	str	r6, [r4, #4]
  4040f2:	4628      	mov	r0, r5
  4040f4:	60ba      	str	r2, [r7, #8]
  4040f6:	6053      	str	r3, [r2, #4]
  4040f8:	f000 fa0e 	bl	404518 <__malloc_unlock>
  4040fc:	3408      	adds	r4, #8
  4040fe:	4620      	mov	r0, r4
  404100:	b003      	add	sp, #12
  404102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404106:	2b14      	cmp	r3, #20
  404108:	d971      	bls.n	4041ee <_malloc_r+0x412>
  40410a:	2b54      	cmp	r3, #84	; 0x54
  40410c:	f200 80a3 	bhi.w	404256 <_malloc_r+0x47a>
  404110:	0b33      	lsrs	r3, r6, #12
  404112:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404116:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40411a:	00c3      	lsls	r3, r0, #3
  40411c:	e680      	b.n	403e20 <_malloc_r+0x44>
  40411e:	bf00      	nop
  404120:	20400448 	.word	0x20400448
  404124:	20400c04 	.word	0x20400c04
  404128:	20400bd4 	.word	0x20400bd4
  40412c:	20400bfc 	.word	0x20400bfc
  404130:	20400c00 	.word	0x20400c00
  404134:	20400450 	.word	0x20400450
  404138:	20400850 	.word	0x20400850
  40413c:	0a5a      	lsrs	r2, r3, #9
  40413e:	2a04      	cmp	r2, #4
  404140:	d95b      	bls.n	4041fa <_malloc_r+0x41e>
  404142:	2a14      	cmp	r2, #20
  404144:	f200 80ae 	bhi.w	4042a4 <_malloc_r+0x4c8>
  404148:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  40414c:	00c9      	lsls	r1, r1, #3
  40414e:	325b      	adds	r2, #91	; 0x5b
  404150:	eb07 0c01 	add.w	ip, r7, r1
  404154:	5879      	ldr	r1, [r7, r1]
  404156:	f1ac 0c08 	sub.w	ip, ip, #8
  40415a:	458c      	cmp	ip, r1
  40415c:	f000 8088 	beq.w	404270 <_malloc_r+0x494>
  404160:	684a      	ldr	r2, [r1, #4]
  404162:	f022 0203 	bic.w	r2, r2, #3
  404166:	4293      	cmp	r3, r2
  404168:	d273      	bcs.n	404252 <_malloc_r+0x476>
  40416a:	6889      	ldr	r1, [r1, #8]
  40416c:	458c      	cmp	ip, r1
  40416e:	d1f7      	bne.n	404160 <_malloc_r+0x384>
  404170:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404174:	687b      	ldr	r3, [r7, #4]
  404176:	60e2      	str	r2, [r4, #12]
  404178:	f8c4 c008 	str.w	ip, [r4, #8]
  40417c:	6094      	str	r4, [r2, #8]
  40417e:	f8cc 400c 	str.w	r4, [ip, #12]
  404182:	e68f      	b.n	403ea4 <_malloc_r+0xc8>
  404184:	19a1      	adds	r1, r4, r6
  404186:	f046 0c01 	orr.w	ip, r6, #1
  40418a:	f042 0601 	orr.w	r6, r2, #1
  40418e:	f8c4 c004 	str.w	ip, [r4, #4]
  404192:	4628      	mov	r0, r5
  404194:	6179      	str	r1, [r7, #20]
  404196:	6139      	str	r1, [r7, #16]
  404198:	f8c1 e00c 	str.w	lr, [r1, #12]
  40419c:	f8c1 e008 	str.w	lr, [r1, #8]
  4041a0:	604e      	str	r6, [r1, #4]
  4041a2:	50e2      	str	r2, [r4, r3]
  4041a4:	f000 f9b8 	bl	404518 <__malloc_unlock>
  4041a8:	3408      	adds	r4, #8
  4041aa:	e6dd      	b.n	403f68 <_malloc_r+0x18c>
  4041ac:	687b      	ldr	r3, [r7, #4]
  4041ae:	e679      	b.n	403ea4 <_malloc_r+0xc8>
  4041b0:	f108 0801 	add.w	r8, r8, #1
  4041b4:	f018 0f03 	tst.w	r8, #3
  4041b8:	f10c 0c08 	add.w	ip, ip, #8
  4041bc:	f47f ae85 	bne.w	403eca <_malloc_r+0xee>
  4041c0:	e02d      	b.n	40421e <_malloc_r+0x442>
  4041c2:	68dc      	ldr	r4, [r3, #12]
  4041c4:	42a3      	cmp	r3, r4
  4041c6:	bf08      	it	eq
  4041c8:	3002      	addeq	r0, #2
  4041ca:	f43f ae3e 	beq.w	403e4a <_malloc_r+0x6e>
  4041ce:	e6bb      	b.n	403f48 <_malloc_r+0x16c>
  4041d0:	4419      	add	r1, r3
  4041d2:	461c      	mov	r4, r3
  4041d4:	684a      	ldr	r2, [r1, #4]
  4041d6:	68db      	ldr	r3, [r3, #12]
  4041d8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4041dc:	f042 0201 	orr.w	r2, r2, #1
  4041e0:	604a      	str	r2, [r1, #4]
  4041e2:	4628      	mov	r0, r5
  4041e4:	60f3      	str	r3, [r6, #12]
  4041e6:	609e      	str	r6, [r3, #8]
  4041e8:	f000 f996 	bl	404518 <__malloc_unlock>
  4041ec:	e6bc      	b.n	403f68 <_malloc_r+0x18c>
  4041ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4041f2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4041f6:	00c3      	lsls	r3, r0, #3
  4041f8:	e612      	b.n	403e20 <_malloc_r+0x44>
  4041fa:	099a      	lsrs	r2, r3, #6
  4041fc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404200:	00c9      	lsls	r1, r1, #3
  404202:	3238      	adds	r2, #56	; 0x38
  404204:	e7a4      	b.n	404150 <_malloc_r+0x374>
  404206:	42bc      	cmp	r4, r7
  404208:	d054      	beq.n	4042b4 <_malloc_r+0x4d8>
  40420a:	68bc      	ldr	r4, [r7, #8]
  40420c:	6862      	ldr	r2, [r4, #4]
  40420e:	f022 0203 	bic.w	r2, r2, #3
  404212:	e75d      	b.n	4040d0 <_malloc_r+0x2f4>
  404214:	f859 3908 	ldr.w	r3, [r9], #-8
  404218:	4599      	cmp	r9, r3
  40421a:	f040 8086 	bne.w	40432a <_malloc_r+0x54e>
  40421e:	f010 0f03 	tst.w	r0, #3
  404222:	f100 30ff 	add.w	r0, r0, #4294967295
  404226:	d1f5      	bne.n	404214 <_malloc_r+0x438>
  404228:	687b      	ldr	r3, [r7, #4]
  40422a:	ea23 0304 	bic.w	r3, r3, r4
  40422e:	607b      	str	r3, [r7, #4]
  404230:	0064      	lsls	r4, r4, #1
  404232:	429c      	cmp	r4, r3
  404234:	f63f aec7 	bhi.w	403fc6 <_malloc_r+0x1ea>
  404238:	2c00      	cmp	r4, #0
  40423a:	f43f aec4 	beq.w	403fc6 <_malloc_r+0x1ea>
  40423e:	421c      	tst	r4, r3
  404240:	4640      	mov	r0, r8
  404242:	f47f ae3e 	bne.w	403ec2 <_malloc_r+0xe6>
  404246:	0064      	lsls	r4, r4, #1
  404248:	421c      	tst	r4, r3
  40424a:	f100 0004 	add.w	r0, r0, #4
  40424e:	d0fa      	beq.n	404246 <_malloc_r+0x46a>
  404250:	e637      	b.n	403ec2 <_malloc_r+0xe6>
  404252:	468c      	mov	ip, r1
  404254:	e78c      	b.n	404170 <_malloc_r+0x394>
  404256:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40425a:	d815      	bhi.n	404288 <_malloc_r+0x4ac>
  40425c:	0bf3      	lsrs	r3, r6, #15
  40425e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404262:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404266:	00c3      	lsls	r3, r0, #3
  404268:	e5da      	b.n	403e20 <_malloc_r+0x44>
  40426a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  40426e:	e6ed      	b.n	40404c <_malloc_r+0x270>
  404270:	687b      	ldr	r3, [r7, #4]
  404272:	1092      	asrs	r2, r2, #2
  404274:	2101      	movs	r1, #1
  404276:	fa01 f202 	lsl.w	r2, r1, r2
  40427a:	4313      	orrs	r3, r2
  40427c:	607b      	str	r3, [r7, #4]
  40427e:	4662      	mov	r2, ip
  404280:	e779      	b.n	404176 <_malloc_r+0x39a>
  404282:	2301      	movs	r3, #1
  404284:	6053      	str	r3, [r2, #4]
  404286:	e729      	b.n	4040dc <_malloc_r+0x300>
  404288:	f240 5254 	movw	r2, #1364	; 0x554
  40428c:	4293      	cmp	r3, r2
  40428e:	d822      	bhi.n	4042d6 <_malloc_r+0x4fa>
  404290:	0cb3      	lsrs	r3, r6, #18
  404292:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404296:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40429a:	00c3      	lsls	r3, r0, #3
  40429c:	e5c0      	b.n	403e20 <_malloc_r+0x44>
  40429e:	f103 0b10 	add.w	fp, r3, #16
  4042a2:	e6ae      	b.n	404002 <_malloc_r+0x226>
  4042a4:	2a54      	cmp	r2, #84	; 0x54
  4042a6:	d829      	bhi.n	4042fc <_malloc_r+0x520>
  4042a8:	0b1a      	lsrs	r2, r3, #12
  4042aa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4042ae:	00c9      	lsls	r1, r1, #3
  4042b0:	326e      	adds	r2, #110	; 0x6e
  4042b2:	e74d      	b.n	404150 <_malloc_r+0x374>
  4042b4:	4b20      	ldr	r3, [pc, #128]	; (404338 <_malloc_r+0x55c>)
  4042b6:	6819      	ldr	r1, [r3, #0]
  4042b8:	4459      	add	r1, fp
  4042ba:	6019      	str	r1, [r3, #0]
  4042bc:	e6b2      	b.n	404024 <_malloc_r+0x248>
  4042be:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4042c2:	2800      	cmp	r0, #0
  4042c4:	f47f aeae 	bne.w	404024 <_malloc_r+0x248>
  4042c8:	eb08 030b 	add.w	r3, r8, fp
  4042cc:	68ba      	ldr	r2, [r7, #8]
  4042ce:	f043 0301 	orr.w	r3, r3, #1
  4042d2:	6053      	str	r3, [r2, #4]
  4042d4:	e6ee      	b.n	4040b4 <_malloc_r+0x2d8>
  4042d6:	207f      	movs	r0, #127	; 0x7f
  4042d8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4042dc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4042e0:	e59e      	b.n	403e20 <_malloc_r+0x44>
  4042e2:	f104 0108 	add.w	r1, r4, #8
  4042e6:	4628      	mov	r0, r5
  4042e8:	9300      	str	r3, [sp, #0]
  4042ea:	f001 fc53 	bl	405b94 <_free_r>
  4042ee:	9b00      	ldr	r3, [sp, #0]
  4042f0:	6819      	ldr	r1, [r3, #0]
  4042f2:	e6df      	b.n	4040b4 <_malloc_r+0x2d8>
  4042f4:	2001      	movs	r0, #1
  4042f6:	f04f 0900 	mov.w	r9, #0
  4042fa:	e6bc      	b.n	404076 <_malloc_r+0x29a>
  4042fc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404300:	d805      	bhi.n	40430e <_malloc_r+0x532>
  404302:	0bda      	lsrs	r2, r3, #15
  404304:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404308:	00c9      	lsls	r1, r1, #3
  40430a:	3277      	adds	r2, #119	; 0x77
  40430c:	e720      	b.n	404150 <_malloc_r+0x374>
  40430e:	f240 5154 	movw	r1, #1364	; 0x554
  404312:	428a      	cmp	r2, r1
  404314:	d805      	bhi.n	404322 <_malloc_r+0x546>
  404316:	0c9a      	lsrs	r2, r3, #18
  404318:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  40431c:	00c9      	lsls	r1, r1, #3
  40431e:	327c      	adds	r2, #124	; 0x7c
  404320:	e716      	b.n	404150 <_malloc_r+0x374>
  404322:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404326:	227e      	movs	r2, #126	; 0x7e
  404328:	e712      	b.n	404150 <_malloc_r+0x374>
  40432a:	687b      	ldr	r3, [r7, #4]
  40432c:	e780      	b.n	404230 <_malloc_r+0x454>
  40432e:	08f0      	lsrs	r0, r6, #3
  404330:	f106 0308 	add.w	r3, r6, #8
  404334:	e600      	b.n	403f38 <_malloc_r+0x15c>
  404336:	bf00      	nop
  404338:	20400bd4 	.word	0x20400bd4

0040433c <memcpy>:
  40433c:	4684      	mov	ip, r0
  40433e:	ea41 0300 	orr.w	r3, r1, r0
  404342:	f013 0303 	ands.w	r3, r3, #3
  404346:	d16d      	bne.n	404424 <memcpy+0xe8>
  404348:	3a40      	subs	r2, #64	; 0x40
  40434a:	d341      	bcc.n	4043d0 <memcpy+0x94>
  40434c:	f851 3b04 	ldr.w	r3, [r1], #4
  404350:	f840 3b04 	str.w	r3, [r0], #4
  404354:	f851 3b04 	ldr.w	r3, [r1], #4
  404358:	f840 3b04 	str.w	r3, [r0], #4
  40435c:	f851 3b04 	ldr.w	r3, [r1], #4
  404360:	f840 3b04 	str.w	r3, [r0], #4
  404364:	f851 3b04 	ldr.w	r3, [r1], #4
  404368:	f840 3b04 	str.w	r3, [r0], #4
  40436c:	f851 3b04 	ldr.w	r3, [r1], #4
  404370:	f840 3b04 	str.w	r3, [r0], #4
  404374:	f851 3b04 	ldr.w	r3, [r1], #4
  404378:	f840 3b04 	str.w	r3, [r0], #4
  40437c:	f851 3b04 	ldr.w	r3, [r1], #4
  404380:	f840 3b04 	str.w	r3, [r0], #4
  404384:	f851 3b04 	ldr.w	r3, [r1], #4
  404388:	f840 3b04 	str.w	r3, [r0], #4
  40438c:	f851 3b04 	ldr.w	r3, [r1], #4
  404390:	f840 3b04 	str.w	r3, [r0], #4
  404394:	f851 3b04 	ldr.w	r3, [r1], #4
  404398:	f840 3b04 	str.w	r3, [r0], #4
  40439c:	f851 3b04 	ldr.w	r3, [r1], #4
  4043a0:	f840 3b04 	str.w	r3, [r0], #4
  4043a4:	f851 3b04 	ldr.w	r3, [r1], #4
  4043a8:	f840 3b04 	str.w	r3, [r0], #4
  4043ac:	f851 3b04 	ldr.w	r3, [r1], #4
  4043b0:	f840 3b04 	str.w	r3, [r0], #4
  4043b4:	f851 3b04 	ldr.w	r3, [r1], #4
  4043b8:	f840 3b04 	str.w	r3, [r0], #4
  4043bc:	f851 3b04 	ldr.w	r3, [r1], #4
  4043c0:	f840 3b04 	str.w	r3, [r0], #4
  4043c4:	f851 3b04 	ldr.w	r3, [r1], #4
  4043c8:	f840 3b04 	str.w	r3, [r0], #4
  4043cc:	3a40      	subs	r2, #64	; 0x40
  4043ce:	d2bd      	bcs.n	40434c <memcpy+0x10>
  4043d0:	3230      	adds	r2, #48	; 0x30
  4043d2:	d311      	bcc.n	4043f8 <memcpy+0xbc>
  4043d4:	f851 3b04 	ldr.w	r3, [r1], #4
  4043d8:	f840 3b04 	str.w	r3, [r0], #4
  4043dc:	f851 3b04 	ldr.w	r3, [r1], #4
  4043e0:	f840 3b04 	str.w	r3, [r0], #4
  4043e4:	f851 3b04 	ldr.w	r3, [r1], #4
  4043e8:	f840 3b04 	str.w	r3, [r0], #4
  4043ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4043f0:	f840 3b04 	str.w	r3, [r0], #4
  4043f4:	3a10      	subs	r2, #16
  4043f6:	d2ed      	bcs.n	4043d4 <memcpy+0x98>
  4043f8:	320c      	adds	r2, #12
  4043fa:	d305      	bcc.n	404408 <memcpy+0xcc>
  4043fc:	f851 3b04 	ldr.w	r3, [r1], #4
  404400:	f840 3b04 	str.w	r3, [r0], #4
  404404:	3a04      	subs	r2, #4
  404406:	d2f9      	bcs.n	4043fc <memcpy+0xc0>
  404408:	3204      	adds	r2, #4
  40440a:	d008      	beq.n	40441e <memcpy+0xe2>
  40440c:	07d2      	lsls	r2, r2, #31
  40440e:	bf1c      	itt	ne
  404410:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404414:	f800 3b01 	strbne.w	r3, [r0], #1
  404418:	d301      	bcc.n	40441e <memcpy+0xe2>
  40441a:	880b      	ldrh	r3, [r1, #0]
  40441c:	8003      	strh	r3, [r0, #0]
  40441e:	4660      	mov	r0, ip
  404420:	4770      	bx	lr
  404422:	bf00      	nop
  404424:	2a08      	cmp	r2, #8
  404426:	d313      	bcc.n	404450 <memcpy+0x114>
  404428:	078b      	lsls	r3, r1, #30
  40442a:	d08d      	beq.n	404348 <memcpy+0xc>
  40442c:	f010 0303 	ands.w	r3, r0, #3
  404430:	d08a      	beq.n	404348 <memcpy+0xc>
  404432:	f1c3 0304 	rsb	r3, r3, #4
  404436:	1ad2      	subs	r2, r2, r3
  404438:	07db      	lsls	r3, r3, #31
  40443a:	bf1c      	itt	ne
  40443c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404440:	f800 3b01 	strbne.w	r3, [r0], #1
  404444:	d380      	bcc.n	404348 <memcpy+0xc>
  404446:	f831 3b02 	ldrh.w	r3, [r1], #2
  40444a:	f820 3b02 	strh.w	r3, [r0], #2
  40444e:	e77b      	b.n	404348 <memcpy+0xc>
  404450:	3a04      	subs	r2, #4
  404452:	d3d9      	bcc.n	404408 <memcpy+0xcc>
  404454:	3a01      	subs	r2, #1
  404456:	f811 3b01 	ldrb.w	r3, [r1], #1
  40445a:	f800 3b01 	strb.w	r3, [r0], #1
  40445e:	d2f9      	bcs.n	404454 <memcpy+0x118>
  404460:	780b      	ldrb	r3, [r1, #0]
  404462:	7003      	strb	r3, [r0, #0]
  404464:	784b      	ldrb	r3, [r1, #1]
  404466:	7043      	strb	r3, [r0, #1]
  404468:	788b      	ldrb	r3, [r1, #2]
  40446a:	7083      	strb	r3, [r0, #2]
  40446c:	4660      	mov	r0, ip
  40446e:	4770      	bx	lr

00404470 <memset>:
  404470:	b470      	push	{r4, r5, r6}
  404472:	0786      	lsls	r6, r0, #30
  404474:	d046      	beq.n	404504 <memset+0x94>
  404476:	1e54      	subs	r4, r2, #1
  404478:	2a00      	cmp	r2, #0
  40447a:	d041      	beq.n	404500 <memset+0x90>
  40447c:	b2ca      	uxtb	r2, r1
  40447e:	4603      	mov	r3, r0
  404480:	e002      	b.n	404488 <memset+0x18>
  404482:	f114 34ff 	adds.w	r4, r4, #4294967295
  404486:	d33b      	bcc.n	404500 <memset+0x90>
  404488:	f803 2b01 	strb.w	r2, [r3], #1
  40448c:	079d      	lsls	r5, r3, #30
  40448e:	d1f8      	bne.n	404482 <memset+0x12>
  404490:	2c03      	cmp	r4, #3
  404492:	d92e      	bls.n	4044f2 <memset+0x82>
  404494:	b2cd      	uxtb	r5, r1
  404496:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40449a:	2c0f      	cmp	r4, #15
  40449c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4044a0:	d919      	bls.n	4044d6 <memset+0x66>
  4044a2:	f103 0210 	add.w	r2, r3, #16
  4044a6:	4626      	mov	r6, r4
  4044a8:	3e10      	subs	r6, #16
  4044aa:	2e0f      	cmp	r6, #15
  4044ac:	f842 5c10 	str.w	r5, [r2, #-16]
  4044b0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4044b4:	f842 5c08 	str.w	r5, [r2, #-8]
  4044b8:	f842 5c04 	str.w	r5, [r2, #-4]
  4044bc:	f102 0210 	add.w	r2, r2, #16
  4044c0:	d8f2      	bhi.n	4044a8 <memset+0x38>
  4044c2:	f1a4 0210 	sub.w	r2, r4, #16
  4044c6:	f022 020f 	bic.w	r2, r2, #15
  4044ca:	f004 040f 	and.w	r4, r4, #15
  4044ce:	3210      	adds	r2, #16
  4044d0:	2c03      	cmp	r4, #3
  4044d2:	4413      	add	r3, r2
  4044d4:	d90d      	bls.n	4044f2 <memset+0x82>
  4044d6:	461e      	mov	r6, r3
  4044d8:	4622      	mov	r2, r4
  4044da:	3a04      	subs	r2, #4
  4044dc:	2a03      	cmp	r2, #3
  4044de:	f846 5b04 	str.w	r5, [r6], #4
  4044e2:	d8fa      	bhi.n	4044da <memset+0x6a>
  4044e4:	1f22      	subs	r2, r4, #4
  4044e6:	f022 0203 	bic.w	r2, r2, #3
  4044ea:	3204      	adds	r2, #4
  4044ec:	4413      	add	r3, r2
  4044ee:	f004 0403 	and.w	r4, r4, #3
  4044f2:	b12c      	cbz	r4, 404500 <memset+0x90>
  4044f4:	b2c9      	uxtb	r1, r1
  4044f6:	441c      	add	r4, r3
  4044f8:	f803 1b01 	strb.w	r1, [r3], #1
  4044fc:	429c      	cmp	r4, r3
  4044fe:	d1fb      	bne.n	4044f8 <memset+0x88>
  404500:	bc70      	pop	{r4, r5, r6}
  404502:	4770      	bx	lr
  404504:	4614      	mov	r4, r2
  404506:	4603      	mov	r3, r0
  404508:	e7c2      	b.n	404490 <memset+0x20>
  40450a:	bf00      	nop

0040450c <__malloc_lock>:
  40450c:	4801      	ldr	r0, [pc, #4]	; (404514 <__malloc_lock+0x8>)
  40450e:	f001 bddb 	b.w	4060c8 <__retarget_lock_acquire_recursive>
  404512:	bf00      	nop
  404514:	20400cac 	.word	0x20400cac

00404518 <__malloc_unlock>:
  404518:	4801      	ldr	r0, [pc, #4]	; (404520 <__malloc_unlock+0x8>)
  40451a:	f001 bdd7 	b.w	4060cc <__retarget_lock_release_recursive>
  40451e:	bf00      	nop
  404520:	20400cac 	.word	0x20400cac

00404524 <_sbrk_r>:
  404524:	b538      	push	{r3, r4, r5, lr}
  404526:	4c07      	ldr	r4, [pc, #28]	; (404544 <_sbrk_r+0x20>)
  404528:	2300      	movs	r3, #0
  40452a:	4605      	mov	r5, r0
  40452c:	4608      	mov	r0, r1
  40452e:	6023      	str	r3, [r4, #0]
  404530:	f7fc fd1c 	bl	400f6c <_sbrk>
  404534:	1c43      	adds	r3, r0, #1
  404536:	d000      	beq.n	40453a <_sbrk_r+0x16>
  404538:	bd38      	pop	{r3, r4, r5, pc}
  40453a:	6823      	ldr	r3, [r4, #0]
  40453c:	2b00      	cmp	r3, #0
  40453e:	d0fb      	beq.n	404538 <_sbrk_r+0x14>
  404540:	602b      	str	r3, [r5, #0]
  404542:	bd38      	pop	{r3, r4, r5, pc}
  404544:	20400cc0 	.word	0x20400cc0

00404548 <setbuf>:
  404548:	2900      	cmp	r1, #0
  40454a:	bf0c      	ite	eq
  40454c:	2202      	moveq	r2, #2
  40454e:	2200      	movne	r2, #0
  404550:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404554:	f000 b800 	b.w	404558 <setvbuf>

00404558 <setvbuf>:
  404558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40455c:	4c61      	ldr	r4, [pc, #388]	; (4046e4 <setvbuf+0x18c>)
  40455e:	6825      	ldr	r5, [r4, #0]
  404560:	b083      	sub	sp, #12
  404562:	4604      	mov	r4, r0
  404564:	460f      	mov	r7, r1
  404566:	4690      	mov	r8, r2
  404568:	461e      	mov	r6, r3
  40456a:	b115      	cbz	r5, 404572 <setvbuf+0x1a>
  40456c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40456e:	2b00      	cmp	r3, #0
  404570:	d064      	beq.n	40463c <setvbuf+0xe4>
  404572:	f1b8 0f02 	cmp.w	r8, #2
  404576:	d006      	beq.n	404586 <setvbuf+0x2e>
  404578:	f1b8 0f01 	cmp.w	r8, #1
  40457c:	f200 809f 	bhi.w	4046be <setvbuf+0x166>
  404580:	2e00      	cmp	r6, #0
  404582:	f2c0 809c 	blt.w	4046be <setvbuf+0x166>
  404586:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404588:	07d8      	lsls	r0, r3, #31
  40458a:	d534      	bpl.n	4045f6 <setvbuf+0x9e>
  40458c:	4621      	mov	r1, r4
  40458e:	4628      	mov	r0, r5
  404590:	f001 f982 	bl	405898 <_fflush_r>
  404594:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404596:	b141      	cbz	r1, 4045aa <setvbuf+0x52>
  404598:	f104 0340 	add.w	r3, r4, #64	; 0x40
  40459c:	4299      	cmp	r1, r3
  40459e:	d002      	beq.n	4045a6 <setvbuf+0x4e>
  4045a0:	4628      	mov	r0, r5
  4045a2:	f001 faf7 	bl	405b94 <_free_r>
  4045a6:	2300      	movs	r3, #0
  4045a8:	6323      	str	r3, [r4, #48]	; 0x30
  4045aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045ae:	2200      	movs	r2, #0
  4045b0:	61a2      	str	r2, [r4, #24]
  4045b2:	6062      	str	r2, [r4, #4]
  4045b4:	061a      	lsls	r2, r3, #24
  4045b6:	d43a      	bmi.n	40462e <setvbuf+0xd6>
  4045b8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4045bc:	f023 0303 	bic.w	r3, r3, #3
  4045c0:	f1b8 0f02 	cmp.w	r8, #2
  4045c4:	81a3      	strh	r3, [r4, #12]
  4045c6:	d01d      	beq.n	404604 <setvbuf+0xac>
  4045c8:	ab01      	add	r3, sp, #4
  4045ca:	466a      	mov	r2, sp
  4045cc:	4621      	mov	r1, r4
  4045ce:	4628      	mov	r0, r5
  4045d0:	f001 fd7e 	bl	4060d0 <__swhatbuf_r>
  4045d4:	89a3      	ldrh	r3, [r4, #12]
  4045d6:	4318      	orrs	r0, r3
  4045d8:	81a0      	strh	r0, [r4, #12]
  4045da:	2e00      	cmp	r6, #0
  4045dc:	d132      	bne.n	404644 <setvbuf+0xec>
  4045de:	9e00      	ldr	r6, [sp, #0]
  4045e0:	4630      	mov	r0, r6
  4045e2:	f7ff fbeb 	bl	403dbc <malloc>
  4045e6:	4607      	mov	r7, r0
  4045e8:	2800      	cmp	r0, #0
  4045ea:	d06b      	beq.n	4046c4 <setvbuf+0x16c>
  4045ec:	89a3      	ldrh	r3, [r4, #12]
  4045ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4045f2:	81a3      	strh	r3, [r4, #12]
  4045f4:	e028      	b.n	404648 <setvbuf+0xf0>
  4045f6:	89a3      	ldrh	r3, [r4, #12]
  4045f8:	0599      	lsls	r1, r3, #22
  4045fa:	d4c7      	bmi.n	40458c <setvbuf+0x34>
  4045fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4045fe:	f001 fd63 	bl	4060c8 <__retarget_lock_acquire_recursive>
  404602:	e7c3      	b.n	40458c <setvbuf+0x34>
  404604:	2500      	movs	r5, #0
  404606:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404608:	2600      	movs	r6, #0
  40460a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40460e:	f043 0302 	orr.w	r3, r3, #2
  404612:	2001      	movs	r0, #1
  404614:	60a6      	str	r6, [r4, #8]
  404616:	07ce      	lsls	r6, r1, #31
  404618:	81a3      	strh	r3, [r4, #12]
  40461a:	6022      	str	r2, [r4, #0]
  40461c:	6122      	str	r2, [r4, #16]
  40461e:	6160      	str	r0, [r4, #20]
  404620:	d401      	bmi.n	404626 <setvbuf+0xce>
  404622:	0598      	lsls	r0, r3, #22
  404624:	d53e      	bpl.n	4046a4 <setvbuf+0x14c>
  404626:	4628      	mov	r0, r5
  404628:	b003      	add	sp, #12
  40462a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40462e:	6921      	ldr	r1, [r4, #16]
  404630:	4628      	mov	r0, r5
  404632:	f001 faaf 	bl	405b94 <_free_r>
  404636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40463a:	e7bd      	b.n	4045b8 <setvbuf+0x60>
  40463c:	4628      	mov	r0, r5
  40463e:	f001 f983 	bl	405948 <__sinit>
  404642:	e796      	b.n	404572 <setvbuf+0x1a>
  404644:	2f00      	cmp	r7, #0
  404646:	d0cb      	beq.n	4045e0 <setvbuf+0x88>
  404648:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40464a:	2b00      	cmp	r3, #0
  40464c:	d033      	beq.n	4046b6 <setvbuf+0x15e>
  40464e:	9b00      	ldr	r3, [sp, #0]
  404650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404654:	6027      	str	r7, [r4, #0]
  404656:	429e      	cmp	r6, r3
  404658:	bf1c      	itt	ne
  40465a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40465e:	81a2      	strhne	r2, [r4, #12]
  404660:	f1b8 0f01 	cmp.w	r8, #1
  404664:	bf04      	itt	eq
  404666:	f042 0201 	orreq.w	r2, r2, #1
  40466a:	81a2      	strheq	r2, [r4, #12]
  40466c:	b292      	uxth	r2, r2
  40466e:	f012 0308 	ands.w	r3, r2, #8
  404672:	6127      	str	r7, [r4, #16]
  404674:	6166      	str	r6, [r4, #20]
  404676:	d00e      	beq.n	404696 <setvbuf+0x13e>
  404678:	07d1      	lsls	r1, r2, #31
  40467a:	d51a      	bpl.n	4046b2 <setvbuf+0x15a>
  40467c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40467e:	4276      	negs	r6, r6
  404680:	2300      	movs	r3, #0
  404682:	f015 0501 	ands.w	r5, r5, #1
  404686:	61a6      	str	r6, [r4, #24]
  404688:	60a3      	str	r3, [r4, #8]
  40468a:	d009      	beq.n	4046a0 <setvbuf+0x148>
  40468c:	2500      	movs	r5, #0
  40468e:	4628      	mov	r0, r5
  404690:	b003      	add	sp, #12
  404692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404696:	60a3      	str	r3, [r4, #8]
  404698:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40469a:	f015 0501 	ands.w	r5, r5, #1
  40469e:	d1f5      	bne.n	40468c <setvbuf+0x134>
  4046a0:	0593      	lsls	r3, r2, #22
  4046a2:	d4c0      	bmi.n	404626 <setvbuf+0xce>
  4046a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4046a6:	f001 fd11 	bl	4060cc <__retarget_lock_release_recursive>
  4046aa:	4628      	mov	r0, r5
  4046ac:	b003      	add	sp, #12
  4046ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4046b2:	60a6      	str	r6, [r4, #8]
  4046b4:	e7f0      	b.n	404698 <setvbuf+0x140>
  4046b6:	4628      	mov	r0, r5
  4046b8:	f001 f946 	bl	405948 <__sinit>
  4046bc:	e7c7      	b.n	40464e <setvbuf+0xf6>
  4046be:	f04f 35ff 	mov.w	r5, #4294967295
  4046c2:	e7b0      	b.n	404626 <setvbuf+0xce>
  4046c4:	f8dd 9000 	ldr.w	r9, [sp]
  4046c8:	45b1      	cmp	r9, r6
  4046ca:	d004      	beq.n	4046d6 <setvbuf+0x17e>
  4046cc:	4648      	mov	r0, r9
  4046ce:	f7ff fb75 	bl	403dbc <malloc>
  4046d2:	4607      	mov	r7, r0
  4046d4:	b920      	cbnz	r0, 4046e0 <setvbuf+0x188>
  4046d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4046da:	f04f 35ff 	mov.w	r5, #4294967295
  4046de:	e792      	b.n	404606 <setvbuf+0xae>
  4046e0:	464e      	mov	r6, r9
  4046e2:	e783      	b.n	4045ec <setvbuf+0x94>
  4046e4:	2040001c 	.word	0x2040001c

004046e8 <strchr>:
  4046e8:	b2c9      	uxtb	r1, r1
  4046ea:	2900      	cmp	r1, #0
  4046ec:	d041      	beq.n	404772 <strchr+0x8a>
  4046ee:	0782      	lsls	r2, r0, #30
  4046f0:	b4f0      	push	{r4, r5, r6, r7}
  4046f2:	d067      	beq.n	4047c4 <strchr+0xdc>
  4046f4:	7803      	ldrb	r3, [r0, #0]
  4046f6:	2b00      	cmp	r3, #0
  4046f8:	d068      	beq.n	4047cc <strchr+0xe4>
  4046fa:	4299      	cmp	r1, r3
  4046fc:	d037      	beq.n	40476e <strchr+0x86>
  4046fe:	1c43      	adds	r3, r0, #1
  404700:	e004      	b.n	40470c <strchr+0x24>
  404702:	f813 0b01 	ldrb.w	r0, [r3], #1
  404706:	b390      	cbz	r0, 40476e <strchr+0x86>
  404708:	4281      	cmp	r1, r0
  40470a:	d02f      	beq.n	40476c <strchr+0x84>
  40470c:	079a      	lsls	r2, r3, #30
  40470e:	461c      	mov	r4, r3
  404710:	d1f7      	bne.n	404702 <strchr+0x1a>
  404712:	6825      	ldr	r5, [r4, #0]
  404714:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  404718:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  40471c:	ea83 0605 	eor.w	r6, r3, r5
  404720:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  404724:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  404728:	ea20 0006 	bic.w	r0, r0, r6
  40472c:	ea22 0205 	bic.w	r2, r2, r5
  404730:	4302      	orrs	r2, r0
  404732:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404736:	d111      	bne.n	40475c <strchr+0x74>
  404738:	4620      	mov	r0, r4
  40473a:	f850 6f04 	ldr.w	r6, [r0, #4]!
  40473e:	ea83 0706 	eor.w	r7, r3, r6
  404742:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  404746:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  40474a:	ea25 0507 	bic.w	r5, r5, r7
  40474e:	ea22 0206 	bic.w	r2, r2, r6
  404752:	432a      	orrs	r2, r5
  404754:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404758:	d0ef      	beq.n	40473a <strchr+0x52>
  40475a:	4604      	mov	r4, r0
  40475c:	7820      	ldrb	r0, [r4, #0]
  40475e:	b918      	cbnz	r0, 404768 <strchr+0x80>
  404760:	e005      	b.n	40476e <strchr+0x86>
  404762:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  404766:	b110      	cbz	r0, 40476e <strchr+0x86>
  404768:	4281      	cmp	r1, r0
  40476a:	d1fa      	bne.n	404762 <strchr+0x7a>
  40476c:	4620      	mov	r0, r4
  40476e:	bcf0      	pop	{r4, r5, r6, r7}
  404770:	4770      	bx	lr
  404772:	0783      	lsls	r3, r0, #30
  404774:	d024      	beq.n	4047c0 <strchr+0xd8>
  404776:	7803      	ldrb	r3, [r0, #0]
  404778:	2b00      	cmp	r3, #0
  40477a:	d0f9      	beq.n	404770 <strchr+0x88>
  40477c:	1c43      	adds	r3, r0, #1
  40477e:	e003      	b.n	404788 <strchr+0xa0>
  404780:	7802      	ldrb	r2, [r0, #0]
  404782:	3301      	adds	r3, #1
  404784:	2a00      	cmp	r2, #0
  404786:	d0f3      	beq.n	404770 <strchr+0x88>
  404788:	0799      	lsls	r1, r3, #30
  40478a:	4618      	mov	r0, r3
  40478c:	d1f8      	bne.n	404780 <strchr+0x98>
  40478e:	6819      	ldr	r1, [r3, #0]
  404790:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  404794:	ea22 0201 	bic.w	r2, r2, r1
  404798:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40479c:	d108      	bne.n	4047b0 <strchr+0xc8>
  40479e:	f853 1f04 	ldr.w	r1, [r3, #4]!
  4047a2:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  4047a6:	ea22 0201 	bic.w	r2, r2, r1
  4047aa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  4047ae:	d0f6      	beq.n	40479e <strchr+0xb6>
  4047b0:	781a      	ldrb	r2, [r3, #0]
  4047b2:	4618      	mov	r0, r3
  4047b4:	b142      	cbz	r2, 4047c8 <strchr+0xe0>
  4047b6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4047ba:	2b00      	cmp	r3, #0
  4047bc:	d1fb      	bne.n	4047b6 <strchr+0xce>
  4047be:	4770      	bx	lr
  4047c0:	4603      	mov	r3, r0
  4047c2:	e7e4      	b.n	40478e <strchr+0xa6>
  4047c4:	4604      	mov	r4, r0
  4047c6:	e7a4      	b.n	404712 <strchr+0x2a>
  4047c8:	4618      	mov	r0, r3
  4047ca:	4770      	bx	lr
  4047cc:	4618      	mov	r0, r3
  4047ce:	e7ce      	b.n	40476e <strchr+0x86>
	...

00404800 <strlen>:
  404800:	f890 f000 	pld	[r0]
  404804:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404808:	f020 0107 	bic.w	r1, r0, #7
  40480c:	f06f 0c00 	mvn.w	ip, #0
  404810:	f010 0407 	ands.w	r4, r0, #7
  404814:	f891 f020 	pld	[r1, #32]
  404818:	f040 8049 	bne.w	4048ae <strlen+0xae>
  40481c:	f04f 0400 	mov.w	r4, #0
  404820:	f06f 0007 	mvn.w	r0, #7
  404824:	e9d1 2300 	ldrd	r2, r3, [r1]
  404828:	f891 f040 	pld	[r1, #64]	; 0x40
  40482c:	f100 0008 	add.w	r0, r0, #8
  404830:	fa82 f24c 	uadd8	r2, r2, ip
  404834:	faa4 f28c 	sel	r2, r4, ip
  404838:	fa83 f34c 	uadd8	r3, r3, ip
  40483c:	faa2 f38c 	sel	r3, r2, ip
  404840:	bb4b      	cbnz	r3, 404896 <strlen+0x96>
  404842:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404846:	fa82 f24c 	uadd8	r2, r2, ip
  40484a:	f100 0008 	add.w	r0, r0, #8
  40484e:	faa4 f28c 	sel	r2, r4, ip
  404852:	fa83 f34c 	uadd8	r3, r3, ip
  404856:	faa2 f38c 	sel	r3, r2, ip
  40485a:	b9e3      	cbnz	r3, 404896 <strlen+0x96>
  40485c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404860:	fa82 f24c 	uadd8	r2, r2, ip
  404864:	f100 0008 	add.w	r0, r0, #8
  404868:	faa4 f28c 	sel	r2, r4, ip
  40486c:	fa83 f34c 	uadd8	r3, r3, ip
  404870:	faa2 f38c 	sel	r3, r2, ip
  404874:	b97b      	cbnz	r3, 404896 <strlen+0x96>
  404876:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40487a:	f101 0120 	add.w	r1, r1, #32
  40487e:	fa82 f24c 	uadd8	r2, r2, ip
  404882:	f100 0008 	add.w	r0, r0, #8
  404886:	faa4 f28c 	sel	r2, r4, ip
  40488a:	fa83 f34c 	uadd8	r3, r3, ip
  40488e:	faa2 f38c 	sel	r3, r2, ip
  404892:	2b00      	cmp	r3, #0
  404894:	d0c6      	beq.n	404824 <strlen+0x24>
  404896:	2a00      	cmp	r2, #0
  404898:	bf04      	itt	eq
  40489a:	3004      	addeq	r0, #4
  40489c:	461a      	moveq	r2, r3
  40489e:	ba12      	rev	r2, r2
  4048a0:	fab2 f282 	clz	r2, r2
  4048a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4048a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4048ac:	4770      	bx	lr
  4048ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4048b2:	f004 0503 	and.w	r5, r4, #3
  4048b6:	f1c4 0000 	rsb	r0, r4, #0
  4048ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4048be:	f014 0f04 	tst.w	r4, #4
  4048c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4048c6:	fa0c f505 	lsl.w	r5, ip, r5
  4048ca:	ea62 0205 	orn	r2, r2, r5
  4048ce:	bf1c      	itt	ne
  4048d0:	ea63 0305 	ornne	r3, r3, r5
  4048d4:	4662      	movne	r2, ip
  4048d6:	f04f 0400 	mov.w	r4, #0
  4048da:	e7a9      	b.n	404830 <strlen+0x30>

004048dc <__sprint_r.part.0>:
  4048dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4048e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4048e2:	049c      	lsls	r4, r3, #18
  4048e4:	4693      	mov	fp, r2
  4048e6:	d52f      	bpl.n	404948 <__sprint_r.part.0+0x6c>
  4048e8:	6893      	ldr	r3, [r2, #8]
  4048ea:	6812      	ldr	r2, [r2, #0]
  4048ec:	b353      	cbz	r3, 404944 <__sprint_r.part.0+0x68>
  4048ee:	460e      	mov	r6, r1
  4048f0:	4607      	mov	r7, r0
  4048f2:	f102 0908 	add.w	r9, r2, #8
  4048f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4048fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4048fe:	d017      	beq.n	404930 <__sprint_r.part.0+0x54>
  404900:	3d04      	subs	r5, #4
  404902:	2400      	movs	r4, #0
  404904:	e001      	b.n	40490a <__sprint_r.part.0+0x2e>
  404906:	45a0      	cmp	r8, r4
  404908:	d010      	beq.n	40492c <__sprint_r.part.0+0x50>
  40490a:	4632      	mov	r2, r6
  40490c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404910:	4638      	mov	r0, r7
  404912:	f001 f8bb 	bl	405a8c <_fputwc_r>
  404916:	1c43      	adds	r3, r0, #1
  404918:	f104 0401 	add.w	r4, r4, #1
  40491c:	d1f3      	bne.n	404906 <__sprint_r.part.0+0x2a>
  40491e:	2300      	movs	r3, #0
  404920:	f8cb 3008 	str.w	r3, [fp, #8]
  404924:	f8cb 3004 	str.w	r3, [fp, #4]
  404928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40492c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404930:	f02a 0a03 	bic.w	sl, sl, #3
  404934:	eba3 030a 	sub.w	r3, r3, sl
  404938:	f8cb 3008 	str.w	r3, [fp, #8]
  40493c:	f109 0908 	add.w	r9, r9, #8
  404940:	2b00      	cmp	r3, #0
  404942:	d1d8      	bne.n	4048f6 <__sprint_r.part.0+0x1a>
  404944:	2000      	movs	r0, #0
  404946:	e7ea      	b.n	40491e <__sprint_r.part.0+0x42>
  404948:	f001 fa0a 	bl	405d60 <__sfvwrite_r>
  40494c:	2300      	movs	r3, #0
  40494e:	f8cb 3008 	str.w	r3, [fp, #8]
  404952:	f8cb 3004 	str.w	r3, [fp, #4]
  404956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40495a:	bf00      	nop

0040495c <_vfiprintf_r>:
  40495c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404960:	b0ad      	sub	sp, #180	; 0xb4
  404962:	461d      	mov	r5, r3
  404964:	468b      	mov	fp, r1
  404966:	4690      	mov	r8, r2
  404968:	9307      	str	r3, [sp, #28]
  40496a:	9006      	str	r0, [sp, #24]
  40496c:	b118      	cbz	r0, 404976 <_vfiprintf_r+0x1a>
  40496e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404970:	2b00      	cmp	r3, #0
  404972:	f000 80f3 	beq.w	404b5c <_vfiprintf_r+0x200>
  404976:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40497a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  40497e:	07df      	lsls	r7, r3, #31
  404980:	b281      	uxth	r1, r0
  404982:	d402      	bmi.n	40498a <_vfiprintf_r+0x2e>
  404984:	058e      	lsls	r6, r1, #22
  404986:	f140 80fc 	bpl.w	404b82 <_vfiprintf_r+0x226>
  40498a:	048c      	lsls	r4, r1, #18
  40498c:	d40a      	bmi.n	4049a4 <_vfiprintf_r+0x48>
  40498e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404992:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404996:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  40499a:	f8ab 100c 	strh.w	r1, [fp, #12]
  40499e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4049a2:	b289      	uxth	r1, r1
  4049a4:	0708      	lsls	r0, r1, #28
  4049a6:	f140 80b3 	bpl.w	404b10 <_vfiprintf_r+0x1b4>
  4049aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4049ae:	2b00      	cmp	r3, #0
  4049b0:	f000 80ae 	beq.w	404b10 <_vfiprintf_r+0x1b4>
  4049b4:	f001 031a 	and.w	r3, r1, #26
  4049b8:	2b0a      	cmp	r3, #10
  4049ba:	f000 80b5 	beq.w	404b28 <_vfiprintf_r+0x1cc>
  4049be:	2300      	movs	r3, #0
  4049c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4049c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4049c6:	9311      	str	r3, [sp, #68]	; 0x44
  4049c8:	9310      	str	r3, [sp, #64]	; 0x40
  4049ca:	9303      	str	r3, [sp, #12]
  4049cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4049d0:	46ca      	mov	sl, r9
  4049d2:	f8cd b010 	str.w	fp, [sp, #16]
  4049d6:	f898 3000 	ldrb.w	r3, [r8]
  4049da:	4644      	mov	r4, r8
  4049dc:	b1fb      	cbz	r3, 404a1e <_vfiprintf_r+0xc2>
  4049de:	2b25      	cmp	r3, #37	; 0x25
  4049e0:	d102      	bne.n	4049e8 <_vfiprintf_r+0x8c>
  4049e2:	e01c      	b.n	404a1e <_vfiprintf_r+0xc2>
  4049e4:	2b25      	cmp	r3, #37	; 0x25
  4049e6:	d003      	beq.n	4049f0 <_vfiprintf_r+0x94>
  4049e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4049ec:	2b00      	cmp	r3, #0
  4049ee:	d1f9      	bne.n	4049e4 <_vfiprintf_r+0x88>
  4049f0:	eba4 0508 	sub.w	r5, r4, r8
  4049f4:	b19d      	cbz	r5, 404a1e <_vfiprintf_r+0xc2>
  4049f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4049f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4049fa:	f8ca 8000 	str.w	r8, [sl]
  4049fe:	3301      	adds	r3, #1
  404a00:	442a      	add	r2, r5
  404a02:	2b07      	cmp	r3, #7
  404a04:	f8ca 5004 	str.w	r5, [sl, #4]
  404a08:	9211      	str	r2, [sp, #68]	; 0x44
  404a0a:	9310      	str	r3, [sp, #64]	; 0x40
  404a0c:	dd7a      	ble.n	404b04 <_vfiprintf_r+0x1a8>
  404a0e:	2a00      	cmp	r2, #0
  404a10:	f040 84b0 	bne.w	405374 <_vfiprintf_r+0xa18>
  404a14:	9b03      	ldr	r3, [sp, #12]
  404a16:	9210      	str	r2, [sp, #64]	; 0x40
  404a18:	442b      	add	r3, r5
  404a1a:	46ca      	mov	sl, r9
  404a1c:	9303      	str	r3, [sp, #12]
  404a1e:	7823      	ldrb	r3, [r4, #0]
  404a20:	2b00      	cmp	r3, #0
  404a22:	f000 83e0 	beq.w	4051e6 <_vfiprintf_r+0x88a>
  404a26:	2000      	movs	r0, #0
  404a28:	f04f 0300 	mov.w	r3, #0
  404a2c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404a30:	f104 0801 	add.w	r8, r4, #1
  404a34:	7862      	ldrb	r2, [r4, #1]
  404a36:	4605      	mov	r5, r0
  404a38:	4606      	mov	r6, r0
  404a3a:	4603      	mov	r3, r0
  404a3c:	f04f 34ff 	mov.w	r4, #4294967295
  404a40:	f108 0801 	add.w	r8, r8, #1
  404a44:	f1a2 0120 	sub.w	r1, r2, #32
  404a48:	2958      	cmp	r1, #88	; 0x58
  404a4a:	f200 82de 	bhi.w	40500a <_vfiprintf_r+0x6ae>
  404a4e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404a52:	0221      	.short	0x0221
  404a54:	02dc02dc 	.word	0x02dc02dc
  404a58:	02dc0229 	.word	0x02dc0229
  404a5c:	02dc02dc 	.word	0x02dc02dc
  404a60:	02dc02dc 	.word	0x02dc02dc
  404a64:	028902dc 	.word	0x028902dc
  404a68:	02dc0295 	.word	0x02dc0295
  404a6c:	02bd00a2 	.word	0x02bd00a2
  404a70:	019f02dc 	.word	0x019f02dc
  404a74:	01a401a4 	.word	0x01a401a4
  404a78:	01a401a4 	.word	0x01a401a4
  404a7c:	01a401a4 	.word	0x01a401a4
  404a80:	01a401a4 	.word	0x01a401a4
  404a84:	02dc01a4 	.word	0x02dc01a4
  404a88:	02dc02dc 	.word	0x02dc02dc
  404a8c:	02dc02dc 	.word	0x02dc02dc
  404a90:	02dc02dc 	.word	0x02dc02dc
  404a94:	02dc02dc 	.word	0x02dc02dc
  404a98:	01b202dc 	.word	0x01b202dc
  404a9c:	02dc02dc 	.word	0x02dc02dc
  404aa0:	02dc02dc 	.word	0x02dc02dc
  404aa4:	02dc02dc 	.word	0x02dc02dc
  404aa8:	02dc02dc 	.word	0x02dc02dc
  404aac:	02dc02dc 	.word	0x02dc02dc
  404ab0:	02dc0197 	.word	0x02dc0197
  404ab4:	02dc02dc 	.word	0x02dc02dc
  404ab8:	02dc02dc 	.word	0x02dc02dc
  404abc:	02dc019b 	.word	0x02dc019b
  404ac0:	025302dc 	.word	0x025302dc
  404ac4:	02dc02dc 	.word	0x02dc02dc
  404ac8:	02dc02dc 	.word	0x02dc02dc
  404acc:	02dc02dc 	.word	0x02dc02dc
  404ad0:	02dc02dc 	.word	0x02dc02dc
  404ad4:	02dc02dc 	.word	0x02dc02dc
  404ad8:	021b025a 	.word	0x021b025a
  404adc:	02dc02dc 	.word	0x02dc02dc
  404ae0:	026e02dc 	.word	0x026e02dc
  404ae4:	02dc021b 	.word	0x02dc021b
  404ae8:	027302dc 	.word	0x027302dc
  404aec:	01f502dc 	.word	0x01f502dc
  404af0:	02090182 	.word	0x02090182
  404af4:	02dc02d7 	.word	0x02dc02d7
  404af8:	02dc029a 	.word	0x02dc029a
  404afc:	02dc00a7 	.word	0x02dc00a7
  404b00:	022e02dc 	.word	0x022e02dc
  404b04:	f10a 0a08 	add.w	sl, sl, #8
  404b08:	9b03      	ldr	r3, [sp, #12]
  404b0a:	442b      	add	r3, r5
  404b0c:	9303      	str	r3, [sp, #12]
  404b0e:	e786      	b.n	404a1e <_vfiprintf_r+0xc2>
  404b10:	4659      	mov	r1, fp
  404b12:	9806      	ldr	r0, [sp, #24]
  404b14:	f000 fdac 	bl	405670 <__swsetup_r>
  404b18:	bb18      	cbnz	r0, 404b62 <_vfiprintf_r+0x206>
  404b1a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404b1e:	f001 031a 	and.w	r3, r1, #26
  404b22:	2b0a      	cmp	r3, #10
  404b24:	f47f af4b 	bne.w	4049be <_vfiprintf_r+0x62>
  404b28:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404b2c:	2b00      	cmp	r3, #0
  404b2e:	f6ff af46 	blt.w	4049be <_vfiprintf_r+0x62>
  404b32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404b36:	07db      	lsls	r3, r3, #31
  404b38:	d405      	bmi.n	404b46 <_vfiprintf_r+0x1ea>
  404b3a:	058f      	lsls	r7, r1, #22
  404b3c:	d403      	bmi.n	404b46 <_vfiprintf_r+0x1ea>
  404b3e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404b42:	f001 fac3 	bl	4060cc <__retarget_lock_release_recursive>
  404b46:	462b      	mov	r3, r5
  404b48:	4642      	mov	r2, r8
  404b4a:	4659      	mov	r1, fp
  404b4c:	9806      	ldr	r0, [sp, #24]
  404b4e:	f000 fd4d 	bl	4055ec <__sbprintf>
  404b52:	9003      	str	r0, [sp, #12]
  404b54:	9803      	ldr	r0, [sp, #12]
  404b56:	b02d      	add	sp, #180	; 0xb4
  404b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b5c:	f000 fef4 	bl	405948 <__sinit>
  404b60:	e709      	b.n	404976 <_vfiprintf_r+0x1a>
  404b62:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404b66:	07d9      	lsls	r1, r3, #31
  404b68:	d404      	bmi.n	404b74 <_vfiprintf_r+0x218>
  404b6a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404b6e:	059a      	lsls	r2, r3, #22
  404b70:	f140 84aa 	bpl.w	4054c8 <_vfiprintf_r+0xb6c>
  404b74:	f04f 33ff 	mov.w	r3, #4294967295
  404b78:	9303      	str	r3, [sp, #12]
  404b7a:	9803      	ldr	r0, [sp, #12]
  404b7c:	b02d      	add	sp, #180	; 0xb4
  404b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404b82:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404b86:	f001 fa9f 	bl	4060c8 <__retarget_lock_acquire_recursive>
  404b8a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404b8e:	b281      	uxth	r1, r0
  404b90:	e6fb      	b.n	40498a <_vfiprintf_r+0x2e>
  404b92:	4276      	negs	r6, r6
  404b94:	9207      	str	r2, [sp, #28]
  404b96:	f043 0304 	orr.w	r3, r3, #4
  404b9a:	f898 2000 	ldrb.w	r2, [r8]
  404b9e:	e74f      	b.n	404a40 <_vfiprintf_r+0xe4>
  404ba0:	9608      	str	r6, [sp, #32]
  404ba2:	069e      	lsls	r6, r3, #26
  404ba4:	f100 8450 	bmi.w	405448 <_vfiprintf_r+0xaec>
  404ba8:	9907      	ldr	r1, [sp, #28]
  404baa:	06dd      	lsls	r5, r3, #27
  404bac:	460a      	mov	r2, r1
  404bae:	f100 83ef 	bmi.w	405390 <_vfiprintf_r+0xa34>
  404bb2:	0658      	lsls	r0, r3, #25
  404bb4:	f140 83ec 	bpl.w	405390 <_vfiprintf_r+0xa34>
  404bb8:	880e      	ldrh	r6, [r1, #0]
  404bba:	3104      	adds	r1, #4
  404bbc:	2700      	movs	r7, #0
  404bbe:	2201      	movs	r2, #1
  404bc0:	9107      	str	r1, [sp, #28]
  404bc2:	f04f 0100 	mov.w	r1, #0
  404bc6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404bca:	2500      	movs	r5, #0
  404bcc:	1c61      	adds	r1, r4, #1
  404bce:	f000 8116 	beq.w	404dfe <_vfiprintf_r+0x4a2>
  404bd2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404bd6:	9102      	str	r1, [sp, #8]
  404bd8:	ea56 0107 	orrs.w	r1, r6, r7
  404bdc:	f040 8114 	bne.w	404e08 <_vfiprintf_r+0x4ac>
  404be0:	2c00      	cmp	r4, #0
  404be2:	f040 835c 	bne.w	40529e <_vfiprintf_r+0x942>
  404be6:	2a00      	cmp	r2, #0
  404be8:	f040 83b7 	bne.w	40535a <_vfiprintf_r+0x9fe>
  404bec:	f013 0301 	ands.w	r3, r3, #1
  404bf0:	9305      	str	r3, [sp, #20]
  404bf2:	f000 8457 	beq.w	4054a4 <_vfiprintf_r+0xb48>
  404bf6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404bfa:	2330      	movs	r3, #48	; 0x30
  404bfc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404c00:	9b05      	ldr	r3, [sp, #20]
  404c02:	42a3      	cmp	r3, r4
  404c04:	bfb8      	it	lt
  404c06:	4623      	movlt	r3, r4
  404c08:	9301      	str	r3, [sp, #4]
  404c0a:	b10d      	cbz	r5, 404c10 <_vfiprintf_r+0x2b4>
  404c0c:	3301      	adds	r3, #1
  404c0e:	9301      	str	r3, [sp, #4]
  404c10:	9b02      	ldr	r3, [sp, #8]
  404c12:	f013 0302 	ands.w	r3, r3, #2
  404c16:	9309      	str	r3, [sp, #36]	; 0x24
  404c18:	d002      	beq.n	404c20 <_vfiprintf_r+0x2c4>
  404c1a:	9b01      	ldr	r3, [sp, #4]
  404c1c:	3302      	adds	r3, #2
  404c1e:	9301      	str	r3, [sp, #4]
  404c20:	9b02      	ldr	r3, [sp, #8]
  404c22:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404c26:	930a      	str	r3, [sp, #40]	; 0x28
  404c28:	f040 8217 	bne.w	40505a <_vfiprintf_r+0x6fe>
  404c2c:	9b08      	ldr	r3, [sp, #32]
  404c2e:	9a01      	ldr	r2, [sp, #4]
  404c30:	1a9d      	subs	r5, r3, r2
  404c32:	2d00      	cmp	r5, #0
  404c34:	f340 8211 	ble.w	40505a <_vfiprintf_r+0x6fe>
  404c38:	2d10      	cmp	r5, #16
  404c3a:	f340 8490 	ble.w	40555e <_vfiprintf_r+0xc02>
  404c3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c40:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c42:	4ec4      	ldr	r6, [pc, #784]	; (404f54 <_vfiprintf_r+0x5f8>)
  404c44:	46d6      	mov	lr, sl
  404c46:	2710      	movs	r7, #16
  404c48:	46a2      	mov	sl, r4
  404c4a:	4619      	mov	r1, r3
  404c4c:	9c06      	ldr	r4, [sp, #24]
  404c4e:	e007      	b.n	404c60 <_vfiprintf_r+0x304>
  404c50:	f101 0c02 	add.w	ip, r1, #2
  404c54:	f10e 0e08 	add.w	lr, lr, #8
  404c58:	4601      	mov	r1, r0
  404c5a:	3d10      	subs	r5, #16
  404c5c:	2d10      	cmp	r5, #16
  404c5e:	dd11      	ble.n	404c84 <_vfiprintf_r+0x328>
  404c60:	1c48      	adds	r0, r1, #1
  404c62:	3210      	adds	r2, #16
  404c64:	2807      	cmp	r0, #7
  404c66:	9211      	str	r2, [sp, #68]	; 0x44
  404c68:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404c6c:	9010      	str	r0, [sp, #64]	; 0x40
  404c6e:	ddef      	ble.n	404c50 <_vfiprintf_r+0x2f4>
  404c70:	2a00      	cmp	r2, #0
  404c72:	f040 81e4 	bne.w	40503e <_vfiprintf_r+0x6e2>
  404c76:	3d10      	subs	r5, #16
  404c78:	2d10      	cmp	r5, #16
  404c7a:	4611      	mov	r1, r2
  404c7c:	f04f 0c01 	mov.w	ip, #1
  404c80:	46ce      	mov	lr, r9
  404c82:	dced      	bgt.n	404c60 <_vfiprintf_r+0x304>
  404c84:	4654      	mov	r4, sl
  404c86:	4661      	mov	r1, ip
  404c88:	46f2      	mov	sl, lr
  404c8a:	442a      	add	r2, r5
  404c8c:	2907      	cmp	r1, #7
  404c8e:	9211      	str	r2, [sp, #68]	; 0x44
  404c90:	f8ca 6000 	str.w	r6, [sl]
  404c94:	f8ca 5004 	str.w	r5, [sl, #4]
  404c98:	9110      	str	r1, [sp, #64]	; 0x40
  404c9a:	f300 82ec 	bgt.w	405276 <_vfiprintf_r+0x91a>
  404c9e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ca2:	f10a 0a08 	add.w	sl, sl, #8
  404ca6:	1c48      	adds	r0, r1, #1
  404ca8:	2d00      	cmp	r5, #0
  404caa:	f040 81de 	bne.w	40506a <_vfiprintf_r+0x70e>
  404cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404cb0:	2b00      	cmp	r3, #0
  404cb2:	f000 81f8 	beq.w	4050a6 <_vfiprintf_r+0x74a>
  404cb6:	3202      	adds	r2, #2
  404cb8:	a90e      	add	r1, sp, #56	; 0x38
  404cba:	2302      	movs	r3, #2
  404cbc:	2807      	cmp	r0, #7
  404cbe:	9211      	str	r2, [sp, #68]	; 0x44
  404cc0:	9010      	str	r0, [sp, #64]	; 0x40
  404cc2:	e88a 000a 	stmia.w	sl, {r1, r3}
  404cc6:	f340 81ea 	ble.w	40509e <_vfiprintf_r+0x742>
  404cca:	2a00      	cmp	r2, #0
  404ccc:	f040 838c 	bne.w	4053e8 <_vfiprintf_r+0xa8c>
  404cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404cd2:	2b80      	cmp	r3, #128	; 0x80
  404cd4:	f04f 0001 	mov.w	r0, #1
  404cd8:	4611      	mov	r1, r2
  404cda:	46ca      	mov	sl, r9
  404cdc:	f040 81e7 	bne.w	4050ae <_vfiprintf_r+0x752>
  404ce0:	9b08      	ldr	r3, [sp, #32]
  404ce2:	9d01      	ldr	r5, [sp, #4]
  404ce4:	1b5e      	subs	r6, r3, r5
  404ce6:	2e00      	cmp	r6, #0
  404ce8:	f340 81e1 	ble.w	4050ae <_vfiprintf_r+0x752>
  404cec:	2e10      	cmp	r6, #16
  404cee:	4d9a      	ldr	r5, [pc, #616]	; (404f58 <_vfiprintf_r+0x5fc>)
  404cf0:	f340 8450 	ble.w	405594 <_vfiprintf_r+0xc38>
  404cf4:	46d4      	mov	ip, sl
  404cf6:	2710      	movs	r7, #16
  404cf8:	46a2      	mov	sl, r4
  404cfa:	9c06      	ldr	r4, [sp, #24]
  404cfc:	e007      	b.n	404d0e <_vfiprintf_r+0x3b2>
  404cfe:	f101 0e02 	add.w	lr, r1, #2
  404d02:	f10c 0c08 	add.w	ip, ip, #8
  404d06:	4601      	mov	r1, r0
  404d08:	3e10      	subs	r6, #16
  404d0a:	2e10      	cmp	r6, #16
  404d0c:	dd11      	ble.n	404d32 <_vfiprintf_r+0x3d6>
  404d0e:	1c48      	adds	r0, r1, #1
  404d10:	3210      	adds	r2, #16
  404d12:	2807      	cmp	r0, #7
  404d14:	9211      	str	r2, [sp, #68]	; 0x44
  404d16:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404d1a:	9010      	str	r0, [sp, #64]	; 0x40
  404d1c:	ddef      	ble.n	404cfe <_vfiprintf_r+0x3a2>
  404d1e:	2a00      	cmp	r2, #0
  404d20:	f040 829d 	bne.w	40525e <_vfiprintf_r+0x902>
  404d24:	3e10      	subs	r6, #16
  404d26:	2e10      	cmp	r6, #16
  404d28:	f04f 0e01 	mov.w	lr, #1
  404d2c:	4611      	mov	r1, r2
  404d2e:	46cc      	mov	ip, r9
  404d30:	dced      	bgt.n	404d0e <_vfiprintf_r+0x3b2>
  404d32:	4654      	mov	r4, sl
  404d34:	46e2      	mov	sl, ip
  404d36:	4432      	add	r2, r6
  404d38:	f1be 0f07 	cmp.w	lr, #7
  404d3c:	9211      	str	r2, [sp, #68]	; 0x44
  404d3e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404d42:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404d46:	f300 8369 	bgt.w	40541c <_vfiprintf_r+0xac0>
  404d4a:	f10a 0a08 	add.w	sl, sl, #8
  404d4e:	f10e 0001 	add.w	r0, lr, #1
  404d52:	4671      	mov	r1, lr
  404d54:	e1ab      	b.n	4050ae <_vfiprintf_r+0x752>
  404d56:	9608      	str	r6, [sp, #32]
  404d58:	f013 0220 	ands.w	r2, r3, #32
  404d5c:	f040 838c 	bne.w	405478 <_vfiprintf_r+0xb1c>
  404d60:	f013 0110 	ands.w	r1, r3, #16
  404d64:	f040 831a 	bne.w	40539c <_vfiprintf_r+0xa40>
  404d68:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404d6c:	f000 8316 	beq.w	40539c <_vfiprintf_r+0xa40>
  404d70:	9807      	ldr	r0, [sp, #28]
  404d72:	460a      	mov	r2, r1
  404d74:	4601      	mov	r1, r0
  404d76:	3104      	adds	r1, #4
  404d78:	8806      	ldrh	r6, [r0, #0]
  404d7a:	9107      	str	r1, [sp, #28]
  404d7c:	2700      	movs	r7, #0
  404d7e:	e720      	b.n	404bc2 <_vfiprintf_r+0x266>
  404d80:	9608      	str	r6, [sp, #32]
  404d82:	f043 0310 	orr.w	r3, r3, #16
  404d86:	e7e7      	b.n	404d58 <_vfiprintf_r+0x3fc>
  404d88:	9608      	str	r6, [sp, #32]
  404d8a:	f043 0310 	orr.w	r3, r3, #16
  404d8e:	e708      	b.n	404ba2 <_vfiprintf_r+0x246>
  404d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404d94:	f898 2000 	ldrb.w	r2, [r8]
  404d98:	e652      	b.n	404a40 <_vfiprintf_r+0xe4>
  404d9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404d9e:	2600      	movs	r6, #0
  404da0:	f818 2b01 	ldrb.w	r2, [r8], #1
  404da4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  404da8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  404dac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404db0:	2909      	cmp	r1, #9
  404db2:	d9f5      	bls.n	404da0 <_vfiprintf_r+0x444>
  404db4:	e646      	b.n	404a44 <_vfiprintf_r+0xe8>
  404db6:	9608      	str	r6, [sp, #32]
  404db8:	2800      	cmp	r0, #0
  404dba:	f040 8408 	bne.w	4055ce <_vfiprintf_r+0xc72>
  404dbe:	f043 0310 	orr.w	r3, r3, #16
  404dc2:	069e      	lsls	r6, r3, #26
  404dc4:	f100 834c 	bmi.w	405460 <_vfiprintf_r+0xb04>
  404dc8:	06dd      	lsls	r5, r3, #27
  404dca:	f100 82f3 	bmi.w	4053b4 <_vfiprintf_r+0xa58>
  404dce:	0658      	lsls	r0, r3, #25
  404dd0:	f140 82f0 	bpl.w	4053b4 <_vfiprintf_r+0xa58>
  404dd4:	9d07      	ldr	r5, [sp, #28]
  404dd6:	f9b5 6000 	ldrsh.w	r6, [r5]
  404dda:	462a      	mov	r2, r5
  404ddc:	17f7      	asrs	r7, r6, #31
  404dde:	3204      	adds	r2, #4
  404de0:	4630      	mov	r0, r6
  404de2:	4639      	mov	r1, r7
  404de4:	9207      	str	r2, [sp, #28]
  404de6:	2800      	cmp	r0, #0
  404de8:	f171 0200 	sbcs.w	r2, r1, #0
  404dec:	f2c0 835d 	blt.w	4054aa <_vfiprintf_r+0xb4e>
  404df0:	1c61      	adds	r1, r4, #1
  404df2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404df6:	f04f 0201 	mov.w	r2, #1
  404dfa:	f47f aeea 	bne.w	404bd2 <_vfiprintf_r+0x276>
  404dfe:	ea56 0107 	orrs.w	r1, r6, r7
  404e02:	f000 824d 	beq.w	4052a0 <_vfiprintf_r+0x944>
  404e06:	9302      	str	r3, [sp, #8]
  404e08:	2a01      	cmp	r2, #1
  404e0a:	f000 828c 	beq.w	405326 <_vfiprintf_r+0x9ca>
  404e0e:	2a02      	cmp	r2, #2
  404e10:	f040 825c 	bne.w	4052cc <_vfiprintf_r+0x970>
  404e14:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404e16:	46cb      	mov	fp, r9
  404e18:	0933      	lsrs	r3, r6, #4
  404e1a:	f006 010f 	and.w	r1, r6, #15
  404e1e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404e22:	093a      	lsrs	r2, r7, #4
  404e24:	461e      	mov	r6, r3
  404e26:	4617      	mov	r7, r2
  404e28:	5c43      	ldrb	r3, [r0, r1]
  404e2a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  404e2e:	ea56 0307 	orrs.w	r3, r6, r7
  404e32:	d1f1      	bne.n	404e18 <_vfiprintf_r+0x4bc>
  404e34:	eba9 030b 	sub.w	r3, r9, fp
  404e38:	9305      	str	r3, [sp, #20]
  404e3a:	e6e1      	b.n	404c00 <_vfiprintf_r+0x2a4>
  404e3c:	2800      	cmp	r0, #0
  404e3e:	f040 83c0 	bne.w	4055c2 <_vfiprintf_r+0xc66>
  404e42:	0699      	lsls	r1, r3, #26
  404e44:	f100 8367 	bmi.w	405516 <_vfiprintf_r+0xbba>
  404e48:	06da      	lsls	r2, r3, #27
  404e4a:	f100 80f1 	bmi.w	405030 <_vfiprintf_r+0x6d4>
  404e4e:	065b      	lsls	r3, r3, #25
  404e50:	f140 80ee 	bpl.w	405030 <_vfiprintf_r+0x6d4>
  404e54:	9a07      	ldr	r2, [sp, #28]
  404e56:	6813      	ldr	r3, [r2, #0]
  404e58:	3204      	adds	r2, #4
  404e5a:	9207      	str	r2, [sp, #28]
  404e5c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  404e60:	801a      	strh	r2, [r3, #0]
  404e62:	e5b8      	b.n	4049d6 <_vfiprintf_r+0x7a>
  404e64:	9807      	ldr	r0, [sp, #28]
  404e66:	4a3d      	ldr	r2, [pc, #244]	; (404f5c <_vfiprintf_r+0x600>)
  404e68:	9608      	str	r6, [sp, #32]
  404e6a:	920b      	str	r2, [sp, #44]	; 0x2c
  404e6c:	6806      	ldr	r6, [r0, #0]
  404e6e:	2278      	movs	r2, #120	; 0x78
  404e70:	2130      	movs	r1, #48	; 0x30
  404e72:	3004      	adds	r0, #4
  404e74:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404e78:	f043 0302 	orr.w	r3, r3, #2
  404e7c:	9007      	str	r0, [sp, #28]
  404e7e:	2700      	movs	r7, #0
  404e80:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404e84:	2202      	movs	r2, #2
  404e86:	e69c      	b.n	404bc2 <_vfiprintf_r+0x266>
  404e88:	9608      	str	r6, [sp, #32]
  404e8a:	2800      	cmp	r0, #0
  404e8c:	d099      	beq.n	404dc2 <_vfiprintf_r+0x466>
  404e8e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404e92:	e796      	b.n	404dc2 <_vfiprintf_r+0x466>
  404e94:	f898 2000 	ldrb.w	r2, [r8]
  404e98:	2d00      	cmp	r5, #0
  404e9a:	f47f add1 	bne.w	404a40 <_vfiprintf_r+0xe4>
  404e9e:	2001      	movs	r0, #1
  404ea0:	2520      	movs	r5, #32
  404ea2:	e5cd      	b.n	404a40 <_vfiprintf_r+0xe4>
  404ea4:	f043 0301 	orr.w	r3, r3, #1
  404ea8:	f898 2000 	ldrb.w	r2, [r8]
  404eac:	e5c8      	b.n	404a40 <_vfiprintf_r+0xe4>
  404eae:	9608      	str	r6, [sp, #32]
  404eb0:	2800      	cmp	r0, #0
  404eb2:	f040 8393 	bne.w	4055dc <_vfiprintf_r+0xc80>
  404eb6:	4929      	ldr	r1, [pc, #164]	; (404f5c <_vfiprintf_r+0x600>)
  404eb8:	910b      	str	r1, [sp, #44]	; 0x2c
  404eba:	069f      	lsls	r7, r3, #26
  404ebc:	f100 82e8 	bmi.w	405490 <_vfiprintf_r+0xb34>
  404ec0:	9807      	ldr	r0, [sp, #28]
  404ec2:	06de      	lsls	r6, r3, #27
  404ec4:	4601      	mov	r1, r0
  404ec6:	f100 8270 	bmi.w	4053aa <_vfiprintf_r+0xa4e>
  404eca:	065d      	lsls	r5, r3, #25
  404ecc:	f140 826d 	bpl.w	4053aa <_vfiprintf_r+0xa4e>
  404ed0:	3104      	adds	r1, #4
  404ed2:	8806      	ldrh	r6, [r0, #0]
  404ed4:	9107      	str	r1, [sp, #28]
  404ed6:	2700      	movs	r7, #0
  404ed8:	07d8      	lsls	r0, r3, #31
  404eda:	f140 8222 	bpl.w	405322 <_vfiprintf_r+0x9c6>
  404ede:	ea56 0107 	orrs.w	r1, r6, r7
  404ee2:	f000 821e 	beq.w	405322 <_vfiprintf_r+0x9c6>
  404ee6:	2130      	movs	r1, #48	; 0x30
  404ee8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404eec:	f043 0302 	orr.w	r3, r3, #2
  404ef0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404ef4:	2202      	movs	r2, #2
  404ef6:	e664      	b.n	404bc2 <_vfiprintf_r+0x266>
  404ef8:	9608      	str	r6, [sp, #32]
  404efa:	2800      	cmp	r0, #0
  404efc:	f040 836b 	bne.w	4055d6 <_vfiprintf_r+0xc7a>
  404f00:	4917      	ldr	r1, [pc, #92]	; (404f60 <_vfiprintf_r+0x604>)
  404f02:	910b      	str	r1, [sp, #44]	; 0x2c
  404f04:	e7d9      	b.n	404eba <_vfiprintf_r+0x55e>
  404f06:	9907      	ldr	r1, [sp, #28]
  404f08:	9608      	str	r6, [sp, #32]
  404f0a:	680a      	ldr	r2, [r1, #0]
  404f0c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404f10:	f04f 0000 	mov.w	r0, #0
  404f14:	460a      	mov	r2, r1
  404f16:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404f1a:	3204      	adds	r2, #4
  404f1c:	2001      	movs	r0, #1
  404f1e:	9001      	str	r0, [sp, #4]
  404f20:	9207      	str	r2, [sp, #28]
  404f22:	9005      	str	r0, [sp, #20]
  404f24:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404f28:	9302      	str	r3, [sp, #8]
  404f2a:	2400      	movs	r4, #0
  404f2c:	e670      	b.n	404c10 <_vfiprintf_r+0x2b4>
  404f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404f32:	f898 2000 	ldrb.w	r2, [r8]
  404f36:	e583      	b.n	404a40 <_vfiprintf_r+0xe4>
  404f38:	f898 2000 	ldrb.w	r2, [r8]
  404f3c:	2a6c      	cmp	r2, #108	; 0x6c
  404f3e:	bf03      	ittte	eq
  404f40:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404f44:	f043 0320 	orreq.w	r3, r3, #32
  404f48:	f108 0801 	addeq.w	r8, r8, #1
  404f4c:	f043 0310 	orrne.w	r3, r3, #16
  404f50:	e576      	b.n	404a40 <_vfiprintf_r+0xe4>
  404f52:	bf00      	nop
  404f54:	00407038 	.word	0x00407038
  404f58:	00407048 	.word	0x00407048
  404f5c:	0040701c 	.word	0x0040701c
  404f60:	00407008 	.word	0x00407008
  404f64:	9907      	ldr	r1, [sp, #28]
  404f66:	680e      	ldr	r6, [r1, #0]
  404f68:	460a      	mov	r2, r1
  404f6a:	2e00      	cmp	r6, #0
  404f6c:	f102 0204 	add.w	r2, r2, #4
  404f70:	f6ff ae0f 	blt.w	404b92 <_vfiprintf_r+0x236>
  404f74:	9207      	str	r2, [sp, #28]
  404f76:	f898 2000 	ldrb.w	r2, [r8]
  404f7a:	e561      	b.n	404a40 <_vfiprintf_r+0xe4>
  404f7c:	f898 2000 	ldrb.w	r2, [r8]
  404f80:	2001      	movs	r0, #1
  404f82:	252b      	movs	r5, #43	; 0x2b
  404f84:	e55c      	b.n	404a40 <_vfiprintf_r+0xe4>
  404f86:	9907      	ldr	r1, [sp, #28]
  404f88:	9608      	str	r6, [sp, #32]
  404f8a:	f8d1 b000 	ldr.w	fp, [r1]
  404f8e:	f04f 0200 	mov.w	r2, #0
  404f92:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404f96:	1d0e      	adds	r6, r1, #4
  404f98:	f1bb 0f00 	cmp.w	fp, #0
  404f9c:	f000 82e5 	beq.w	40556a <_vfiprintf_r+0xc0e>
  404fa0:	1c67      	adds	r7, r4, #1
  404fa2:	f000 82c4 	beq.w	40552e <_vfiprintf_r+0xbd2>
  404fa6:	4622      	mov	r2, r4
  404fa8:	2100      	movs	r1, #0
  404faa:	4658      	mov	r0, fp
  404fac:	9301      	str	r3, [sp, #4]
  404fae:	f001 f91f 	bl	4061f0 <memchr>
  404fb2:	9b01      	ldr	r3, [sp, #4]
  404fb4:	2800      	cmp	r0, #0
  404fb6:	f000 82e5 	beq.w	405584 <_vfiprintf_r+0xc28>
  404fba:	eba0 020b 	sub.w	r2, r0, fp
  404fbe:	9205      	str	r2, [sp, #20]
  404fc0:	9607      	str	r6, [sp, #28]
  404fc2:	9302      	str	r3, [sp, #8]
  404fc4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404fc8:	2400      	movs	r4, #0
  404fca:	e619      	b.n	404c00 <_vfiprintf_r+0x2a4>
  404fcc:	f898 2000 	ldrb.w	r2, [r8]
  404fd0:	2a2a      	cmp	r2, #42	; 0x2a
  404fd2:	f108 0701 	add.w	r7, r8, #1
  404fd6:	f000 82e9 	beq.w	4055ac <_vfiprintf_r+0xc50>
  404fda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404fde:	2909      	cmp	r1, #9
  404fe0:	46b8      	mov	r8, r7
  404fe2:	f04f 0400 	mov.w	r4, #0
  404fe6:	f63f ad2d 	bhi.w	404a44 <_vfiprintf_r+0xe8>
  404fea:	f818 2b01 	ldrb.w	r2, [r8], #1
  404fee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404ff2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404ff6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404ffa:	2909      	cmp	r1, #9
  404ffc:	d9f5      	bls.n	404fea <_vfiprintf_r+0x68e>
  404ffe:	e521      	b.n	404a44 <_vfiprintf_r+0xe8>
  405000:	f043 0320 	orr.w	r3, r3, #32
  405004:	f898 2000 	ldrb.w	r2, [r8]
  405008:	e51a      	b.n	404a40 <_vfiprintf_r+0xe4>
  40500a:	9608      	str	r6, [sp, #32]
  40500c:	2800      	cmp	r0, #0
  40500e:	f040 82db 	bne.w	4055c8 <_vfiprintf_r+0xc6c>
  405012:	2a00      	cmp	r2, #0
  405014:	f000 80e7 	beq.w	4051e6 <_vfiprintf_r+0x88a>
  405018:	2101      	movs	r1, #1
  40501a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40501e:	f04f 0200 	mov.w	r2, #0
  405022:	9101      	str	r1, [sp, #4]
  405024:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405028:	9105      	str	r1, [sp, #20]
  40502a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40502e:	e77b      	b.n	404f28 <_vfiprintf_r+0x5cc>
  405030:	9a07      	ldr	r2, [sp, #28]
  405032:	6813      	ldr	r3, [r2, #0]
  405034:	3204      	adds	r2, #4
  405036:	9207      	str	r2, [sp, #28]
  405038:	9a03      	ldr	r2, [sp, #12]
  40503a:	601a      	str	r2, [r3, #0]
  40503c:	e4cb      	b.n	4049d6 <_vfiprintf_r+0x7a>
  40503e:	aa0f      	add	r2, sp, #60	; 0x3c
  405040:	9904      	ldr	r1, [sp, #16]
  405042:	4620      	mov	r0, r4
  405044:	f7ff fc4a 	bl	4048dc <__sprint_r.part.0>
  405048:	2800      	cmp	r0, #0
  40504a:	f040 8139 	bne.w	4052c0 <_vfiprintf_r+0x964>
  40504e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405050:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405052:	f101 0c01 	add.w	ip, r1, #1
  405056:	46ce      	mov	lr, r9
  405058:	e5ff      	b.n	404c5a <_vfiprintf_r+0x2fe>
  40505a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40505c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40505e:	1c48      	adds	r0, r1, #1
  405060:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405064:	2d00      	cmp	r5, #0
  405066:	f43f ae22 	beq.w	404cae <_vfiprintf_r+0x352>
  40506a:	3201      	adds	r2, #1
  40506c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  405070:	2101      	movs	r1, #1
  405072:	2807      	cmp	r0, #7
  405074:	9211      	str	r2, [sp, #68]	; 0x44
  405076:	9010      	str	r0, [sp, #64]	; 0x40
  405078:	f8ca 5000 	str.w	r5, [sl]
  40507c:	f8ca 1004 	str.w	r1, [sl, #4]
  405080:	f340 8108 	ble.w	405294 <_vfiprintf_r+0x938>
  405084:	2a00      	cmp	r2, #0
  405086:	f040 81bc 	bne.w	405402 <_vfiprintf_r+0xaa6>
  40508a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40508c:	2b00      	cmp	r3, #0
  40508e:	f43f ae1f 	beq.w	404cd0 <_vfiprintf_r+0x374>
  405092:	ab0e      	add	r3, sp, #56	; 0x38
  405094:	2202      	movs	r2, #2
  405096:	4608      	mov	r0, r1
  405098:	931c      	str	r3, [sp, #112]	; 0x70
  40509a:	921d      	str	r2, [sp, #116]	; 0x74
  40509c:	46ca      	mov	sl, r9
  40509e:	4601      	mov	r1, r0
  4050a0:	f10a 0a08 	add.w	sl, sl, #8
  4050a4:	3001      	adds	r0, #1
  4050a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4050a8:	2b80      	cmp	r3, #128	; 0x80
  4050aa:	f43f ae19 	beq.w	404ce0 <_vfiprintf_r+0x384>
  4050ae:	9b05      	ldr	r3, [sp, #20]
  4050b0:	1ae4      	subs	r4, r4, r3
  4050b2:	2c00      	cmp	r4, #0
  4050b4:	dd2e      	ble.n	405114 <_vfiprintf_r+0x7b8>
  4050b6:	2c10      	cmp	r4, #16
  4050b8:	4db3      	ldr	r5, [pc, #716]	; (405388 <_vfiprintf_r+0xa2c>)
  4050ba:	dd1e      	ble.n	4050fa <_vfiprintf_r+0x79e>
  4050bc:	46d6      	mov	lr, sl
  4050be:	2610      	movs	r6, #16
  4050c0:	9f06      	ldr	r7, [sp, #24]
  4050c2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4050c6:	e006      	b.n	4050d6 <_vfiprintf_r+0x77a>
  4050c8:	1c88      	adds	r0, r1, #2
  4050ca:	f10e 0e08 	add.w	lr, lr, #8
  4050ce:	4619      	mov	r1, r3
  4050d0:	3c10      	subs	r4, #16
  4050d2:	2c10      	cmp	r4, #16
  4050d4:	dd10      	ble.n	4050f8 <_vfiprintf_r+0x79c>
  4050d6:	1c4b      	adds	r3, r1, #1
  4050d8:	3210      	adds	r2, #16
  4050da:	2b07      	cmp	r3, #7
  4050dc:	9211      	str	r2, [sp, #68]	; 0x44
  4050de:	e88e 0060 	stmia.w	lr, {r5, r6}
  4050e2:	9310      	str	r3, [sp, #64]	; 0x40
  4050e4:	ddf0      	ble.n	4050c8 <_vfiprintf_r+0x76c>
  4050e6:	2a00      	cmp	r2, #0
  4050e8:	d165      	bne.n	4051b6 <_vfiprintf_r+0x85a>
  4050ea:	3c10      	subs	r4, #16
  4050ec:	2c10      	cmp	r4, #16
  4050ee:	f04f 0001 	mov.w	r0, #1
  4050f2:	4611      	mov	r1, r2
  4050f4:	46ce      	mov	lr, r9
  4050f6:	dcee      	bgt.n	4050d6 <_vfiprintf_r+0x77a>
  4050f8:	46f2      	mov	sl, lr
  4050fa:	4422      	add	r2, r4
  4050fc:	2807      	cmp	r0, #7
  4050fe:	9211      	str	r2, [sp, #68]	; 0x44
  405100:	f8ca 5000 	str.w	r5, [sl]
  405104:	f8ca 4004 	str.w	r4, [sl, #4]
  405108:	9010      	str	r0, [sp, #64]	; 0x40
  40510a:	f300 8085 	bgt.w	405218 <_vfiprintf_r+0x8bc>
  40510e:	f10a 0a08 	add.w	sl, sl, #8
  405112:	3001      	adds	r0, #1
  405114:	9905      	ldr	r1, [sp, #20]
  405116:	f8ca b000 	str.w	fp, [sl]
  40511a:	440a      	add	r2, r1
  40511c:	2807      	cmp	r0, #7
  40511e:	9211      	str	r2, [sp, #68]	; 0x44
  405120:	f8ca 1004 	str.w	r1, [sl, #4]
  405124:	9010      	str	r0, [sp, #64]	; 0x40
  405126:	f340 8082 	ble.w	40522e <_vfiprintf_r+0x8d2>
  40512a:	2a00      	cmp	r2, #0
  40512c:	f040 8118 	bne.w	405360 <_vfiprintf_r+0xa04>
  405130:	9b02      	ldr	r3, [sp, #8]
  405132:	9210      	str	r2, [sp, #64]	; 0x40
  405134:	0758      	lsls	r0, r3, #29
  405136:	d535      	bpl.n	4051a4 <_vfiprintf_r+0x848>
  405138:	9b08      	ldr	r3, [sp, #32]
  40513a:	9901      	ldr	r1, [sp, #4]
  40513c:	1a5c      	subs	r4, r3, r1
  40513e:	2c00      	cmp	r4, #0
  405140:	f340 80e7 	ble.w	405312 <_vfiprintf_r+0x9b6>
  405144:	46ca      	mov	sl, r9
  405146:	2c10      	cmp	r4, #16
  405148:	f340 8218 	ble.w	40557c <_vfiprintf_r+0xc20>
  40514c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40514e:	4e8f      	ldr	r6, [pc, #572]	; (40538c <_vfiprintf_r+0xa30>)
  405150:	9f06      	ldr	r7, [sp, #24]
  405152:	f8dd b010 	ldr.w	fp, [sp, #16]
  405156:	2510      	movs	r5, #16
  405158:	e006      	b.n	405168 <_vfiprintf_r+0x80c>
  40515a:	1c88      	adds	r0, r1, #2
  40515c:	f10a 0a08 	add.w	sl, sl, #8
  405160:	4619      	mov	r1, r3
  405162:	3c10      	subs	r4, #16
  405164:	2c10      	cmp	r4, #16
  405166:	dd11      	ble.n	40518c <_vfiprintf_r+0x830>
  405168:	1c4b      	adds	r3, r1, #1
  40516a:	3210      	adds	r2, #16
  40516c:	2b07      	cmp	r3, #7
  40516e:	9211      	str	r2, [sp, #68]	; 0x44
  405170:	f8ca 6000 	str.w	r6, [sl]
  405174:	f8ca 5004 	str.w	r5, [sl, #4]
  405178:	9310      	str	r3, [sp, #64]	; 0x40
  40517a:	ddee      	ble.n	40515a <_vfiprintf_r+0x7fe>
  40517c:	bb42      	cbnz	r2, 4051d0 <_vfiprintf_r+0x874>
  40517e:	3c10      	subs	r4, #16
  405180:	2c10      	cmp	r4, #16
  405182:	f04f 0001 	mov.w	r0, #1
  405186:	4611      	mov	r1, r2
  405188:	46ca      	mov	sl, r9
  40518a:	dced      	bgt.n	405168 <_vfiprintf_r+0x80c>
  40518c:	4422      	add	r2, r4
  40518e:	2807      	cmp	r0, #7
  405190:	9211      	str	r2, [sp, #68]	; 0x44
  405192:	f8ca 6000 	str.w	r6, [sl]
  405196:	f8ca 4004 	str.w	r4, [sl, #4]
  40519a:	9010      	str	r0, [sp, #64]	; 0x40
  40519c:	dd51      	ble.n	405242 <_vfiprintf_r+0x8e6>
  40519e:	2a00      	cmp	r2, #0
  4051a0:	f040 819b 	bne.w	4054da <_vfiprintf_r+0xb7e>
  4051a4:	9b03      	ldr	r3, [sp, #12]
  4051a6:	9a08      	ldr	r2, [sp, #32]
  4051a8:	9901      	ldr	r1, [sp, #4]
  4051aa:	428a      	cmp	r2, r1
  4051ac:	bfac      	ite	ge
  4051ae:	189b      	addge	r3, r3, r2
  4051b0:	185b      	addlt	r3, r3, r1
  4051b2:	9303      	str	r3, [sp, #12]
  4051b4:	e04e      	b.n	405254 <_vfiprintf_r+0x8f8>
  4051b6:	aa0f      	add	r2, sp, #60	; 0x3c
  4051b8:	4651      	mov	r1, sl
  4051ba:	4638      	mov	r0, r7
  4051bc:	f7ff fb8e 	bl	4048dc <__sprint_r.part.0>
  4051c0:	2800      	cmp	r0, #0
  4051c2:	f040 813f 	bne.w	405444 <_vfiprintf_r+0xae8>
  4051c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051ca:	1c48      	adds	r0, r1, #1
  4051cc:	46ce      	mov	lr, r9
  4051ce:	e77f      	b.n	4050d0 <_vfiprintf_r+0x774>
  4051d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4051d2:	4659      	mov	r1, fp
  4051d4:	4638      	mov	r0, r7
  4051d6:	f7ff fb81 	bl	4048dc <__sprint_r.part.0>
  4051da:	b960      	cbnz	r0, 4051f6 <_vfiprintf_r+0x89a>
  4051dc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4051de:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4051e0:	1c48      	adds	r0, r1, #1
  4051e2:	46ca      	mov	sl, r9
  4051e4:	e7bd      	b.n	405162 <_vfiprintf_r+0x806>
  4051e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4051e8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4051ec:	2b00      	cmp	r3, #0
  4051ee:	f040 81d4 	bne.w	40559a <_vfiprintf_r+0xc3e>
  4051f2:	2300      	movs	r3, #0
  4051f4:	9310      	str	r3, [sp, #64]	; 0x40
  4051f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4051fa:	f013 0f01 	tst.w	r3, #1
  4051fe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405202:	d102      	bne.n	40520a <_vfiprintf_r+0x8ae>
  405204:	059a      	lsls	r2, r3, #22
  405206:	f140 80de 	bpl.w	4053c6 <_vfiprintf_r+0xa6a>
  40520a:	065b      	lsls	r3, r3, #25
  40520c:	f53f acb2 	bmi.w	404b74 <_vfiprintf_r+0x218>
  405210:	9803      	ldr	r0, [sp, #12]
  405212:	b02d      	add	sp, #180	; 0xb4
  405214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405218:	2a00      	cmp	r2, #0
  40521a:	f040 8106 	bne.w	40542a <_vfiprintf_r+0xace>
  40521e:	9a05      	ldr	r2, [sp, #20]
  405220:	921d      	str	r2, [sp, #116]	; 0x74
  405222:	2301      	movs	r3, #1
  405224:	9211      	str	r2, [sp, #68]	; 0x44
  405226:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40522a:	9310      	str	r3, [sp, #64]	; 0x40
  40522c:	46ca      	mov	sl, r9
  40522e:	f10a 0a08 	add.w	sl, sl, #8
  405232:	9b02      	ldr	r3, [sp, #8]
  405234:	0759      	lsls	r1, r3, #29
  405236:	d504      	bpl.n	405242 <_vfiprintf_r+0x8e6>
  405238:	9b08      	ldr	r3, [sp, #32]
  40523a:	9901      	ldr	r1, [sp, #4]
  40523c:	1a5c      	subs	r4, r3, r1
  40523e:	2c00      	cmp	r4, #0
  405240:	dc81      	bgt.n	405146 <_vfiprintf_r+0x7ea>
  405242:	9b03      	ldr	r3, [sp, #12]
  405244:	9908      	ldr	r1, [sp, #32]
  405246:	9801      	ldr	r0, [sp, #4]
  405248:	4281      	cmp	r1, r0
  40524a:	bfac      	ite	ge
  40524c:	185b      	addge	r3, r3, r1
  40524e:	181b      	addlt	r3, r3, r0
  405250:	9303      	str	r3, [sp, #12]
  405252:	bb72      	cbnz	r2, 4052b2 <_vfiprintf_r+0x956>
  405254:	2300      	movs	r3, #0
  405256:	9310      	str	r3, [sp, #64]	; 0x40
  405258:	46ca      	mov	sl, r9
  40525a:	f7ff bbbc 	b.w	4049d6 <_vfiprintf_r+0x7a>
  40525e:	aa0f      	add	r2, sp, #60	; 0x3c
  405260:	9904      	ldr	r1, [sp, #16]
  405262:	4620      	mov	r0, r4
  405264:	f7ff fb3a 	bl	4048dc <__sprint_r.part.0>
  405268:	bb50      	cbnz	r0, 4052c0 <_vfiprintf_r+0x964>
  40526a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40526c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40526e:	f101 0e01 	add.w	lr, r1, #1
  405272:	46cc      	mov	ip, r9
  405274:	e548      	b.n	404d08 <_vfiprintf_r+0x3ac>
  405276:	2a00      	cmp	r2, #0
  405278:	f040 8140 	bne.w	4054fc <_vfiprintf_r+0xba0>
  40527c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405280:	2900      	cmp	r1, #0
  405282:	f000 811b 	beq.w	4054bc <_vfiprintf_r+0xb60>
  405286:	2201      	movs	r2, #1
  405288:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40528c:	4610      	mov	r0, r2
  40528e:	921d      	str	r2, [sp, #116]	; 0x74
  405290:	911c      	str	r1, [sp, #112]	; 0x70
  405292:	46ca      	mov	sl, r9
  405294:	4601      	mov	r1, r0
  405296:	f10a 0a08 	add.w	sl, sl, #8
  40529a:	3001      	adds	r0, #1
  40529c:	e507      	b.n	404cae <_vfiprintf_r+0x352>
  40529e:	9b02      	ldr	r3, [sp, #8]
  4052a0:	2a01      	cmp	r2, #1
  4052a2:	f000 8098 	beq.w	4053d6 <_vfiprintf_r+0xa7a>
  4052a6:	2a02      	cmp	r2, #2
  4052a8:	d10d      	bne.n	4052c6 <_vfiprintf_r+0x96a>
  4052aa:	9302      	str	r3, [sp, #8]
  4052ac:	2600      	movs	r6, #0
  4052ae:	2700      	movs	r7, #0
  4052b0:	e5b0      	b.n	404e14 <_vfiprintf_r+0x4b8>
  4052b2:	aa0f      	add	r2, sp, #60	; 0x3c
  4052b4:	9904      	ldr	r1, [sp, #16]
  4052b6:	9806      	ldr	r0, [sp, #24]
  4052b8:	f7ff fb10 	bl	4048dc <__sprint_r.part.0>
  4052bc:	2800      	cmp	r0, #0
  4052be:	d0c9      	beq.n	405254 <_vfiprintf_r+0x8f8>
  4052c0:	f8dd b010 	ldr.w	fp, [sp, #16]
  4052c4:	e797      	b.n	4051f6 <_vfiprintf_r+0x89a>
  4052c6:	9302      	str	r3, [sp, #8]
  4052c8:	2600      	movs	r6, #0
  4052ca:	2700      	movs	r7, #0
  4052cc:	4649      	mov	r1, r9
  4052ce:	e000      	b.n	4052d2 <_vfiprintf_r+0x976>
  4052d0:	4659      	mov	r1, fp
  4052d2:	08f2      	lsrs	r2, r6, #3
  4052d4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  4052d8:	08f8      	lsrs	r0, r7, #3
  4052da:	f006 0307 	and.w	r3, r6, #7
  4052de:	4607      	mov	r7, r0
  4052e0:	4616      	mov	r6, r2
  4052e2:	3330      	adds	r3, #48	; 0x30
  4052e4:	ea56 0207 	orrs.w	r2, r6, r7
  4052e8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4052ec:	f101 3bff 	add.w	fp, r1, #4294967295
  4052f0:	d1ee      	bne.n	4052d0 <_vfiprintf_r+0x974>
  4052f2:	9a02      	ldr	r2, [sp, #8]
  4052f4:	07d6      	lsls	r6, r2, #31
  4052f6:	f57f ad9d 	bpl.w	404e34 <_vfiprintf_r+0x4d8>
  4052fa:	2b30      	cmp	r3, #48	; 0x30
  4052fc:	f43f ad9a 	beq.w	404e34 <_vfiprintf_r+0x4d8>
  405300:	3902      	subs	r1, #2
  405302:	2330      	movs	r3, #48	; 0x30
  405304:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405308:	eba9 0301 	sub.w	r3, r9, r1
  40530c:	9305      	str	r3, [sp, #20]
  40530e:	468b      	mov	fp, r1
  405310:	e476      	b.n	404c00 <_vfiprintf_r+0x2a4>
  405312:	9b03      	ldr	r3, [sp, #12]
  405314:	9a08      	ldr	r2, [sp, #32]
  405316:	428a      	cmp	r2, r1
  405318:	bfac      	ite	ge
  40531a:	189b      	addge	r3, r3, r2
  40531c:	185b      	addlt	r3, r3, r1
  40531e:	9303      	str	r3, [sp, #12]
  405320:	e798      	b.n	405254 <_vfiprintf_r+0x8f8>
  405322:	2202      	movs	r2, #2
  405324:	e44d      	b.n	404bc2 <_vfiprintf_r+0x266>
  405326:	2f00      	cmp	r7, #0
  405328:	bf08      	it	eq
  40532a:	2e0a      	cmpeq	r6, #10
  40532c:	d352      	bcc.n	4053d4 <_vfiprintf_r+0xa78>
  40532e:	46cb      	mov	fp, r9
  405330:	4630      	mov	r0, r6
  405332:	4639      	mov	r1, r7
  405334:	220a      	movs	r2, #10
  405336:	2300      	movs	r3, #0
  405338:	f001 fbc6 	bl	406ac8 <__aeabi_uldivmod>
  40533c:	3230      	adds	r2, #48	; 0x30
  40533e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  405342:	4630      	mov	r0, r6
  405344:	4639      	mov	r1, r7
  405346:	2300      	movs	r3, #0
  405348:	220a      	movs	r2, #10
  40534a:	f001 fbbd 	bl	406ac8 <__aeabi_uldivmod>
  40534e:	4606      	mov	r6, r0
  405350:	460f      	mov	r7, r1
  405352:	ea56 0307 	orrs.w	r3, r6, r7
  405356:	d1eb      	bne.n	405330 <_vfiprintf_r+0x9d4>
  405358:	e56c      	b.n	404e34 <_vfiprintf_r+0x4d8>
  40535a:	9405      	str	r4, [sp, #20]
  40535c:	46cb      	mov	fp, r9
  40535e:	e44f      	b.n	404c00 <_vfiprintf_r+0x2a4>
  405360:	aa0f      	add	r2, sp, #60	; 0x3c
  405362:	9904      	ldr	r1, [sp, #16]
  405364:	9806      	ldr	r0, [sp, #24]
  405366:	f7ff fab9 	bl	4048dc <__sprint_r.part.0>
  40536a:	2800      	cmp	r0, #0
  40536c:	d1a8      	bne.n	4052c0 <_vfiprintf_r+0x964>
  40536e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405370:	46ca      	mov	sl, r9
  405372:	e75e      	b.n	405232 <_vfiprintf_r+0x8d6>
  405374:	aa0f      	add	r2, sp, #60	; 0x3c
  405376:	9904      	ldr	r1, [sp, #16]
  405378:	9806      	ldr	r0, [sp, #24]
  40537a:	f7ff faaf 	bl	4048dc <__sprint_r.part.0>
  40537e:	2800      	cmp	r0, #0
  405380:	d19e      	bne.n	4052c0 <_vfiprintf_r+0x964>
  405382:	46ca      	mov	sl, r9
  405384:	f7ff bbc0 	b.w	404b08 <_vfiprintf_r+0x1ac>
  405388:	00407048 	.word	0x00407048
  40538c:	00407038 	.word	0x00407038
  405390:	3104      	adds	r1, #4
  405392:	6816      	ldr	r6, [r2, #0]
  405394:	9107      	str	r1, [sp, #28]
  405396:	2201      	movs	r2, #1
  405398:	2700      	movs	r7, #0
  40539a:	e412      	b.n	404bc2 <_vfiprintf_r+0x266>
  40539c:	9807      	ldr	r0, [sp, #28]
  40539e:	4601      	mov	r1, r0
  4053a0:	3104      	adds	r1, #4
  4053a2:	6806      	ldr	r6, [r0, #0]
  4053a4:	9107      	str	r1, [sp, #28]
  4053a6:	2700      	movs	r7, #0
  4053a8:	e40b      	b.n	404bc2 <_vfiprintf_r+0x266>
  4053aa:	680e      	ldr	r6, [r1, #0]
  4053ac:	3104      	adds	r1, #4
  4053ae:	9107      	str	r1, [sp, #28]
  4053b0:	2700      	movs	r7, #0
  4053b2:	e591      	b.n	404ed8 <_vfiprintf_r+0x57c>
  4053b4:	9907      	ldr	r1, [sp, #28]
  4053b6:	680e      	ldr	r6, [r1, #0]
  4053b8:	460a      	mov	r2, r1
  4053ba:	17f7      	asrs	r7, r6, #31
  4053bc:	3204      	adds	r2, #4
  4053be:	9207      	str	r2, [sp, #28]
  4053c0:	4630      	mov	r0, r6
  4053c2:	4639      	mov	r1, r7
  4053c4:	e50f      	b.n	404de6 <_vfiprintf_r+0x48a>
  4053c6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4053ca:	f000 fe7f 	bl	4060cc <__retarget_lock_release_recursive>
  4053ce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4053d2:	e71a      	b.n	40520a <_vfiprintf_r+0x8ae>
  4053d4:	9b02      	ldr	r3, [sp, #8]
  4053d6:	9302      	str	r3, [sp, #8]
  4053d8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4053dc:	3630      	adds	r6, #48	; 0x30
  4053de:	2301      	movs	r3, #1
  4053e0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4053e4:	9305      	str	r3, [sp, #20]
  4053e6:	e40b      	b.n	404c00 <_vfiprintf_r+0x2a4>
  4053e8:	aa0f      	add	r2, sp, #60	; 0x3c
  4053ea:	9904      	ldr	r1, [sp, #16]
  4053ec:	9806      	ldr	r0, [sp, #24]
  4053ee:	f7ff fa75 	bl	4048dc <__sprint_r.part.0>
  4053f2:	2800      	cmp	r0, #0
  4053f4:	f47f af64 	bne.w	4052c0 <_vfiprintf_r+0x964>
  4053f8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4053fc:	1c48      	adds	r0, r1, #1
  4053fe:	46ca      	mov	sl, r9
  405400:	e651      	b.n	4050a6 <_vfiprintf_r+0x74a>
  405402:	aa0f      	add	r2, sp, #60	; 0x3c
  405404:	9904      	ldr	r1, [sp, #16]
  405406:	9806      	ldr	r0, [sp, #24]
  405408:	f7ff fa68 	bl	4048dc <__sprint_r.part.0>
  40540c:	2800      	cmp	r0, #0
  40540e:	f47f af57 	bne.w	4052c0 <_vfiprintf_r+0x964>
  405412:	9910      	ldr	r1, [sp, #64]	; 0x40
  405414:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405416:	1c48      	adds	r0, r1, #1
  405418:	46ca      	mov	sl, r9
  40541a:	e448      	b.n	404cae <_vfiprintf_r+0x352>
  40541c:	2a00      	cmp	r2, #0
  40541e:	f040 8091 	bne.w	405544 <_vfiprintf_r+0xbe8>
  405422:	2001      	movs	r0, #1
  405424:	4611      	mov	r1, r2
  405426:	46ca      	mov	sl, r9
  405428:	e641      	b.n	4050ae <_vfiprintf_r+0x752>
  40542a:	aa0f      	add	r2, sp, #60	; 0x3c
  40542c:	9904      	ldr	r1, [sp, #16]
  40542e:	9806      	ldr	r0, [sp, #24]
  405430:	f7ff fa54 	bl	4048dc <__sprint_r.part.0>
  405434:	2800      	cmp	r0, #0
  405436:	f47f af43 	bne.w	4052c0 <_vfiprintf_r+0x964>
  40543a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40543c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40543e:	3001      	adds	r0, #1
  405440:	46ca      	mov	sl, r9
  405442:	e667      	b.n	405114 <_vfiprintf_r+0x7b8>
  405444:	46d3      	mov	fp, sl
  405446:	e6d6      	b.n	4051f6 <_vfiprintf_r+0x89a>
  405448:	9e07      	ldr	r6, [sp, #28]
  40544a:	3607      	adds	r6, #7
  40544c:	f026 0207 	bic.w	r2, r6, #7
  405450:	f102 0108 	add.w	r1, r2, #8
  405454:	e9d2 6700 	ldrd	r6, r7, [r2]
  405458:	9107      	str	r1, [sp, #28]
  40545a:	2201      	movs	r2, #1
  40545c:	f7ff bbb1 	b.w	404bc2 <_vfiprintf_r+0x266>
  405460:	9e07      	ldr	r6, [sp, #28]
  405462:	3607      	adds	r6, #7
  405464:	f026 0607 	bic.w	r6, r6, #7
  405468:	e9d6 0100 	ldrd	r0, r1, [r6]
  40546c:	f106 0208 	add.w	r2, r6, #8
  405470:	9207      	str	r2, [sp, #28]
  405472:	4606      	mov	r6, r0
  405474:	460f      	mov	r7, r1
  405476:	e4b6      	b.n	404de6 <_vfiprintf_r+0x48a>
  405478:	9e07      	ldr	r6, [sp, #28]
  40547a:	3607      	adds	r6, #7
  40547c:	f026 0207 	bic.w	r2, r6, #7
  405480:	f102 0108 	add.w	r1, r2, #8
  405484:	e9d2 6700 	ldrd	r6, r7, [r2]
  405488:	9107      	str	r1, [sp, #28]
  40548a:	2200      	movs	r2, #0
  40548c:	f7ff bb99 	b.w	404bc2 <_vfiprintf_r+0x266>
  405490:	9e07      	ldr	r6, [sp, #28]
  405492:	3607      	adds	r6, #7
  405494:	f026 0107 	bic.w	r1, r6, #7
  405498:	f101 0008 	add.w	r0, r1, #8
  40549c:	9007      	str	r0, [sp, #28]
  40549e:	e9d1 6700 	ldrd	r6, r7, [r1]
  4054a2:	e519      	b.n	404ed8 <_vfiprintf_r+0x57c>
  4054a4:	46cb      	mov	fp, r9
  4054a6:	f7ff bbab 	b.w	404c00 <_vfiprintf_r+0x2a4>
  4054aa:	252d      	movs	r5, #45	; 0x2d
  4054ac:	4276      	negs	r6, r6
  4054ae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4054b2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4054b6:	2201      	movs	r2, #1
  4054b8:	f7ff bb88 	b.w	404bcc <_vfiprintf_r+0x270>
  4054bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4054be:	b9b3      	cbnz	r3, 4054ee <_vfiprintf_r+0xb92>
  4054c0:	4611      	mov	r1, r2
  4054c2:	2001      	movs	r0, #1
  4054c4:	46ca      	mov	sl, r9
  4054c6:	e5f2      	b.n	4050ae <_vfiprintf_r+0x752>
  4054c8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4054cc:	f000 fdfe 	bl	4060cc <__retarget_lock_release_recursive>
  4054d0:	f04f 33ff 	mov.w	r3, #4294967295
  4054d4:	9303      	str	r3, [sp, #12]
  4054d6:	f7ff bb50 	b.w	404b7a <_vfiprintf_r+0x21e>
  4054da:	aa0f      	add	r2, sp, #60	; 0x3c
  4054dc:	9904      	ldr	r1, [sp, #16]
  4054de:	9806      	ldr	r0, [sp, #24]
  4054e0:	f7ff f9fc 	bl	4048dc <__sprint_r.part.0>
  4054e4:	2800      	cmp	r0, #0
  4054e6:	f47f aeeb 	bne.w	4052c0 <_vfiprintf_r+0x964>
  4054ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054ec:	e6a9      	b.n	405242 <_vfiprintf_r+0x8e6>
  4054ee:	ab0e      	add	r3, sp, #56	; 0x38
  4054f0:	2202      	movs	r2, #2
  4054f2:	931c      	str	r3, [sp, #112]	; 0x70
  4054f4:	921d      	str	r2, [sp, #116]	; 0x74
  4054f6:	2001      	movs	r0, #1
  4054f8:	46ca      	mov	sl, r9
  4054fa:	e5d0      	b.n	40509e <_vfiprintf_r+0x742>
  4054fc:	aa0f      	add	r2, sp, #60	; 0x3c
  4054fe:	9904      	ldr	r1, [sp, #16]
  405500:	9806      	ldr	r0, [sp, #24]
  405502:	f7ff f9eb 	bl	4048dc <__sprint_r.part.0>
  405506:	2800      	cmp	r0, #0
  405508:	f47f aeda 	bne.w	4052c0 <_vfiprintf_r+0x964>
  40550c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40550e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405510:	1c48      	adds	r0, r1, #1
  405512:	46ca      	mov	sl, r9
  405514:	e5a4      	b.n	405060 <_vfiprintf_r+0x704>
  405516:	9a07      	ldr	r2, [sp, #28]
  405518:	9903      	ldr	r1, [sp, #12]
  40551a:	6813      	ldr	r3, [r2, #0]
  40551c:	17cd      	asrs	r5, r1, #31
  40551e:	4608      	mov	r0, r1
  405520:	3204      	adds	r2, #4
  405522:	4629      	mov	r1, r5
  405524:	9207      	str	r2, [sp, #28]
  405526:	e9c3 0100 	strd	r0, r1, [r3]
  40552a:	f7ff ba54 	b.w	4049d6 <_vfiprintf_r+0x7a>
  40552e:	4658      	mov	r0, fp
  405530:	9607      	str	r6, [sp, #28]
  405532:	9302      	str	r3, [sp, #8]
  405534:	f7ff f964 	bl	404800 <strlen>
  405538:	2400      	movs	r4, #0
  40553a:	9005      	str	r0, [sp, #20]
  40553c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405540:	f7ff bb5e 	b.w	404c00 <_vfiprintf_r+0x2a4>
  405544:	aa0f      	add	r2, sp, #60	; 0x3c
  405546:	9904      	ldr	r1, [sp, #16]
  405548:	9806      	ldr	r0, [sp, #24]
  40554a:	f7ff f9c7 	bl	4048dc <__sprint_r.part.0>
  40554e:	2800      	cmp	r0, #0
  405550:	f47f aeb6 	bne.w	4052c0 <_vfiprintf_r+0x964>
  405554:	9910      	ldr	r1, [sp, #64]	; 0x40
  405556:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405558:	1c48      	adds	r0, r1, #1
  40555a:	46ca      	mov	sl, r9
  40555c:	e5a7      	b.n	4050ae <_vfiprintf_r+0x752>
  40555e:	9910      	ldr	r1, [sp, #64]	; 0x40
  405560:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405562:	4e20      	ldr	r6, [pc, #128]	; (4055e4 <_vfiprintf_r+0xc88>)
  405564:	3101      	adds	r1, #1
  405566:	f7ff bb90 	b.w	404c8a <_vfiprintf_r+0x32e>
  40556a:	2c06      	cmp	r4, #6
  40556c:	bf28      	it	cs
  40556e:	2406      	movcs	r4, #6
  405570:	9405      	str	r4, [sp, #20]
  405572:	9607      	str	r6, [sp, #28]
  405574:	9401      	str	r4, [sp, #4]
  405576:	f8df b070 	ldr.w	fp, [pc, #112]	; 4055e8 <_vfiprintf_r+0xc8c>
  40557a:	e4d5      	b.n	404f28 <_vfiprintf_r+0x5cc>
  40557c:	9810      	ldr	r0, [sp, #64]	; 0x40
  40557e:	4e19      	ldr	r6, [pc, #100]	; (4055e4 <_vfiprintf_r+0xc88>)
  405580:	3001      	adds	r0, #1
  405582:	e603      	b.n	40518c <_vfiprintf_r+0x830>
  405584:	9405      	str	r4, [sp, #20]
  405586:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40558a:	9607      	str	r6, [sp, #28]
  40558c:	9302      	str	r3, [sp, #8]
  40558e:	4604      	mov	r4, r0
  405590:	f7ff bb36 	b.w	404c00 <_vfiprintf_r+0x2a4>
  405594:	4686      	mov	lr, r0
  405596:	f7ff bbce 	b.w	404d36 <_vfiprintf_r+0x3da>
  40559a:	9806      	ldr	r0, [sp, #24]
  40559c:	aa0f      	add	r2, sp, #60	; 0x3c
  40559e:	4659      	mov	r1, fp
  4055a0:	f7ff f99c 	bl	4048dc <__sprint_r.part.0>
  4055a4:	2800      	cmp	r0, #0
  4055a6:	f43f ae24 	beq.w	4051f2 <_vfiprintf_r+0x896>
  4055aa:	e624      	b.n	4051f6 <_vfiprintf_r+0x89a>
  4055ac:	9907      	ldr	r1, [sp, #28]
  4055ae:	f898 2001 	ldrb.w	r2, [r8, #1]
  4055b2:	680c      	ldr	r4, [r1, #0]
  4055b4:	3104      	adds	r1, #4
  4055b6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4055ba:	46b8      	mov	r8, r7
  4055bc:	9107      	str	r1, [sp, #28]
  4055be:	f7ff ba3f 	b.w	404a40 <_vfiprintf_r+0xe4>
  4055c2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055c6:	e43c      	b.n	404e42 <_vfiprintf_r+0x4e6>
  4055c8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055cc:	e521      	b.n	405012 <_vfiprintf_r+0x6b6>
  4055ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055d2:	f7ff bbf4 	b.w	404dbe <_vfiprintf_r+0x462>
  4055d6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055da:	e491      	b.n	404f00 <_vfiprintf_r+0x5a4>
  4055dc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4055e0:	e469      	b.n	404eb6 <_vfiprintf_r+0x55a>
  4055e2:	bf00      	nop
  4055e4:	00407038 	.word	0x00407038
  4055e8:	00407030 	.word	0x00407030

004055ec <__sbprintf>:
  4055ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055f0:	460c      	mov	r4, r1
  4055f2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4055f6:	8989      	ldrh	r1, [r1, #12]
  4055f8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4055fa:	89e5      	ldrh	r5, [r4, #14]
  4055fc:	9619      	str	r6, [sp, #100]	; 0x64
  4055fe:	f021 0102 	bic.w	r1, r1, #2
  405602:	4606      	mov	r6, r0
  405604:	69e0      	ldr	r0, [r4, #28]
  405606:	f8ad 100c 	strh.w	r1, [sp, #12]
  40560a:	4617      	mov	r7, r2
  40560c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405610:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405612:	f8ad 500e 	strh.w	r5, [sp, #14]
  405616:	4698      	mov	r8, r3
  405618:	ad1a      	add	r5, sp, #104	; 0x68
  40561a:	2300      	movs	r3, #0
  40561c:	9007      	str	r0, [sp, #28]
  40561e:	a816      	add	r0, sp, #88	; 0x58
  405620:	9209      	str	r2, [sp, #36]	; 0x24
  405622:	9306      	str	r3, [sp, #24]
  405624:	9500      	str	r5, [sp, #0]
  405626:	9504      	str	r5, [sp, #16]
  405628:	9102      	str	r1, [sp, #8]
  40562a:	9105      	str	r1, [sp, #20]
  40562c:	f000 fd48 	bl	4060c0 <__retarget_lock_init_recursive>
  405630:	4643      	mov	r3, r8
  405632:	463a      	mov	r2, r7
  405634:	4669      	mov	r1, sp
  405636:	4630      	mov	r0, r6
  405638:	f7ff f990 	bl	40495c <_vfiprintf_r>
  40563c:	1e05      	subs	r5, r0, #0
  40563e:	db07      	blt.n	405650 <__sbprintf+0x64>
  405640:	4630      	mov	r0, r6
  405642:	4669      	mov	r1, sp
  405644:	f000 f928 	bl	405898 <_fflush_r>
  405648:	2800      	cmp	r0, #0
  40564a:	bf18      	it	ne
  40564c:	f04f 35ff 	movne.w	r5, #4294967295
  405650:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405654:	065b      	lsls	r3, r3, #25
  405656:	d503      	bpl.n	405660 <__sbprintf+0x74>
  405658:	89a3      	ldrh	r3, [r4, #12]
  40565a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40565e:	81a3      	strh	r3, [r4, #12]
  405660:	9816      	ldr	r0, [sp, #88]	; 0x58
  405662:	f000 fd2f 	bl	4060c4 <__retarget_lock_close_recursive>
  405666:	4628      	mov	r0, r5
  405668:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  40566c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00405670 <__swsetup_r>:
  405670:	b538      	push	{r3, r4, r5, lr}
  405672:	4b30      	ldr	r3, [pc, #192]	; (405734 <__swsetup_r+0xc4>)
  405674:	681b      	ldr	r3, [r3, #0]
  405676:	4605      	mov	r5, r0
  405678:	460c      	mov	r4, r1
  40567a:	b113      	cbz	r3, 405682 <__swsetup_r+0x12>
  40567c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  40567e:	2a00      	cmp	r2, #0
  405680:	d038      	beq.n	4056f4 <__swsetup_r+0x84>
  405682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405686:	b293      	uxth	r3, r2
  405688:	0718      	lsls	r0, r3, #28
  40568a:	d50c      	bpl.n	4056a6 <__swsetup_r+0x36>
  40568c:	6920      	ldr	r0, [r4, #16]
  40568e:	b1a8      	cbz	r0, 4056bc <__swsetup_r+0x4c>
  405690:	f013 0201 	ands.w	r2, r3, #1
  405694:	d01e      	beq.n	4056d4 <__swsetup_r+0x64>
  405696:	6963      	ldr	r3, [r4, #20]
  405698:	2200      	movs	r2, #0
  40569a:	425b      	negs	r3, r3
  40569c:	61a3      	str	r3, [r4, #24]
  40569e:	60a2      	str	r2, [r4, #8]
  4056a0:	b1f0      	cbz	r0, 4056e0 <__swsetup_r+0x70>
  4056a2:	2000      	movs	r0, #0
  4056a4:	bd38      	pop	{r3, r4, r5, pc}
  4056a6:	06d9      	lsls	r1, r3, #27
  4056a8:	d53c      	bpl.n	405724 <__swsetup_r+0xb4>
  4056aa:	0758      	lsls	r0, r3, #29
  4056ac:	d426      	bmi.n	4056fc <__swsetup_r+0x8c>
  4056ae:	6920      	ldr	r0, [r4, #16]
  4056b0:	f042 0308 	orr.w	r3, r2, #8
  4056b4:	81a3      	strh	r3, [r4, #12]
  4056b6:	b29b      	uxth	r3, r3
  4056b8:	2800      	cmp	r0, #0
  4056ba:	d1e9      	bne.n	405690 <__swsetup_r+0x20>
  4056bc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  4056c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  4056c4:	d0e4      	beq.n	405690 <__swsetup_r+0x20>
  4056c6:	4628      	mov	r0, r5
  4056c8:	4621      	mov	r1, r4
  4056ca:	f000 fd2f 	bl	40612c <__smakebuf_r>
  4056ce:	89a3      	ldrh	r3, [r4, #12]
  4056d0:	6920      	ldr	r0, [r4, #16]
  4056d2:	e7dd      	b.n	405690 <__swsetup_r+0x20>
  4056d4:	0799      	lsls	r1, r3, #30
  4056d6:	bf58      	it	pl
  4056d8:	6962      	ldrpl	r2, [r4, #20]
  4056da:	60a2      	str	r2, [r4, #8]
  4056dc:	2800      	cmp	r0, #0
  4056de:	d1e0      	bne.n	4056a2 <__swsetup_r+0x32>
  4056e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4056e4:	061a      	lsls	r2, r3, #24
  4056e6:	d5dd      	bpl.n	4056a4 <__swsetup_r+0x34>
  4056e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4056ec:	81a3      	strh	r3, [r4, #12]
  4056ee:	f04f 30ff 	mov.w	r0, #4294967295
  4056f2:	bd38      	pop	{r3, r4, r5, pc}
  4056f4:	4618      	mov	r0, r3
  4056f6:	f000 f927 	bl	405948 <__sinit>
  4056fa:	e7c2      	b.n	405682 <__swsetup_r+0x12>
  4056fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4056fe:	b151      	cbz	r1, 405716 <__swsetup_r+0xa6>
  405700:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405704:	4299      	cmp	r1, r3
  405706:	d004      	beq.n	405712 <__swsetup_r+0xa2>
  405708:	4628      	mov	r0, r5
  40570a:	f000 fa43 	bl	405b94 <_free_r>
  40570e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405712:	2300      	movs	r3, #0
  405714:	6323      	str	r3, [r4, #48]	; 0x30
  405716:	2300      	movs	r3, #0
  405718:	6920      	ldr	r0, [r4, #16]
  40571a:	6063      	str	r3, [r4, #4]
  40571c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405720:	6020      	str	r0, [r4, #0]
  405722:	e7c5      	b.n	4056b0 <__swsetup_r+0x40>
  405724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405728:	2309      	movs	r3, #9
  40572a:	602b      	str	r3, [r5, #0]
  40572c:	f04f 30ff 	mov.w	r0, #4294967295
  405730:	81a2      	strh	r2, [r4, #12]
  405732:	bd38      	pop	{r3, r4, r5, pc}
  405734:	2040001c 	.word	0x2040001c

00405738 <register_fini>:
  405738:	4b02      	ldr	r3, [pc, #8]	; (405744 <register_fini+0xc>)
  40573a:	b113      	cbz	r3, 405742 <register_fini+0xa>
  40573c:	4802      	ldr	r0, [pc, #8]	; (405748 <register_fini+0x10>)
  40573e:	f000 b805 	b.w	40574c <atexit>
  405742:	4770      	bx	lr
  405744:	00000000 	.word	0x00000000
  405748:	004059b9 	.word	0x004059b9

0040574c <atexit>:
  40574c:	2300      	movs	r3, #0
  40574e:	4601      	mov	r1, r0
  405750:	461a      	mov	r2, r3
  405752:	4618      	mov	r0, r3
  405754:	f001 b890 	b.w	406878 <__register_exitproc>

00405758 <__sflush_r>:
  405758:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40575c:	b29a      	uxth	r2, r3
  40575e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405762:	460d      	mov	r5, r1
  405764:	0711      	lsls	r1, r2, #28
  405766:	4680      	mov	r8, r0
  405768:	d43a      	bmi.n	4057e0 <__sflush_r+0x88>
  40576a:	686a      	ldr	r2, [r5, #4]
  40576c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  405770:	2a00      	cmp	r2, #0
  405772:	81ab      	strh	r3, [r5, #12]
  405774:	dd6f      	ble.n	405856 <__sflush_r+0xfe>
  405776:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405778:	2c00      	cmp	r4, #0
  40577a:	d049      	beq.n	405810 <__sflush_r+0xb8>
  40577c:	2200      	movs	r2, #0
  40577e:	b29b      	uxth	r3, r3
  405780:	f8d8 6000 	ldr.w	r6, [r8]
  405784:	f8c8 2000 	str.w	r2, [r8]
  405788:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  40578c:	d067      	beq.n	40585e <__sflush_r+0x106>
  40578e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405790:	075f      	lsls	r7, r3, #29
  405792:	d505      	bpl.n	4057a0 <__sflush_r+0x48>
  405794:	6869      	ldr	r1, [r5, #4]
  405796:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405798:	1a52      	subs	r2, r2, r1
  40579a:	b10b      	cbz	r3, 4057a0 <__sflush_r+0x48>
  40579c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40579e:	1ad2      	subs	r2, r2, r3
  4057a0:	2300      	movs	r3, #0
  4057a2:	69e9      	ldr	r1, [r5, #28]
  4057a4:	4640      	mov	r0, r8
  4057a6:	47a0      	blx	r4
  4057a8:	1c44      	adds	r4, r0, #1
  4057aa:	d03c      	beq.n	405826 <__sflush_r+0xce>
  4057ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4057b0:	692a      	ldr	r2, [r5, #16]
  4057b2:	602a      	str	r2, [r5, #0]
  4057b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4057b8:	2200      	movs	r2, #0
  4057ba:	81ab      	strh	r3, [r5, #12]
  4057bc:	04db      	lsls	r3, r3, #19
  4057be:	606a      	str	r2, [r5, #4]
  4057c0:	d447      	bmi.n	405852 <__sflush_r+0xfa>
  4057c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4057c4:	f8c8 6000 	str.w	r6, [r8]
  4057c8:	b311      	cbz	r1, 405810 <__sflush_r+0xb8>
  4057ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4057ce:	4299      	cmp	r1, r3
  4057d0:	d002      	beq.n	4057d8 <__sflush_r+0x80>
  4057d2:	4640      	mov	r0, r8
  4057d4:	f000 f9de 	bl	405b94 <_free_r>
  4057d8:	2000      	movs	r0, #0
  4057da:	6328      	str	r0, [r5, #48]	; 0x30
  4057dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4057e0:	692e      	ldr	r6, [r5, #16]
  4057e2:	b1ae      	cbz	r6, 405810 <__sflush_r+0xb8>
  4057e4:	682c      	ldr	r4, [r5, #0]
  4057e6:	602e      	str	r6, [r5, #0]
  4057e8:	0791      	lsls	r1, r2, #30
  4057ea:	bf0c      	ite	eq
  4057ec:	696b      	ldreq	r3, [r5, #20]
  4057ee:	2300      	movne	r3, #0
  4057f0:	1ba4      	subs	r4, r4, r6
  4057f2:	60ab      	str	r3, [r5, #8]
  4057f4:	e00a      	b.n	40580c <__sflush_r+0xb4>
  4057f6:	4623      	mov	r3, r4
  4057f8:	4632      	mov	r2, r6
  4057fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4057fc:	69e9      	ldr	r1, [r5, #28]
  4057fe:	4640      	mov	r0, r8
  405800:	47b8      	blx	r7
  405802:	2800      	cmp	r0, #0
  405804:	eba4 0400 	sub.w	r4, r4, r0
  405808:	4406      	add	r6, r0
  40580a:	dd04      	ble.n	405816 <__sflush_r+0xbe>
  40580c:	2c00      	cmp	r4, #0
  40580e:	dcf2      	bgt.n	4057f6 <__sflush_r+0x9e>
  405810:	2000      	movs	r0, #0
  405812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405816:	89ab      	ldrh	r3, [r5, #12]
  405818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40581c:	81ab      	strh	r3, [r5, #12]
  40581e:	f04f 30ff 	mov.w	r0, #4294967295
  405822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405826:	f8d8 4000 	ldr.w	r4, [r8]
  40582a:	2c1d      	cmp	r4, #29
  40582c:	d8f3      	bhi.n	405816 <__sflush_r+0xbe>
  40582e:	4b19      	ldr	r3, [pc, #100]	; (405894 <__sflush_r+0x13c>)
  405830:	40e3      	lsrs	r3, r4
  405832:	43db      	mvns	r3, r3
  405834:	f013 0301 	ands.w	r3, r3, #1
  405838:	d1ed      	bne.n	405816 <__sflush_r+0xbe>
  40583a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40583e:	606b      	str	r3, [r5, #4]
  405840:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405844:	6929      	ldr	r1, [r5, #16]
  405846:	81ab      	strh	r3, [r5, #12]
  405848:	04da      	lsls	r2, r3, #19
  40584a:	6029      	str	r1, [r5, #0]
  40584c:	d5b9      	bpl.n	4057c2 <__sflush_r+0x6a>
  40584e:	2c00      	cmp	r4, #0
  405850:	d1b7      	bne.n	4057c2 <__sflush_r+0x6a>
  405852:	6528      	str	r0, [r5, #80]	; 0x50
  405854:	e7b5      	b.n	4057c2 <__sflush_r+0x6a>
  405856:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405858:	2a00      	cmp	r2, #0
  40585a:	dc8c      	bgt.n	405776 <__sflush_r+0x1e>
  40585c:	e7d8      	b.n	405810 <__sflush_r+0xb8>
  40585e:	2301      	movs	r3, #1
  405860:	69e9      	ldr	r1, [r5, #28]
  405862:	4640      	mov	r0, r8
  405864:	47a0      	blx	r4
  405866:	1c43      	adds	r3, r0, #1
  405868:	4602      	mov	r2, r0
  40586a:	d002      	beq.n	405872 <__sflush_r+0x11a>
  40586c:	89ab      	ldrh	r3, [r5, #12]
  40586e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405870:	e78e      	b.n	405790 <__sflush_r+0x38>
  405872:	f8d8 3000 	ldr.w	r3, [r8]
  405876:	2b00      	cmp	r3, #0
  405878:	d0f8      	beq.n	40586c <__sflush_r+0x114>
  40587a:	2b1d      	cmp	r3, #29
  40587c:	d001      	beq.n	405882 <__sflush_r+0x12a>
  40587e:	2b16      	cmp	r3, #22
  405880:	d102      	bne.n	405888 <__sflush_r+0x130>
  405882:	f8c8 6000 	str.w	r6, [r8]
  405886:	e7c3      	b.n	405810 <__sflush_r+0xb8>
  405888:	89ab      	ldrh	r3, [r5, #12]
  40588a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40588e:	81ab      	strh	r3, [r5, #12]
  405890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405894:	20400001 	.word	0x20400001

00405898 <_fflush_r>:
  405898:	b538      	push	{r3, r4, r5, lr}
  40589a:	460d      	mov	r5, r1
  40589c:	4604      	mov	r4, r0
  40589e:	b108      	cbz	r0, 4058a4 <_fflush_r+0xc>
  4058a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4058a2:	b1bb      	cbz	r3, 4058d4 <_fflush_r+0x3c>
  4058a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4058a8:	b188      	cbz	r0, 4058ce <_fflush_r+0x36>
  4058aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4058ac:	07db      	lsls	r3, r3, #31
  4058ae:	d401      	bmi.n	4058b4 <_fflush_r+0x1c>
  4058b0:	0581      	lsls	r1, r0, #22
  4058b2:	d517      	bpl.n	4058e4 <_fflush_r+0x4c>
  4058b4:	4620      	mov	r0, r4
  4058b6:	4629      	mov	r1, r5
  4058b8:	f7ff ff4e 	bl	405758 <__sflush_r>
  4058bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4058be:	07da      	lsls	r2, r3, #31
  4058c0:	4604      	mov	r4, r0
  4058c2:	d402      	bmi.n	4058ca <_fflush_r+0x32>
  4058c4:	89ab      	ldrh	r3, [r5, #12]
  4058c6:	059b      	lsls	r3, r3, #22
  4058c8:	d507      	bpl.n	4058da <_fflush_r+0x42>
  4058ca:	4620      	mov	r0, r4
  4058cc:	bd38      	pop	{r3, r4, r5, pc}
  4058ce:	4604      	mov	r4, r0
  4058d0:	4620      	mov	r0, r4
  4058d2:	bd38      	pop	{r3, r4, r5, pc}
  4058d4:	f000 f838 	bl	405948 <__sinit>
  4058d8:	e7e4      	b.n	4058a4 <_fflush_r+0xc>
  4058da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4058dc:	f000 fbf6 	bl	4060cc <__retarget_lock_release_recursive>
  4058e0:	4620      	mov	r0, r4
  4058e2:	bd38      	pop	{r3, r4, r5, pc}
  4058e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4058e6:	f000 fbef 	bl	4060c8 <__retarget_lock_acquire_recursive>
  4058ea:	e7e3      	b.n	4058b4 <_fflush_r+0x1c>

004058ec <_cleanup_r>:
  4058ec:	4901      	ldr	r1, [pc, #4]	; (4058f4 <_cleanup_r+0x8>)
  4058ee:	f000 bbaf 	b.w	406050 <_fwalk_reent>
  4058f2:	bf00      	nop
  4058f4:	00406961 	.word	0x00406961

004058f8 <std.isra.0>:
  4058f8:	b510      	push	{r4, lr}
  4058fa:	2300      	movs	r3, #0
  4058fc:	4604      	mov	r4, r0
  4058fe:	8181      	strh	r1, [r0, #12]
  405900:	81c2      	strh	r2, [r0, #14]
  405902:	6003      	str	r3, [r0, #0]
  405904:	6043      	str	r3, [r0, #4]
  405906:	6083      	str	r3, [r0, #8]
  405908:	6643      	str	r3, [r0, #100]	; 0x64
  40590a:	6103      	str	r3, [r0, #16]
  40590c:	6143      	str	r3, [r0, #20]
  40590e:	6183      	str	r3, [r0, #24]
  405910:	4619      	mov	r1, r3
  405912:	2208      	movs	r2, #8
  405914:	305c      	adds	r0, #92	; 0x5c
  405916:	f7fe fdab 	bl	404470 <memset>
  40591a:	4807      	ldr	r0, [pc, #28]	; (405938 <std.isra.0+0x40>)
  40591c:	4907      	ldr	r1, [pc, #28]	; (40593c <std.isra.0+0x44>)
  40591e:	4a08      	ldr	r2, [pc, #32]	; (405940 <std.isra.0+0x48>)
  405920:	4b08      	ldr	r3, [pc, #32]	; (405944 <std.isra.0+0x4c>)
  405922:	6220      	str	r0, [r4, #32]
  405924:	61e4      	str	r4, [r4, #28]
  405926:	6261      	str	r1, [r4, #36]	; 0x24
  405928:	62a2      	str	r2, [r4, #40]	; 0x28
  40592a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40592c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405934:	f000 bbc4 	b.w	4060c0 <__retarget_lock_init_recursive>
  405938:	004066a5 	.word	0x004066a5
  40593c:	004066c9 	.word	0x004066c9
  405940:	00406705 	.word	0x00406705
  405944:	00406725 	.word	0x00406725

00405948 <__sinit>:
  405948:	b510      	push	{r4, lr}
  40594a:	4604      	mov	r4, r0
  40594c:	4812      	ldr	r0, [pc, #72]	; (405998 <__sinit+0x50>)
  40594e:	f000 fbbb 	bl	4060c8 <__retarget_lock_acquire_recursive>
  405952:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405954:	b9d2      	cbnz	r2, 40598c <__sinit+0x44>
  405956:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40595a:	4810      	ldr	r0, [pc, #64]	; (40599c <__sinit+0x54>)
  40595c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405960:	2103      	movs	r1, #3
  405962:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405966:	63e0      	str	r0, [r4, #60]	; 0x3c
  405968:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  40596c:	6860      	ldr	r0, [r4, #4]
  40596e:	2104      	movs	r1, #4
  405970:	f7ff ffc2 	bl	4058f8 <std.isra.0>
  405974:	2201      	movs	r2, #1
  405976:	2109      	movs	r1, #9
  405978:	68a0      	ldr	r0, [r4, #8]
  40597a:	f7ff ffbd 	bl	4058f8 <std.isra.0>
  40597e:	2202      	movs	r2, #2
  405980:	2112      	movs	r1, #18
  405982:	68e0      	ldr	r0, [r4, #12]
  405984:	f7ff ffb8 	bl	4058f8 <std.isra.0>
  405988:	2301      	movs	r3, #1
  40598a:	63a3      	str	r3, [r4, #56]	; 0x38
  40598c:	4802      	ldr	r0, [pc, #8]	; (405998 <__sinit+0x50>)
  40598e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405992:	f000 bb9b 	b.w	4060cc <__retarget_lock_release_recursive>
  405996:	bf00      	nop
  405998:	20400ca8 	.word	0x20400ca8
  40599c:	004058ed 	.word	0x004058ed

004059a0 <__sfp_lock_acquire>:
  4059a0:	4801      	ldr	r0, [pc, #4]	; (4059a8 <__sfp_lock_acquire+0x8>)
  4059a2:	f000 bb91 	b.w	4060c8 <__retarget_lock_acquire_recursive>
  4059a6:	bf00      	nop
  4059a8:	20400cbc 	.word	0x20400cbc

004059ac <__sfp_lock_release>:
  4059ac:	4801      	ldr	r0, [pc, #4]	; (4059b4 <__sfp_lock_release+0x8>)
  4059ae:	f000 bb8d 	b.w	4060cc <__retarget_lock_release_recursive>
  4059b2:	bf00      	nop
  4059b4:	20400cbc 	.word	0x20400cbc

004059b8 <__libc_fini_array>:
  4059b8:	b538      	push	{r3, r4, r5, lr}
  4059ba:	4c0a      	ldr	r4, [pc, #40]	; (4059e4 <__libc_fini_array+0x2c>)
  4059bc:	4d0a      	ldr	r5, [pc, #40]	; (4059e8 <__libc_fini_array+0x30>)
  4059be:	1b64      	subs	r4, r4, r5
  4059c0:	10a4      	asrs	r4, r4, #2
  4059c2:	d00a      	beq.n	4059da <__libc_fini_array+0x22>
  4059c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4059c8:	3b01      	subs	r3, #1
  4059ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4059ce:	3c01      	subs	r4, #1
  4059d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4059d4:	4798      	blx	r3
  4059d6:	2c00      	cmp	r4, #0
  4059d8:	d1f9      	bne.n	4059ce <__libc_fini_array+0x16>
  4059da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4059de:	f001 bbcf 	b.w	407180 <_fini>
  4059e2:	bf00      	nop
  4059e4:	00407190 	.word	0x00407190
  4059e8:	0040718c 	.word	0x0040718c

004059ec <__fputwc>:
  4059ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4059f0:	b082      	sub	sp, #8
  4059f2:	4680      	mov	r8, r0
  4059f4:	4689      	mov	r9, r1
  4059f6:	4614      	mov	r4, r2
  4059f8:	f000 fb54 	bl	4060a4 <__locale_mb_cur_max>
  4059fc:	2801      	cmp	r0, #1
  4059fe:	d036      	beq.n	405a6e <__fputwc+0x82>
  405a00:	464a      	mov	r2, r9
  405a02:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405a06:	a901      	add	r1, sp, #4
  405a08:	4640      	mov	r0, r8
  405a0a:	f000 fee7 	bl	4067dc <_wcrtomb_r>
  405a0e:	1c42      	adds	r2, r0, #1
  405a10:	4606      	mov	r6, r0
  405a12:	d025      	beq.n	405a60 <__fputwc+0x74>
  405a14:	b3a8      	cbz	r0, 405a82 <__fputwc+0x96>
  405a16:	f89d e004 	ldrb.w	lr, [sp, #4]
  405a1a:	2500      	movs	r5, #0
  405a1c:	f10d 0a04 	add.w	sl, sp, #4
  405a20:	e009      	b.n	405a36 <__fputwc+0x4a>
  405a22:	6823      	ldr	r3, [r4, #0]
  405a24:	1c5a      	adds	r2, r3, #1
  405a26:	6022      	str	r2, [r4, #0]
  405a28:	f883 e000 	strb.w	lr, [r3]
  405a2c:	3501      	adds	r5, #1
  405a2e:	42b5      	cmp	r5, r6
  405a30:	d227      	bcs.n	405a82 <__fputwc+0x96>
  405a32:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405a36:	68a3      	ldr	r3, [r4, #8]
  405a38:	3b01      	subs	r3, #1
  405a3a:	2b00      	cmp	r3, #0
  405a3c:	60a3      	str	r3, [r4, #8]
  405a3e:	daf0      	bge.n	405a22 <__fputwc+0x36>
  405a40:	69a7      	ldr	r7, [r4, #24]
  405a42:	42bb      	cmp	r3, r7
  405a44:	4671      	mov	r1, lr
  405a46:	4622      	mov	r2, r4
  405a48:	4640      	mov	r0, r8
  405a4a:	db02      	blt.n	405a52 <__fputwc+0x66>
  405a4c:	f1be 0f0a 	cmp.w	lr, #10
  405a50:	d1e7      	bne.n	405a22 <__fputwc+0x36>
  405a52:	f000 fe6b 	bl	40672c <__swbuf_r>
  405a56:	1c43      	adds	r3, r0, #1
  405a58:	d1e8      	bne.n	405a2c <__fputwc+0x40>
  405a5a:	b002      	add	sp, #8
  405a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a60:	89a3      	ldrh	r3, [r4, #12]
  405a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a66:	81a3      	strh	r3, [r4, #12]
  405a68:	b002      	add	sp, #8
  405a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a6e:	f109 33ff 	add.w	r3, r9, #4294967295
  405a72:	2bfe      	cmp	r3, #254	; 0xfe
  405a74:	d8c4      	bhi.n	405a00 <__fputwc+0x14>
  405a76:	fa5f fe89 	uxtb.w	lr, r9
  405a7a:	4606      	mov	r6, r0
  405a7c:	f88d e004 	strb.w	lr, [sp, #4]
  405a80:	e7cb      	b.n	405a1a <__fputwc+0x2e>
  405a82:	4648      	mov	r0, r9
  405a84:	b002      	add	sp, #8
  405a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405a8a:	bf00      	nop

00405a8c <_fputwc_r>:
  405a8c:	b530      	push	{r4, r5, lr}
  405a8e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405a90:	f013 0f01 	tst.w	r3, #1
  405a94:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405a98:	4614      	mov	r4, r2
  405a9a:	b083      	sub	sp, #12
  405a9c:	4605      	mov	r5, r0
  405a9e:	b29a      	uxth	r2, r3
  405aa0:	d101      	bne.n	405aa6 <_fputwc_r+0x1a>
  405aa2:	0590      	lsls	r0, r2, #22
  405aa4:	d51c      	bpl.n	405ae0 <_fputwc_r+0x54>
  405aa6:	0490      	lsls	r0, r2, #18
  405aa8:	d406      	bmi.n	405ab8 <_fputwc_r+0x2c>
  405aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405ab4:	81a3      	strh	r3, [r4, #12]
  405ab6:	6662      	str	r2, [r4, #100]	; 0x64
  405ab8:	4628      	mov	r0, r5
  405aba:	4622      	mov	r2, r4
  405abc:	f7ff ff96 	bl	4059ec <__fputwc>
  405ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405ac2:	07da      	lsls	r2, r3, #31
  405ac4:	4605      	mov	r5, r0
  405ac6:	d402      	bmi.n	405ace <_fputwc_r+0x42>
  405ac8:	89a3      	ldrh	r3, [r4, #12]
  405aca:	059b      	lsls	r3, r3, #22
  405acc:	d502      	bpl.n	405ad4 <_fputwc_r+0x48>
  405ace:	4628      	mov	r0, r5
  405ad0:	b003      	add	sp, #12
  405ad2:	bd30      	pop	{r4, r5, pc}
  405ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405ad6:	f000 faf9 	bl	4060cc <__retarget_lock_release_recursive>
  405ada:	4628      	mov	r0, r5
  405adc:	b003      	add	sp, #12
  405ade:	bd30      	pop	{r4, r5, pc}
  405ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405ae2:	9101      	str	r1, [sp, #4]
  405ae4:	f000 faf0 	bl	4060c8 <__retarget_lock_acquire_recursive>
  405ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405aec:	9901      	ldr	r1, [sp, #4]
  405aee:	b29a      	uxth	r2, r3
  405af0:	e7d9      	b.n	405aa6 <_fputwc_r+0x1a>
  405af2:	bf00      	nop

00405af4 <_malloc_trim_r>:
  405af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405af6:	4f24      	ldr	r7, [pc, #144]	; (405b88 <_malloc_trim_r+0x94>)
  405af8:	460c      	mov	r4, r1
  405afa:	4606      	mov	r6, r0
  405afc:	f7fe fd06 	bl	40450c <__malloc_lock>
  405b00:	68bb      	ldr	r3, [r7, #8]
  405b02:	685d      	ldr	r5, [r3, #4]
  405b04:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405b08:	310f      	adds	r1, #15
  405b0a:	f025 0503 	bic.w	r5, r5, #3
  405b0e:	4429      	add	r1, r5
  405b10:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405b14:	f021 010f 	bic.w	r1, r1, #15
  405b18:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405b1c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405b20:	db07      	blt.n	405b32 <_malloc_trim_r+0x3e>
  405b22:	2100      	movs	r1, #0
  405b24:	4630      	mov	r0, r6
  405b26:	f7fe fcfd 	bl	404524 <_sbrk_r>
  405b2a:	68bb      	ldr	r3, [r7, #8]
  405b2c:	442b      	add	r3, r5
  405b2e:	4298      	cmp	r0, r3
  405b30:	d004      	beq.n	405b3c <_malloc_trim_r+0x48>
  405b32:	4630      	mov	r0, r6
  405b34:	f7fe fcf0 	bl	404518 <__malloc_unlock>
  405b38:	2000      	movs	r0, #0
  405b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b3c:	4261      	negs	r1, r4
  405b3e:	4630      	mov	r0, r6
  405b40:	f7fe fcf0 	bl	404524 <_sbrk_r>
  405b44:	3001      	adds	r0, #1
  405b46:	d00d      	beq.n	405b64 <_malloc_trim_r+0x70>
  405b48:	4b10      	ldr	r3, [pc, #64]	; (405b8c <_malloc_trim_r+0x98>)
  405b4a:	68ba      	ldr	r2, [r7, #8]
  405b4c:	6819      	ldr	r1, [r3, #0]
  405b4e:	1b2d      	subs	r5, r5, r4
  405b50:	f045 0501 	orr.w	r5, r5, #1
  405b54:	4630      	mov	r0, r6
  405b56:	1b09      	subs	r1, r1, r4
  405b58:	6055      	str	r5, [r2, #4]
  405b5a:	6019      	str	r1, [r3, #0]
  405b5c:	f7fe fcdc 	bl	404518 <__malloc_unlock>
  405b60:	2001      	movs	r0, #1
  405b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b64:	2100      	movs	r1, #0
  405b66:	4630      	mov	r0, r6
  405b68:	f7fe fcdc 	bl	404524 <_sbrk_r>
  405b6c:	68ba      	ldr	r2, [r7, #8]
  405b6e:	1a83      	subs	r3, r0, r2
  405b70:	2b0f      	cmp	r3, #15
  405b72:	ddde      	ble.n	405b32 <_malloc_trim_r+0x3e>
  405b74:	4c06      	ldr	r4, [pc, #24]	; (405b90 <_malloc_trim_r+0x9c>)
  405b76:	4905      	ldr	r1, [pc, #20]	; (405b8c <_malloc_trim_r+0x98>)
  405b78:	6824      	ldr	r4, [r4, #0]
  405b7a:	f043 0301 	orr.w	r3, r3, #1
  405b7e:	1b00      	subs	r0, r0, r4
  405b80:	6053      	str	r3, [r2, #4]
  405b82:	6008      	str	r0, [r1, #0]
  405b84:	e7d5      	b.n	405b32 <_malloc_trim_r+0x3e>
  405b86:	bf00      	nop
  405b88:	20400448 	.word	0x20400448
  405b8c:	20400bd4 	.word	0x20400bd4
  405b90:	20400850 	.word	0x20400850

00405b94 <_free_r>:
  405b94:	2900      	cmp	r1, #0
  405b96:	d044      	beq.n	405c22 <_free_r+0x8e>
  405b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405b9c:	460d      	mov	r5, r1
  405b9e:	4680      	mov	r8, r0
  405ba0:	f7fe fcb4 	bl	40450c <__malloc_lock>
  405ba4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405ba8:	4969      	ldr	r1, [pc, #420]	; (405d50 <_free_r+0x1bc>)
  405baa:	f027 0301 	bic.w	r3, r7, #1
  405bae:	f1a5 0408 	sub.w	r4, r5, #8
  405bb2:	18e2      	adds	r2, r4, r3
  405bb4:	688e      	ldr	r6, [r1, #8]
  405bb6:	6850      	ldr	r0, [r2, #4]
  405bb8:	42b2      	cmp	r2, r6
  405bba:	f020 0003 	bic.w	r0, r0, #3
  405bbe:	d05e      	beq.n	405c7e <_free_r+0xea>
  405bc0:	07fe      	lsls	r6, r7, #31
  405bc2:	6050      	str	r0, [r2, #4]
  405bc4:	d40b      	bmi.n	405bde <_free_r+0x4a>
  405bc6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405bca:	1be4      	subs	r4, r4, r7
  405bcc:	f101 0e08 	add.w	lr, r1, #8
  405bd0:	68a5      	ldr	r5, [r4, #8]
  405bd2:	4575      	cmp	r5, lr
  405bd4:	443b      	add	r3, r7
  405bd6:	d06d      	beq.n	405cb4 <_free_r+0x120>
  405bd8:	68e7      	ldr	r7, [r4, #12]
  405bda:	60ef      	str	r7, [r5, #12]
  405bdc:	60bd      	str	r5, [r7, #8]
  405bde:	1815      	adds	r5, r2, r0
  405be0:	686d      	ldr	r5, [r5, #4]
  405be2:	07ed      	lsls	r5, r5, #31
  405be4:	d53e      	bpl.n	405c64 <_free_r+0xd0>
  405be6:	f043 0201 	orr.w	r2, r3, #1
  405bea:	6062      	str	r2, [r4, #4]
  405bec:	50e3      	str	r3, [r4, r3]
  405bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405bf2:	d217      	bcs.n	405c24 <_free_r+0x90>
  405bf4:	08db      	lsrs	r3, r3, #3
  405bf6:	1c58      	adds	r0, r3, #1
  405bf8:	109a      	asrs	r2, r3, #2
  405bfa:	684d      	ldr	r5, [r1, #4]
  405bfc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405c00:	60a7      	str	r7, [r4, #8]
  405c02:	2301      	movs	r3, #1
  405c04:	4093      	lsls	r3, r2
  405c06:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405c0a:	432b      	orrs	r3, r5
  405c0c:	3a08      	subs	r2, #8
  405c0e:	60e2      	str	r2, [r4, #12]
  405c10:	604b      	str	r3, [r1, #4]
  405c12:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405c16:	60fc      	str	r4, [r7, #12]
  405c18:	4640      	mov	r0, r8
  405c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c1e:	f7fe bc7b 	b.w	404518 <__malloc_unlock>
  405c22:	4770      	bx	lr
  405c24:	0a5a      	lsrs	r2, r3, #9
  405c26:	2a04      	cmp	r2, #4
  405c28:	d852      	bhi.n	405cd0 <_free_r+0x13c>
  405c2a:	099a      	lsrs	r2, r3, #6
  405c2c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405c30:	00ff      	lsls	r7, r7, #3
  405c32:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405c36:	19c8      	adds	r0, r1, r7
  405c38:	59ca      	ldr	r2, [r1, r7]
  405c3a:	3808      	subs	r0, #8
  405c3c:	4290      	cmp	r0, r2
  405c3e:	d04f      	beq.n	405ce0 <_free_r+0x14c>
  405c40:	6851      	ldr	r1, [r2, #4]
  405c42:	f021 0103 	bic.w	r1, r1, #3
  405c46:	428b      	cmp	r3, r1
  405c48:	d232      	bcs.n	405cb0 <_free_r+0x11c>
  405c4a:	6892      	ldr	r2, [r2, #8]
  405c4c:	4290      	cmp	r0, r2
  405c4e:	d1f7      	bne.n	405c40 <_free_r+0xac>
  405c50:	68c3      	ldr	r3, [r0, #12]
  405c52:	60a0      	str	r0, [r4, #8]
  405c54:	60e3      	str	r3, [r4, #12]
  405c56:	609c      	str	r4, [r3, #8]
  405c58:	60c4      	str	r4, [r0, #12]
  405c5a:	4640      	mov	r0, r8
  405c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405c60:	f7fe bc5a 	b.w	404518 <__malloc_unlock>
  405c64:	6895      	ldr	r5, [r2, #8]
  405c66:	4f3b      	ldr	r7, [pc, #236]	; (405d54 <_free_r+0x1c0>)
  405c68:	42bd      	cmp	r5, r7
  405c6a:	4403      	add	r3, r0
  405c6c:	d040      	beq.n	405cf0 <_free_r+0x15c>
  405c6e:	68d0      	ldr	r0, [r2, #12]
  405c70:	60e8      	str	r0, [r5, #12]
  405c72:	f043 0201 	orr.w	r2, r3, #1
  405c76:	6085      	str	r5, [r0, #8]
  405c78:	6062      	str	r2, [r4, #4]
  405c7a:	50e3      	str	r3, [r4, r3]
  405c7c:	e7b7      	b.n	405bee <_free_r+0x5a>
  405c7e:	07ff      	lsls	r7, r7, #31
  405c80:	4403      	add	r3, r0
  405c82:	d407      	bmi.n	405c94 <_free_r+0x100>
  405c84:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405c88:	1aa4      	subs	r4, r4, r2
  405c8a:	4413      	add	r3, r2
  405c8c:	68a0      	ldr	r0, [r4, #8]
  405c8e:	68e2      	ldr	r2, [r4, #12]
  405c90:	60c2      	str	r2, [r0, #12]
  405c92:	6090      	str	r0, [r2, #8]
  405c94:	4a30      	ldr	r2, [pc, #192]	; (405d58 <_free_r+0x1c4>)
  405c96:	6812      	ldr	r2, [r2, #0]
  405c98:	f043 0001 	orr.w	r0, r3, #1
  405c9c:	4293      	cmp	r3, r2
  405c9e:	6060      	str	r0, [r4, #4]
  405ca0:	608c      	str	r4, [r1, #8]
  405ca2:	d3b9      	bcc.n	405c18 <_free_r+0x84>
  405ca4:	4b2d      	ldr	r3, [pc, #180]	; (405d5c <_free_r+0x1c8>)
  405ca6:	4640      	mov	r0, r8
  405ca8:	6819      	ldr	r1, [r3, #0]
  405caa:	f7ff ff23 	bl	405af4 <_malloc_trim_r>
  405cae:	e7b3      	b.n	405c18 <_free_r+0x84>
  405cb0:	4610      	mov	r0, r2
  405cb2:	e7cd      	b.n	405c50 <_free_r+0xbc>
  405cb4:	1811      	adds	r1, r2, r0
  405cb6:	6849      	ldr	r1, [r1, #4]
  405cb8:	07c9      	lsls	r1, r1, #31
  405cba:	d444      	bmi.n	405d46 <_free_r+0x1b2>
  405cbc:	6891      	ldr	r1, [r2, #8]
  405cbe:	68d2      	ldr	r2, [r2, #12]
  405cc0:	60ca      	str	r2, [r1, #12]
  405cc2:	4403      	add	r3, r0
  405cc4:	f043 0001 	orr.w	r0, r3, #1
  405cc8:	6091      	str	r1, [r2, #8]
  405cca:	6060      	str	r0, [r4, #4]
  405ccc:	50e3      	str	r3, [r4, r3]
  405cce:	e7a3      	b.n	405c18 <_free_r+0x84>
  405cd0:	2a14      	cmp	r2, #20
  405cd2:	d816      	bhi.n	405d02 <_free_r+0x16e>
  405cd4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405cd8:	00ff      	lsls	r7, r7, #3
  405cda:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405cde:	e7aa      	b.n	405c36 <_free_r+0xa2>
  405ce0:	10aa      	asrs	r2, r5, #2
  405ce2:	2301      	movs	r3, #1
  405ce4:	684d      	ldr	r5, [r1, #4]
  405ce6:	4093      	lsls	r3, r2
  405ce8:	432b      	orrs	r3, r5
  405cea:	604b      	str	r3, [r1, #4]
  405cec:	4603      	mov	r3, r0
  405cee:	e7b0      	b.n	405c52 <_free_r+0xbe>
  405cf0:	f043 0201 	orr.w	r2, r3, #1
  405cf4:	614c      	str	r4, [r1, #20]
  405cf6:	610c      	str	r4, [r1, #16]
  405cf8:	60e5      	str	r5, [r4, #12]
  405cfa:	60a5      	str	r5, [r4, #8]
  405cfc:	6062      	str	r2, [r4, #4]
  405cfe:	50e3      	str	r3, [r4, r3]
  405d00:	e78a      	b.n	405c18 <_free_r+0x84>
  405d02:	2a54      	cmp	r2, #84	; 0x54
  405d04:	d806      	bhi.n	405d14 <_free_r+0x180>
  405d06:	0b1a      	lsrs	r2, r3, #12
  405d08:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405d0c:	00ff      	lsls	r7, r7, #3
  405d0e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405d12:	e790      	b.n	405c36 <_free_r+0xa2>
  405d14:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405d18:	d806      	bhi.n	405d28 <_free_r+0x194>
  405d1a:	0bda      	lsrs	r2, r3, #15
  405d1c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405d20:	00ff      	lsls	r7, r7, #3
  405d22:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405d26:	e786      	b.n	405c36 <_free_r+0xa2>
  405d28:	f240 5054 	movw	r0, #1364	; 0x554
  405d2c:	4282      	cmp	r2, r0
  405d2e:	d806      	bhi.n	405d3e <_free_r+0x1aa>
  405d30:	0c9a      	lsrs	r2, r3, #18
  405d32:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405d36:	00ff      	lsls	r7, r7, #3
  405d38:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405d3c:	e77b      	b.n	405c36 <_free_r+0xa2>
  405d3e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405d42:	257e      	movs	r5, #126	; 0x7e
  405d44:	e777      	b.n	405c36 <_free_r+0xa2>
  405d46:	f043 0101 	orr.w	r1, r3, #1
  405d4a:	6061      	str	r1, [r4, #4]
  405d4c:	6013      	str	r3, [r2, #0]
  405d4e:	e763      	b.n	405c18 <_free_r+0x84>
  405d50:	20400448 	.word	0x20400448
  405d54:	20400450 	.word	0x20400450
  405d58:	20400854 	.word	0x20400854
  405d5c:	20400c04 	.word	0x20400c04

00405d60 <__sfvwrite_r>:
  405d60:	6893      	ldr	r3, [r2, #8]
  405d62:	2b00      	cmp	r3, #0
  405d64:	d073      	beq.n	405e4e <__sfvwrite_r+0xee>
  405d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d6a:	898b      	ldrh	r3, [r1, #12]
  405d6c:	b083      	sub	sp, #12
  405d6e:	460c      	mov	r4, r1
  405d70:	0719      	lsls	r1, r3, #28
  405d72:	9000      	str	r0, [sp, #0]
  405d74:	4616      	mov	r6, r2
  405d76:	d526      	bpl.n	405dc6 <__sfvwrite_r+0x66>
  405d78:	6922      	ldr	r2, [r4, #16]
  405d7a:	b322      	cbz	r2, 405dc6 <__sfvwrite_r+0x66>
  405d7c:	f013 0002 	ands.w	r0, r3, #2
  405d80:	6835      	ldr	r5, [r6, #0]
  405d82:	d02c      	beq.n	405dde <__sfvwrite_r+0x7e>
  405d84:	f04f 0900 	mov.w	r9, #0
  405d88:	4fb0      	ldr	r7, [pc, #704]	; (40604c <__sfvwrite_r+0x2ec>)
  405d8a:	46c8      	mov	r8, r9
  405d8c:	46b2      	mov	sl, r6
  405d8e:	45b8      	cmp	r8, r7
  405d90:	4643      	mov	r3, r8
  405d92:	464a      	mov	r2, r9
  405d94:	bf28      	it	cs
  405d96:	463b      	movcs	r3, r7
  405d98:	9800      	ldr	r0, [sp, #0]
  405d9a:	f1b8 0f00 	cmp.w	r8, #0
  405d9e:	d050      	beq.n	405e42 <__sfvwrite_r+0xe2>
  405da0:	69e1      	ldr	r1, [r4, #28]
  405da2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405da4:	47b0      	blx	r6
  405da6:	2800      	cmp	r0, #0
  405da8:	dd58      	ble.n	405e5c <__sfvwrite_r+0xfc>
  405daa:	f8da 3008 	ldr.w	r3, [sl, #8]
  405dae:	1a1b      	subs	r3, r3, r0
  405db0:	4481      	add	r9, r0
  405db2:	eba8 0800 	sub.w	r8, r8, r0
  405db6:	f8ca 3008 	str.w	r3, [sl, #8]
  405dba:	2b00      	cmp	r3, #0
  405dbc:	d1e7      	bne.n	405d8e <__sfvwrite_r+0x2e>
  405dbe:	2000      	movs	r0, #0
  405dc0:	b003      	add	sp, #12
  405dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dc6:	4621      	mov	r1, r4
  405dc8:	9800      	ldr	r0, [sp, #0]
  405dca:	f7ff fc51 	bl	405670 <__swsetup_r>
  405dce:	2800      	cmp	r0, #0
  405dd0:	f040 8133 	bne.w	40603a <__sfvwrite_r+0x2da>
  405dd4:	89a3      	ldrh	r3, [r4, #12]
  405dd6:	6835      	ldr	r5, [r6, #0]
  405dd8:	f013 0002 	ands.w	r0, r3, #2
  405ddc:	d1d2      	bne.n	405d84 <__sfvwrite_r+0x24>
  405dde:	f013 0901 	ands.w	r9, r3, #1
  405de2:	d145      	bne.n	405e70 <__sfvwrite_r+0x110>
  405de4:	464f      	mov	r7, r9
  405de6:	9601      	str	r6, [sp, #4]
  405de8:	b337      	cbz	r7, 405e38 <__sfvwrite_r+0xd8>
  405dea:	059a      	lsls	r2, r3, #22
  405dec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405df0:	f140 8083 	bpl.w	405efa <__sfvwrite_r+0x19a>
  405df4:	4547      	cmp	r7, r8
  405df6:	46c3      	mov	fp, r8
  405df8:	f0c0 80ab 	bcc.w	405f52 <__sfvwrite_r+0x1f2>
  405dfc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405e00:	f040 80ac 	bne.w	405f5c <__sfvwrite_r+0x1fc>
  405e04:	6820      	ldr	r0, [r4, #0]
  405e06:	46ba      	mov	sl, r7
  405e08:	465a      	mov	r2, fp
  405e0a:	4649      	mov	r1, r9
  405e0c:	f000 fa40 	bl	406290 <memmove>
  405e10:	68a2      	ldr	r2, [r4, #8]
  405e12:	6823      	ldr	r3, [r4, #0]
  405e14:	eba2 0208 	sub.w	r2, r2, r8
  405e18:	445b      	add	r3, fp
  405e1a:	60a2      	str	r2, [r4, #8]
  405e1c:	6023      	str	r3, [r4, #0]
  405e1e:	9a01      	ldr	r2, [sp, #4]
  405e20:	6893      	ldr	r3, [r2, #8]
  405e22:	eba3 030a 	sub.w	r3, r3, sl
  405e26:	44d1      	add	r9, sl
  405e28:	eba7 070a 	sub.w	r7, r7, sl
  405e2c:	6093      	str	r3, [r2, #8]
  405e2e:	2b00      	cmp	r3, #0
  405e30:	d0c5      	beq.n	405dbe <__sfvwrite_r+0x5e>
  405e32:	89a3      	ldrh	r3, [r4, #12]
  405e34:	2f00      	cmp	r7, #0
  405e36:	d1d8      	bne.n	405dea <__sfvwrite_r+0x8a>
  405e38:	f8d5 9000 	ldr.w	r9, [r5]
  405e3c:	686f      	ldr	r7, [r5, #4]
  405e3e:	3508      	adds	r5, #8
  405e40:	e7d2      	b.n	405de8 <__sfvwrite_r+0x88>
  405e42:	f8d5 9000 	ldr.w	r9, [r5]
  405e46:	f8d5 8004 	ldr.w	r8, [r5, #4]
  405e4a:	3508      	adds	r5, #8
  405e4c:	e79f      	b.n	405d8e <__sfvwrite_r+0x2e>
  405e4e:	2000      	movs	r0, #0
  405e50:	4770      	bx	lr
  405e52:	4621      	mov	r1, r4
  405e54:	9800      	ldr	r0, [sp, #0]
  405e56:	f7ff fd1f 	bl	405898 <_fflush_r>
  405e5a:	b370      	cbz	r0, 405eba <__sfvwrite_r+0x15a>
  405e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405e64:	f04f 30ff 	mov.w	r0, #4294967295
  405e68:	81a3      	strh	r3, [r4, #12]
  405e6a:	b003      	add	sp, #12
  405e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e70:	4681      	mov	r9, r0
  405e72:	4633      	mov	r3, r6
  405e74:	464e      	mov	r6, r9
  405e76:	46a8      	mov	r8, r5
  405e78:	469a      	mov	sl, r3
  405e7a:	464d      	mov	r5, r9
  405e7c:	b34e      	cbz	r6, 405ed2 <__sfvwrite_r+0x172>
  405e7e:	b380      	cbz	r0, 405ee2 <__sfvwrite_r+0x182>
  405e80:	6820      	ldr	r0, [r4, #0]
  405e82:	6923      	ldr	r3, [r4, #16]
  405e84:	6962      	ldr	r2, [r4, #20]
  405e86:	45b1      	cmp	r9, r6
  405e88:	46cb      	mov	fp, r9
  405e8a:	bf28      	it	cs
  405e8c:	46b3      	movcs	fp, r6
  405e8e:	4298      	cmp	r0, r3
  405e90:	465f      	mov	r7, fp
  405e92:	d904      	bls.n	405e9e <__sfvwrite_r+0x13e>
  405e94:	68a3      	ldr	r3, [r4, #8]
  405e96:	4413      	add	r3, r2
  405e98:	459b      	cmp	fp, r3
  405e9a:	f300 80a6 	bgt.w	405fea <__sfvwrite_r+0x28a>
  405e9e:	4593      	cmp	fp, r2
  405ea0:	db4b      	blt.n	405f3a <__sfvwrite_r+0x1da>
  405ea2:	4613      	mov	r3, r2
  405ea4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  405ea6:	69e1      	ldr	r1, [r4, #28]
  405ea8:	9800      	ldr	r0, [sp, #0]
  405eaa:	462a      	mov	r2, r5
  405eac:	47b8      	blx	r7
  405eae:	1e07      	subs	r7, r0, #0
  405eb0:	ddd4      	ble.n	405e5c <__sfvwrite_r+0xfc>
  405eb2:	ebb9 0907 	subs.w	r9, r9, r7
  405eb6:	d0cc      	beq.n	405e52 <__sfvwrite_r+0xf2>
  405eb8:	2001      	movs	r0, #1
  405eba:	f8da 3008 	ldr.w	r3, [sl, #8]
  405ebe:	1bdb      	subs	r3, r3, r7
  405ec0:	443d      	add	r5, r7
  405ec2:	1bf6      	subs	r6, r6, r7
  405ec4:	f8ca 3008 	str.w	r3, [sl, #8]
  405ec8:	2b00      	cmp	r3, #0
  405eca:	f43f af78 	beq.w	405dbe <__sfvwrite_r+0x5e>
  405ece:	2e00      	cmp	r6, #0
  405ed0:	d1d5      	bne.n	405e7e <__sfvwrite_r+0x11e>
  405ed2:	f108 0308 	add.w	r3, r8, #8
  405ed6:	e913 0060 	ldmdb	r3, {r5, r6}
  405eda:	4698      	mov	r8, r3
  405edc:	3308      	adds	r3, #8
  405ede:	2e00      	cmp	r6, #0
  405ee0:	d0f9      	beq.n	405ed6 <__sfvwrite_r+0x176>
  405ee2:	4632      	mov	r2, r6
  405ee4:	210a      	movs	r1, #10
  405ee6:	4628      	mov	r0, r5
  405ee8:	f000 f982 	bl	4061f0 <memchr>
  405eec:	2800      	cmp	r0, #0
  405eee:	f000 80a1 	beq.w	406034 <__sfvwrite_r+0x2d4>
  405ef2:	3001      	adds	r0, #1
  405ef4:	eba0 0905 	sub.w	r9, r0, r5
  405ef8:	e7c2      	b.n	405e80 <__sfvwrite_r+0x120>
  405efa:	6820      	ldr	r0, [r4, #0]
  405efc:	6923      	ldr	r3, [r4, #16]
  405efe:	4298      	cmp	r0, r3
  405f00:	d802      	bhi.n	405f08 <__sfvwrite_r+0x1a8>
  405f02:	6963      	ldr	r3, [r4, #20]
  405f04:	429f      	cmp	r7, r3
  405f06:	d25d      	bcs.n	405fc4 <__sfvwrite_r+0x264>
  405f08:	45b8      	cmp	r8, r7
  405f0a:	bf28      	it	cs
  405f0c:	46b8      	movcs	r8, r7
  405f0e:	4642      	mov	r2, r8
  405f10:	4649      	mov	r1, r9
  405f12:	f000 f9bd 	bl	406290 <memmove>
  405f16:	68a3      	ldr	r3, [r4, #8]
  405f18:	6822      	ldr	r2, [r4, #0]
  405f1a:	eba3 0308 	sub.w	r3, r3, r8
  405f1e:	4442      	add	r2, r8
  405f20:	60a3      	str	r3, [r4, #8]
  405f22:	6022      	str	r2, [r4, #0]
  405f24:	b10b      	cbz	r3, 405f2a <__sfvwrite_r+0x1ca>
  405f26:	46c2      	mov	sl, r8
  405f28:	e779      	b.n	405e1e <__sfvwrite_r+0xbe>
  405f2a:	4621      	mov	r1, r4
  405f2c:	9800      	ldr	r0, [sp, #0]
  405f2e:	f7ff fcb3 	bl	405898 <_fflush_r>
  405f32:	2800      	cmp	r0, #0
  405f34:	d192      	bne.n	405e5c <__sfvwrite_r+0xfc>
  405f36:	46c2      	mov	sl, r8
  405f38:	e771      	b.n	405e1e <__sfvwrite_r+0xbe>
  405f3a:	465a      	mov	r2, fp
  405f3c:	4629      	mov	r1, r5
  405f3e:	f000 f9a7 	bl	406290 <memmove>
  405f42:	68a2      	ldr	r2, [r4, #8]
  405f44:	6823      	ldr	r3, [r4, #0]
  405f46:	eba2 020b 	sub.w	r2, r2, fp
  405f4a:	445b      	add	r3, fp
  405f4c:	60a2      	str	r2, [r4, #8]
  405f4e:	6023      	str	r3, [r4, #0]
  405f50:	e7af      	b.n	405eb2 <__sfvwrite_r+0x152>
  405f52:	6820      	ldr	r0, [r4, #0]
  405f54:	46b8      	mov	r8, r7
  405f56:	46ba      	mov	sl, r7
  405f58:	46bb      	mov	fp, r7
  405f5a:	e755      	b.n	405e08 <__sfvwrite_r+0xa8>
  405f5c:	6962      	ldr	r2, [r4, #20]
  405f5e:	6820      	ldr	r0, [r4, #0]
  405f60:	6921      	ldr	r1, [r4, #16]
  405f62:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405f66:	eba0 0a01 	sub.w	sl, r0, r1
  405f6a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405f6e:	f10a 0001 	add.w	r0, sl, #1
  405f72:	ea4f 0868 	mov.w	r8, r8, asr #1
  405f76:	4438      	add	r0, r7
  405f78:	4540      	cmp	r0, r8
  405f7a:	4642      	mov	r2, r8
  405f7c:	bf84      	itt	hi
  405f7e:	4680      	movhi	r8, r0
  405f80:	4642      	movhi	r2, r8
  405f82:	055b      	lsls	r3, r3, #21
  405f84:	d544      	bpl.n	406010 <__sfvwrite_r+0x2b0>
  405f86:	4611      	mov	r1, r2
  405f88:	9800      	ldr	r0, [sp, #0]
  405f8a:	f7fd ff27 	bl	403ddc <_malloc_r>
  405f8e:	4683      	mov	fp, r0
  405f90:	2800      	cmp	r0, #0
  405f92:	d055      	beq.n	406040 <__sfvwrite_r+0x2e0>
  405f94:	4652      	mov	r2, sl
  405f96:	6921      	ldr	r1, [r4, #16]
  405f98:	f7fe f9d0 	bl	40433c <memcpy>
  405f9c:	89a3      	ldrh	r3, [r4, #12]
  405f9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405fa6:	81a3      	strh	r3, [r4, #12]
  405fa8:	eb0b 000a 	add.w	r0, fp, sl
  405fac:	eba8 030a 	sub.w	r3, r8, sl
  405fb0:	f8c4 b010 	str.w	fp, [r4, #16]
  405fb4:	f8c4 8014 	str.w	r8, [r4, #20]
  405fb8:	6020      	str	r0, [r4, #0]
  405fba:	60a3      	str	r3, [r4, #8]
  405fbc:	46b8      	mov	r8, r7
  405fbe:	46ba      	mov	sl, r7
  405fc0:	46bb      	mov	fp, r7
  405fc2:	e721      	b.n	405e08 <__sfvwrite_r+0xa8>
  405fc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405fc8:	42b9      	cmp	r1, r7
  405fca:	bf28      	it	cs
  405fcc:	4639      	movcs	r1, r7
  405fce:	464a      	mov	r2, r9
  405fd0:	fb91 f1f3 	sdiv	r1, r1, r3
  405fd4:	9800      	ldr	r0, [sp, #0]
  405fd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405fd8:	fb03 f301 	mul.w	r3, r3, r1
  405fdc:	69e1      	ldr	r1, [r4, #28]
  405fde:	47b0      	blx	r6
  405fe0:	f1b0 0a00 	subs.w	sl, r0, #0
  405fe4:	f73f af1b 	bgt.w	405e1e <__sfvwrite_r+0xbe>
  405fe8:	e738      	b.n	405e5c <__sfvwrite_r+0xfc>
  405fea:	461a      	mov	r2, r3
  405fec:	4629      	mov	r1, r5
  405fee:	9301      	str	r3, [sp, #4]
  405ff0:	f000 f94e 	bl	406290 <memmove>
  405ff4:	6822      	ldr	r2, [r4, #0]
  405ff6:	9b01      	ldr	r3, [sp, #4]
  405ff8:	9800      	ldr	r0, [sp, #0]
  405ffa:	441a      	add	r2, r3
  405ffc:	6022      	str	r2, [r4, #0]
  405ffe:	4621      	mov	r1, r4
  406000:	f7ff fc4a 	bl	405898 <_fflush_r>
  406004:	9b01      	ldr	r3, [sp, #4]
  406006:	2800      	cmp	r0, #0
  406008:	f47f af28 	bne.w	405e5c <__sfvwrite_r+0xfc>
  40600c:	461f      	mov	r7, r3
  40600e:	e750      	b.n	405eb2 <__sfvwrite_r+0x152>
  406010:	9800      	ldr	r0, [sp, #0]
  406012:	f000 f9a1 	bl	406358 <_realloc_r>
  406016:	4683      	mov	fp, r0
  406018:	2800      	cmp	r0, #0
  40601a:	d1c5      	bne.n	405fa8 <__sfvwrite_r+0x248>
  40601c:	9d00      	ldr	r5, [sp, #0]
  40601e:	6921      	ldr	r1, [r4, #16]
  406020:	4628      	mov	r0, r5
  406022:	f7ff fdb7 	bl	405b94 <_free_r>
  406026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40602a:	220c      	movs	r2, #12
  40602c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  406030:	602a      	str	r2, [r5, #0]
  406032:	e715      	b.n	405e60 <__sfvwrite_r+0x100>
  406034:	f106 0901 	add.w	r9, r6, #1
  406038:	e722      	b.n	405e80 <__sfvwrite_r+0x120>
  40603a:	f04f 30ff 	mov.w	r0, #4294967295
  40603e:	e6bf      	b.n	405dc0 <__sfvwrite_r+0x60>
  406040:	9a00      	ldr	r2, [sp, #0]
  406042:	230c      	movs	r3, #12
  406044:	6013      	str	r3, [r2, #0]
  406046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40604a:	e709      	b.n	405e60 <__sfvwrite_r+0x100>
  40604c:	7ffffc00 	.word	0x7ffffc00

00406050 <_fwalk_reent>:
  406050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406054:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  406058:	d01f      	beq.n	40609a <_fwalk_reent+0x4a>
  40605a:	4688      	mov	r8, r1
  40605c:	4606      	mov	r6, r0
  40605e:	f04f 0900 	mov.w	r9, #0
  406062:	687d      	ldr	r5, [r7, #4]
  406064:	68bc      	ldr	r4, [r7, #8]
  406066:	3d01      	subs	r5, #1
  406068:	d411      	bmi.n	40608e <_fwalk_reent+0x3e>
  40606a:	89a3      	ldrh	r3, [r4, #12]
  40606c:	2b01      	cmp	r3, #1
  40606e:	f105 35ff 	add.w	r5, r5, #4294967295
  406072:	d908      	bls.n	406086 <_fwalk_reent+0x36>
  406074:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  406078:	3301      	adds	r3, #1
  40607a:	4621      	mov	r1, r4
  40607c:	4630      	mov	r0, r6
  40607e:	d002      	beq.n	406086 <_fwalk_reent+0x36>
  406080:	47c0      	blx	r8
  406082:	ea49 0900 	orr.w	r9, r9, r0
  406086:	1c6b      	adds	r3, r5, #1
  406088:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40608c:	d1ed      	bne.n	40606a <_fwalk_reent+0x1a>
  40608e:	683f      	ldr	r7, [r7, #0]
  406090:	2f00      	cmp	r7, #0
  406092:	d1e6      	bne.n	406062 <_fwalk_reent+0x12>
  406094:	4648      	mov	r0, r9
  406096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40609a:	46b9      	mov	r9, r7
  40609c:	4648      	mov	r0, r9
  40609e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4060a2:	bf00      	nop

004060a4 <__locale_mb_cur_max>:
  4060a4:	4b04      	ldr	r3, [pc, #16]	; (4060b8 <__locale_mb_cur_max+0x14>)
  4060a6:	4a05      	ldr	r2, [pc, #20]	; (4060bc <__locale_mb_cur_max+0x18>)
  4060a8:	681b      	ldr	r3, [r3, #0]
  4060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4060ac:	2b00      	cmp	r3, #0
  4060ae:	bf08      	it	eq
  4060b0:	4613      	moveq	r3, r2
  4060b2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4060b6:	4770      	bx	lr
  4060b8:	2040001c 	.word	0x2040001c
  4060bc:	2040085c 	.word	0x2040085c

004060c0 <__retarget_lock_init_recursive>:
  4060c0:	4770      	bx	lr
  4060c2:	bf00      	nop

004060c4 <__retarget_lock_close_recursive>:
  4060c4:	4770      	bx	lr
  4060c6:	bf00      	nop

004060c8 <__retarget_lock_acquire_recursive>:
  4060c8:	4770      	bx	lr
  4060ca:	bf00      	nop

004060cc <__retarget_lock_release_recursive>:
  4060cc:	4770      	bx	lr
  4060ce:	bf00      	nop

004060d0 <__swhatbuf_r>:
  4060d0:	b570      	push	{r4, r5, r6, lr}
  4060d2:	460c      	mov	r4, r1
  4060d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4060d8:	2900      	cmp	r1, #0
  4060da:	b090      	sub	sp, #64	; 0x40
  4060dc:	4615      	mov	r5, r2
  4060de:	461e      	mov	r6, r3
  4060e0:	db14      	blt.n	40610c <__swhatbuf_r+0x3c>
  4060e2:	aa01      	add	r2, sp, #4
  4060e4:	f000 fc9e 	bl	406a24 <_fstat_r>
  4060e8:	2800      	cmp	r0, #0
  4060ea:	db0f      	blt.n	40610c <__swhatbuf_r+0x3c>
  4060ec:	9a02      	ldr	r2, [sp, #8]
  4060ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4060f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4060f6:	fab2 f282 	clz	r2, r2
  4060fa:	0952      	lsrs	r2, r2, #5
  4060fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406100:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406104:	6032      	str	r2, [r6, #0]
  406106:	602b      	str	r3, [r5, #0]
  406108:	b010      	add	sp, #64	; 0x40
  40610a:	bd70      	pop	{r4, r5, r6, pc}
  40610c:	89a2      	ldrh	r2, [r4, #12]
  40610e:	2300      	movs	r3, #0
  406110:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406114:	6033      	str	r3, [r6, #0]
  406116:	d004      	beq.n	406122 <__swhatbuf_r+0x52>
  406118:	2240      	movs	r2, #64	; 0x40
  40611a:	4618      	mov	r0, r3
  40611c:	602a      	str	r2, [r5, #0]
  40611e:	b010      	add	sp, #64	; 0x40
  406120:	bd70      	pop	{r4, r5, r6, pc}
  406122:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406126:	602b      	str	r3, [r5, #0]
  406128:	b010      	add	sp, #64	; 0x40
  40612a:	bd70      	pop	{r4, r5, r6, pc}

0040612c <__smakebuf_r>:
  40612c:	898a      	ldrh	r2, [r1, #12]
  40612e:	0792      	lsls	r2, r2, #30
  406130:	460b      	mov	r3, r1
  406132:	d506      	bpl.n	406142 <__smakebuf_r+0x16>
  406134:	f101 0243 	add.w	r2, r1, #67	; 0x43
  406138:	2101      	movs	r1, #1
  40613a:	601a      	str	r2, [r3, #0]
  40613c:	611a      	str	r2, [r3, #16]
  40613e:	6159      	str	r1, [r3, #20]
  406140:	4770      	bx	lr
  406142:	b5f0      	push	{r4, r5, r6, r7, lr}
  406144:	b083      	sub	sp, #12
  406146:	ab01      	add	r3, sp, #4
  406148:	466a      	mov	r2, sp
  40614a:	460c      	mov	r4, r1
  40614c:	4606      	mov	r6, r0
  40614e:	f7ff ffbf 	bl	4060d0 <__swhatbuf_r>
  406152:	9900      	ldr	r1, [sp, #0]
  406154:	4605      	mov	r5, r0
  406156:	4630      	mov	r0, r6
  406158:	f7fd fe40 	bl	403ddc <_malloc_r>
  40615c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406160:	b1d8      	cbz	r0, 40619a <__smakebuf_r+0x6e>
  406162:	9a01      	ldr	r2, [sp, #4]
  406164:	4f15      	ldr	r7, [pc, #84]	; (4061bc <__smakebuf_r+0x90>)
  406166:	9900      	ldr	r1, [sp, #0]
  406168:	63f7      	str	r7, [r6, #60]	; 0x3c
  40616a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40616e:	81a3      	strh	r3, [r4, #12]
  406170:	6020      	str	r0, [r4, #0]
  406172:	6120      	str	r0, [r4, #16]
  406174:	6161      	str	r1, [r4, #20]
  406176:	b91a      	cbnz	r2, 406180 <__smakebuf_r+0x54>
  406178:	432b      	orrs	r3, r5
  40617a:	81a3      	strh	r3, [r4, #12]
  40617c:	b003      	add	sp, #12
  40617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406180:	4630      	mov	r0, r6
  406182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406186:	f000 fc61 	bl	406a4c <_isatty_r>
  40618a:	b1a0      	cbz	r0, 4061b6 <__smakebuf_r+0x8a>
  40618c:	89a3      	ldrh	r3, [r4, #12]
  40618e:	f023 0303 	bic.w	r3, r3, #3
  406192:	f043 0301 	orr.w	r3, r3, #1
  406196:	b21b      	sxth	r3, r3
  406198:	e7ee      	b.n	406178 <__smakebuf_r+0x4c>
  40619a:	059a      	lsls	r2, r3, #22
  40619c:	d4ee      	bmi.n	40617c <__smakebuf_r+0x50>
  40619e:	f023 0303 	bic.w	r3, r3, #3
  4061a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4061a6:	f043 0302 	orr.w	r3, r3, #2
  4061aa:	2101      	movs	r1, #1
  4061ac:	81a3      	strh	r3, [r4, #12]
  4061ae:	6022      	str	r2, [r4, #0]
  4061b0:	6122      	str	r2, [r4, #16]
  4061b2:	6161      	str	r1, [r4, #20]
  4061b4:	e7e2      	b.n	40617c <__smakebuf_r+0x50>
  4061b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4061ba:	e7dd      	b.n	406178 <__smakebuf_r+0x4c>
  4061bc:	004058ed 	.word	0x004058ed

004061c0 <__ascii_mbtowc>:
  4061c0:	b082      	sub	sp, #8
  4061c2:	b149      	cbz	r1, 4061d8 <__ascii_mbtowc+0x18>
  4061c4:	b15a      	cbz	r2, 4061de <__ascii_mbtowc+0x1e>
  4061c6:	b16b      	cbz	r3, 4061e4 <__ascii_mbtowc+0x24>
  4061c8:	7813      	ldrb	r3, [r2, #0]
  4061ca:	600b      	str	r3, [r1, #0]
  4061cc:	7812      	ldrb	r2, [r2, #0]
  4061ce:	1c10      	adds	r0, r2, #0
  4061d0:	bf18      	it	ne
  4061d2:	2001      	movne	r0, #1
  4061d4:	b002      	add	sp, #8
  4061d6:	4770      	bx	lr
  4061d8:	a901      	add	r1, sp, #4
  4061da:	2a00      	cmp	r2, #0
  4061dc:	d1f3      	bne.n	4061c6 <__ascii_mbtowc+0x6>
  4061de:	4610      	mov	r0, r2
  4061e0:	b002      	add	sp, #8
  4061e2:	4770      	bx	lr
  4061e4:	f06f 0001 	mvn.w	r0, #1
  4061e8:	e7f4      	b.n	4061d4 <__ascii_mbtowc+0x14>
  4061ea:	bf00      	nop
  4061ec:	0000      	movs	r0, r0
	...

004061f0 <memchr>:
  4061f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4061f4:	2a10      	cmp	r2, #16
  4061f6:	db2b      	blt.n	406250 <memchr+0x60>
  4061f8:	f010 0f07 	tst.w	r0, #7
  4061fc:	d008      	beq.n	406210 <memchr+0x20>
  4061fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  406202:	3a01      	subs	r2, #1
  406204:	428b      	cmp	r3, r1
  406206:	d02d      	beq.n	406264 <memchr+0x74>
  406208:	f010 0f07 	tst.w	r0, #7
  40620c:	b342      	cbz	r2, 406260 <memchr+0x70>
  40620e:	d1f6      	bne.n	4061fe <memchr+0xe>
  406210:	b4f0      	push	{r4, r5, r6, r7}
  406212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40621a:	f022 0407 	bic.w	r4, r2, #7
  40621e:	f07f 0700 	mvns.w	r7, #0
  406222:	2300      	movs	r3, #0
  406224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406228:	3c08      	subs	r4, #8
  40622a:	ea85 0501 	eor.w	r5, r5, r1
  40622e:	ea86 0601 	eor.w	r6, r6, r1
  406232:	fa85 f547 	uadd8	r5, r5, r7
  406236:	faa3 f587 	sel	r5, r3, r7
  40623a:	fa86 f647 	uadd8	r6, r6, r7
  40623e:	faa5 f687 	sel	r6, r5, r7
  406242:	b98e      	cbnz	r6, 406268 <memchr+0x78>
  406244:	d1ee      	bne.n	406224 <memchr+0x34>
  406246:	bcf0      	pop	{r4, r5, r6, r7}
  406248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40624c:	f002 0207 	and.w	r2, r2, #7
  406250:	b132      	cbz	r2, 406260 <memchr+0x70>
  406252:	f810 3b01 	ldrb.w	r3, [r0], #1
  406256:	3a01      	subs	r2, #1
  406258:	ea83 0301 	eor.w	r3, r3, r1
  40625c:	b113      	cbz	r3, 406264 <memchr+0x74>
  40625e:	d1f8      	bne.n	406252 <memchr+0x62>
  406260:	2000      	movs	r0, #0
  406262:	4770      	bx	lr
  406264:	3801      	subs	r0, #1
  406266:	4770      	bx	lr
  406268:	2d00      	cmp	r5, #0
  40626a:	bf06      	itte	eq
  40626c:	4635      	moveq	r5, r6
  40626e:	3803      	subeq	r0, #3
  406270:	3807      	subne	r0, #7
  406272:	f015 0f01 	tst.w	r5, #1
  406276:	d107      	bne.n	406288 <memchr+0x98>
  406278:	3001      	adds	r0, #1
  40627a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40627e:	bf02      	ittt	eq
  406280:	3001      	addeq	r0, #1
  406282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406286:	3001      	addeq	r0, #1
  406288:	bcf0      	pop	{r4, r5, r6, r7}
  40628a:	3801      	subs	r0, #1
  40628c:	4770      	bx	lr
  40628e:	bf00      	nop

00406290 <memmove>:
  406290:	4288      	cmp	r0, r1
  406292:	b5f0      	push	{r4, r5, r6, r7, lr}
  406294:	d90d      	bls.n	4062b2 <memmove+0x22>
  406296:	188b      	adds	r3, r1, r2
  406298:	4298      	cmp	r0, r3
  40629a:	d20a      	bcs.n	4062b2 <memmove+0x22>
  40629c:	1884      	adds	r4, r0, r2
  40629e:	2a00      	cmp	r2, #0
  4062a0:	d051      	beq.n	406346 <memmove+0xb6>
  4062a2:	4622      	mov	r2, r4
  4062a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4062a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4062ac:	4299      	cmp	r1, r3
  4062ae:	d1f9      	bne.n	4062a4 <memmove+0x14>
  4062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4062b2:	2a0f      	cmp	r2, #15
  4062b4:	d948      	bls.n	406348 <memmove+0xb8>
  4062b6:	ea41 0300 	orr.w	r3, r1, r0
  4062ba:	079b      	lsls	r3, r3, #30
  4062bc:	d146      	bne.n	40634c <memmove+0xbc>
  4062be:	f100 0410 	add.w	r4, r0, #16
  4062c2:	f101 0310 	add.w	r3, r1, #16
  4062c6:	4615      	mov	r5, r2
  4062c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4062cc:	f844 6c10 	str.w	r6, [r4, #-16]
  4062d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4062d4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4062d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4062dc:	f844 6c08 	str.w	r6, [r4, #-8]
  4062e0:	3d10      	subs	r5, #16
  4062e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4062e6:	f844 6c04 	str.w	r6, [r4, #-4]
  4062ea:	2d0f      	cmp	r5, #15
  4062ec:	f103 0310 	add.w	r3, r3, #16
  4062f0:	f104 0410 	add.w	r4, r4, #16
  4062f4:	d8e8      	bhi.n	4062c8 <memmove+0x38>
  4062f6:	f1a2 0310 	sub.w	r3, r2, #16
  4062fa:	f023 030f 	bic.w	r3, r3, #15
  4062fe:	f002 0e0f 	and.w	lr, r2, #15
  406302:	3310      	adds	r3, #16
  406304:	f1be 0f03 	cmp.w	lr, #3
  406308:	4419      	add	r1, r3
  40630a:	4403      	add	r3, r0
  40630c:	d921      	bls.n	406352 <memmove+0xc2>
  40630e:	1f1e      	subs	r6, r3, #4
  406310:	460d      	mov	r5, r1
  406312:	4674      	mov	r4, lr
  406314:	3c04      	subs	r4, #4
  406316:	f855 7b04 	ldr.w	r7, [r5], #4
  40631a:	f846 7f04 	str.w	r7, [r6, #4]!
  40631e:	2c03      	cmp	r4, #3
  406320:	d8f8      	bhi.n	406314 <memmove+0x84>
  406322:	f1ae 0404 	sub.w	r4, lr, #4
  406326:	f024 0403 	bic.w	r4, r4, #3
  40632a:	3404      	adds	r4, #4
  40632c:	4421      	add	r1, r4
  40632e:	4423      	add	r3, r4
  406330:	f002 0203 	and.w	r2, r2, #3
  406334:	b162      	cbz	r2, 406350 <memmove+0xc0>
  406336:	3b01      	subs	r3, #1
  406338:	440a      	add	r2, r1
  40633a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40633e:	f803 4f01 	strb.w	r4, [r3, #1]!
  406342:	428a      	cmp	r2, r1
  406344:	d1f9      	bne.n	40633a <memmove+0xaa>
  406346:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406348:	4603      	mov	r3, r0
  40634a:	e7f3      	b.n	406334 <memmove+0xa4>
  40634c:	4603      	mov	r3, r0
  40634e:	e7f2      	b.n	406336 <memmove+0xa6>
  406350:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406352:	4672      	mov	r2, lr
  406354:	e7ee      	b.n	406334 <memmove+0xa4>
  406356:	bf00      	nop

00406358 <_realloc_r>:
  406358:	2900      	cmp	r1, #0
  40635a:	f000 8095 	beq.w	406488 <_realloc_r+0x130>
  40635e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406362:	460d      	mov	r5, r1
  406364:	4616      	mov	r6, r2
  406366:	b083      	sub	sp, #12
  406368:	4680      	mov	r8, r0
  40636a:	f106 070b 	add.w	r7, r6, #11
  40636e:	f7fe f8cd 	bl	40450c <__malloc_lock>
  406372:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406376:	2f16      	cmp	r7, #22
  406378:	f02e 0403 	bic.w	r4, lr, #3
  40637c:	f1a5 0908 	sub.w	r9, r5, #8
  406380:	d83c      	bhi.n	4063fc <_realloc_r+0xa4>
  406382:	2210      	movs	r2, #16
  406384:	4617      	mov	r7, r2
  406386:	42be      	cmp	r6, r7
  406388:	d83d      	bhi.n	406406 <_realloc_r+0xae>
  40638a:	4294      	cmp	r4, r2
  40638c:	da43      	bge.n	406416 <_realloc_r+0xbe>
  40638e:	4bc4      	ldr	r3, [pc, #784]	; (4066a0 <_realloc_r+0x348>)
  406390:	6899      	ldr	r1, [r3, #8]
  406392:	eb09 0004 	add.w	r0, r9, r4
  406396:	4288      	cmp	r0, r1
  406398:	f000 80b4 	beq.w	406504 <_realloc_r+0x1ac>
  40639c:	6843      	ldr	r3, [r0, #4]
  40639e:	f023 0101 	bic.w	r1, r3, #1
  4063a2:	4401      	add	r1, r0
  4063a4:	6849      	ldr	r1, [r1, #4]
  4063a6:	07c9      	lsls	r1, r1, #31
  4063a8:	d54c      	bpl.n	406444 <_realloc_r+0xec>
  4063aa:	f01e 0f01 	tst.w	lr, #1
  4063ae:	f000 809b 	beq.w	4064e8 <_realloc_r+0x190>
  4063b2:	4631      	mov	r1, r6
  4063b4:	4640      	mov	r0, r8
  4063b6:	f7fd fd11 	bl	403ddc <_malloc_r>
  4063ba:	4606      	mov	r6, r0
  4063bc:	2800      	cmp	r0, #0
  4063be:	d03a      	beq.n	406436 <_realloc_r+0xde>
  4063c0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4063c4:	f023 0301 	bic.w	r3, r3, #1
  4063c8:	444b      	add	r3, r9
  4063ca:	f1a0 0208 	sub.w	r2, r0, #8
  4063ce:	429a      	cmp	r2, r3
  4063d0:	f000 8121 	beq.w	406616 <_realloc_r+0x2be>
  4063d4:	1f22      	subs	r2, r4, #4
  4063d6:	2a24      	cmp	r2, #36	; 0x24
  4063d8:	f200 8107 	bhi.w	4065ea <_realloc_r+0x292>
  4063dc:	2a13      	cmp	r2, #19
  4063de:	f200 80db 	bhi.w	406598 <_realloc_r+0x240>
  4063e2:	4603      	mov	r3, r0
  4063e4:	462a      	mov	r2, r5
  4063e6:	6811      	ldr	r1, [r2, #0]
  4063e8:	6019      	str	r1, [r3, #0]
  4063ea:	6851      	ldr	r1, [r2, #4]
  4063ec:	6059      	str	r1, [r3, #4]
  4063ee:	6892      	ldr	r2, [r2, #8]
  4063f0:	609a      	str	r2, [r3, #8]
  4063f2:	4629      	mov	r1, r5
  4063f4:	4640      	mov	r0, r8
  4063f6:	f7ff fbcd 	bl	405b94 <_free_r>
  4063fa:	e01c      	b.n	406436 <_realloc_r+0xde>
  4063fc:	f027 0707 	bic.w	r7, r7, #7
  406400:	2f00      	cmp	r7, #0
  406402:	463a      	mov	r2, r7
  406404:	dabf      	bge.n	406386 <_realloc_r+0x2e>
  406406:	2600      	movs	r6, #0
  406408:	230c      	movs	r3, #12
  40640a:	4630      	mov	r0, r6
  40640c:	f8c8 3000 	str.w	r3, [r8]
  406410:	b003      	add	sp, #12
  406412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406416:	462e      	mov	r6, r5
  406418:	1be3      	subs	r3, r4, r7
  40641a:	2b0f      	cmp	r3, #15
  40641c:	d81e      	bhi.n	40645c <_realloc_r+0x104>
  40641e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406422:	f003 0301 	and.w	r3, r3, #1
  406426:	4323      	orrs	r3, r4
  406428:	444c      	add	r4, r9
  40642a:	f8c9 3004 	str.w	r3, [r9, #4]
  40642e:	6863      	ldr	r3, [r4, #4]
  406430:	f043 0301 	orr.w	r3, r3, #1
  406434:	6063      	str	r3, [r4, #4]
  406436:	4640      	mov	r0, r8
  406438:	f7fe f86e 	bl	404518 <__malloc_unlock>
  40643c:	4630      	mov	r0, r6
  40643e:	b003      	add	sp, #12
  406440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406444:	f023 0303 	bic.w	r3, r3, #3
  406448:	18e1      	adds	r1, r4, r3
  40644a:	4291      	cmp	r1, r2
  40644c:	db1f      	blt.n	40648e <_realloc_r+0x136>
  40644e:	68c3      	ldr	r3, [r0, #12]
  406450:	6882      	ldr	r2, [r0, #8]
  406452:	462e      	mov	r6, r5
  406454:	60d3      	str	r3, [r2, #12]
  406456:	460c      	mov	r4, r1
  406458:	609a      	str	r2, [r3, #8]
  40645a:	e7dd      	b.n	406418 <_realloc_r+0xc0>
  40645c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406460:	eb09 0107 	add.w	r1, r9, r7
  406464:	f002 0201 	and.w	r2, r2, #1
  406468:	444c      	add	r4, r9
  40646a:	f043 0301 	orr.w	r3, r3, #1
  40646e:	4317      	orrs	r7, r2
  406470:	f8c9 7004 	str.w	r7, [r9, #4]
  406474:	604b      	str	r3, [r1, #4]
  406476:	6863      	ldr	r3, [r4, #4]
  406478:	f043 0301 	orr.w	r3, r3, #1
  40647c:	3108      	adds	r1, #8
  40647e:	6063      	str	r3, [r4, #4]
  406480:	4640      	mov	r0, r8
  406482:	f7ff fb87 	bl	405b94 <_free_r>
  406486:	e7d6      	b.n	406436 <_realloc_r+0xde>
  406488:	4611      	mov	r1, r2
  40648a:	f7fd bca7 	b.w	403ddc <_malloc_r>
  40648e:	f01e 0f01 	tst.w	lr, #1
  406492:	d18e      	bne.n	4063b2 <_realloc_r+0x5a>
  406494:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406498:	eba9 0a01 	sub.w	sl, r9, r1
  40649c:	f8da 1004 	ldr.w	r1, [sl, #4]
  4064a0:	f021 0103 	bic.w	r1, r1, #3
  4064a4:	440b      	add	r3, r1
  4064a6:	4423      	add	r3, r4
  4064a8:	4293      	cmp	r3, r2
  4064aa:	db25      	blt.n	4064f8 <_realloc_r+0x1a0>
  4064ac:	68c2      	ldr	r2, [r0, #12]
  4064ae:	6881      	ldr	r1, [r0, #8]
  4064b0:	4656      	mov	r6, sl
  4064b2:	60ca      	str	r2, [r1, #12]
  4064b4:	6091      	str	r1, [r2, #8]
  4064b6:	f8da 100c 	ldr.w	r1, [sl, #12]
  4064ba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4064be:	1f22      	subs	r2, r4, #4
  4064c0:	2a24      	cmp	r2, #36	; 0x24
  4064c2:	60c1      	str	r1, [r0, #12]
  4064c4:	6088      	str	r0, [r1, #8]
  4064c6:	f200 8094 	bhi.w	4065f2 <_realloc_r+0x29a>
  4064ca:	2a13      	cmp	r2, #19
  4064cc:	d96f      	bls.n	4065ae <_realloc_r+0x256>
  4064ce:	6829      	ldr	r1, [r5, #0]
  4064d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4064d4:	6869      	ldr	r1, [r5, #4]
  4064d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4064da:	2a1b      	cmp	r2, #27
  4064dc:	f200 80a2 	bhi.w	406624 <_realloc_r+0x2cc>
  4064e0:	3508      	adds	r5, #8
  4064e2:	f10a 0210 	add.w	r2, sl, #16
  4064e6:	e063      	b.n	4065b0 <_realloc_r+0x258>
  4064e8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4064ec:	eba9 0a03 	sub.w	sl, r9, r3
  4064f0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4064f4:	f021 0103 	bic.w	r1, r1, #3
  4064f8:	1863      	adds	r3, r4, r1
  4064fa:	4293      	cmp	r3, r2
  4064fc:	f6ff af59 	blt.w	4063b2 <_realloc_r+0x5a>
  406500:	4656      	mov	r6, sl
  406502:	e7d8      	b.n	4064b6 <_realloc_r+0x15e>
  406504:	6841      	ldr	r1, [r0, #4]
  406506:	f021 0b03 	bic.w	fp, r1, #3
  40650a:	44a3      	add	fp, r4
  40650c:	f107 0010 	add.w	r0, r7, #16
  406510:	4583      	cmp	fp, r0
  406512:	da56      	bge.n	4065c2 <_realloc_r+0x26a>
  406514:	f01e 0f01 	tst.w	lr, #1
  406518:	f47f af4b 	bne.w	4063b2 <_realloc_r+0x5a>
  40651c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406520:	eba9 0a01 	sub.w	sl, r9, r1
  406524:	f8da 1004 	ldr.w	r1, [sl, #4]
  406528:	f021 0103 	bic.w	r1, r1, #3
  40652c:	448b      	add	fp, r1
  40652e:	4558      	cmp	r0, fp
  406530:	dce2      	bgt.n	4064f8 <_realloc_r+0x1a0>
  406532:	4656      	mov	r6, sl
  406534:	f8da 100c 	ldr.w	r1, [sl, #12]
  406538:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40653c:	1f22      	subs	r2, r4, #4
  40653e:	2a24      	cmp	r2, #36	; 0x24
  406540:	60c1      	str	r1, [r0, #12]
  406542:	6088      	str	r0, [r1, #8]
  406544:	f200 808f 	bhi.w	406666 <_realloc_r+0x30e>
  406548:	2a13      	cmp	r2, #19
  40654a:	f240 808a 	bls.w	406662 <_realloc_r+0x30a>
  40654e:	6829      	ldr	r1, [r5, #0]
  406550:	f8ca 1008 	str.w	r1, [sl, #8]
  406554:	6869      	ldr	r1, [r5, #4]
  406556:	f8ca 100c 	str.w	r1, [sl, #12]
  40655a:	2a1b      	cmp	r2, #27
  40655c:	f200 808a 	bhi.w	406674 <_realloc_r+0x31c>
  406560:	3508      	adds	r5, #8
  406562:	f10a 0210 	add.w	r2, sl, #16
  406566:	6829      	ldr	r1, [r5, #0]
  406568:	6011      	str	r1, [r2, #0]
  40656a:	6869      	ldr	r1, [r5, #4]
  40656c:	6051      	str	r1, [r2, #4]
  40656e:	68a9      	ldr	r1, [r5, #8]
  406570:	6091      	str	r1, [r2, #8]
  406572:	eb0a 0107 	add.w	r1, sl, r7
  406576:	ebab 0207 	sub.w	r2, fp, r7
  40657a:	f042 0201 	orr.w	r2, r2, #1
  40657e:	6099      	str	r1, [r3, #8]
  406580:	604a      	str	r2, [r1, #4]
  406582:	f8da 3004 	ldr.w	r3, [sl, #4]
  406586:	f003 0301 	and.w	r3, r3, #1
  40658a:	431f      	orrs	r7, r3
  40658c:	4640      	mov	r0, r8
  40658e:	f8ca 7004 	str.w	r7, [sl, #4]
  406592:	f7fd ffc1 	bl	404518 <__malloc_unlock>
  406596:	e751      	b.n	40643c <_realloc_r+0xe4>
  406598:	682b      	ldr	r3, [r5, #0]
  40659a:	6003      	str	r3, [r0, #0]
  40659c:	686b      	ldr	r3, [r5, #4]
  40659e:	6043      	str	r3, [r0, #4]
  4065a0:	2a1b      	cmp	r2, #27
  4065a2:	d82d      	bhi.n	406600 <_realloc_r+0x2a8>
  4065a4:	f100 0308 	add.w	r3, r0, #8
  4065a8:	f105 0208 	add.w	r2, r5, #8
  4065ac:	e71b      	b.n	4063e6 <_realloc_r+0x8e>
  4065ae:	4632      	mov	r2, r6
  4065b0:	6829      	ldr	r1, [r5, #0]
  4065b2:	6011      	str	r1, [r2, #0]
  4065b4:	6869      	ldr	r1, [r5, #4]
  4065b6:	6051      	str	r1, [r2, #4]
  4065b8:	68a9      	ldr	r1, [r5, #8]
  4065ba:	6091      	str	r1, [r2, #8]
  4065bc:	461c      	mov	r4, r3
  4065be:	46d1      	mov	r9, sl
  4065c0:	e72a      	b.n	406418 <_realloc_r+0xc0>
  4065c2:	eb09 0107 	add.w	r1, r9, r7
  4065c6:	ebab 0b07 	sub.w	fp, fp, r7
  4065ca:	f04b 0201 	orr.w	r2, fp, #1
  4065ce:	6099      	str	r1, [r3, #8]
  4065d0:	604a      	str	r2, [r1, #4]
  4065d2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  4065d6:	f003 0301 	and.w	r3, r3, #1
  4065da:	431f      	orrs	r7, r3
  4065dc:	4640      	mov	r0, r8
  4065de:	f845 7c04 	str.w	r7, [r5, #-4]
  4065e2:	f7fd ff99 	bl	404518 <__malloc_unlock>
  4065e6:	462e      	mov	r6, r5
  4065e8:	e728      	b.n	40643c <_realloc_r+0xe4>
  4065ea:	4629      	mov	r1, r5
  4065ec:	f7ff fe50 	bl	406290 <memmove>
  4065f0:	e6ff      	b.n	4063f2 <_realloc_r+0x9a>
  4065f2:	4629      	mov	r1, r5
  4065f4:	4630      	mov	r0, r6
  4065f6:	461c      	mov	r4, r3
  4065f8:	46d1      	mov	r9, sl
  4065fa:	f7ff fe49 	bl	406290 <memmove>
  4065fe:	e70b      	b.n	406418 <_realloc_r+0xc0>
  406600:	68ab      	ldr	r3, [r5, #8]
  406602:	6083      	str	r3, [r0, #8]
  406604:	68eb      	ldr	r3, [r5, #12]
  406606:	60c3      	str	r3, [r0, #12]
  406608:	2a24      	cmp	r2, #36	; 0x24
  40660a:	d017      	beq.n	40663c <_realloc_r+0x2e4>
  40660c:	f100 0310 	add.w	r3, r0, #16
  406610:	f105 0210 	add.w	r2, r5, #16
  406614:	e6e7      	b.n	4063e6 <_realloc_r+0x8e>
  406616:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40661a:	f023 0303 	bic.w	r3, r3, #3
  40661e:	441c      	add	r4, r3
  406620:	462e      	mov	r6, r5
  406622:	e6f9      	b.n	406418 <_realloc_r+0xc0>
  406624:	68a9      	ldr	r1, [r5, #8]
  406626:	f8ca 1010 	str.w	r1, [sl, #16]
  40662a:	68e9      	ldr	r1, [r5, #12]
  40662c:	f8ca 1014 	str.w	r1, [sl, #20]
  406630:	2a24      	cmp	r2, #36	; 0x24
  406632:	d00c      	beq.n	40664e <_realloc_r+0x2f6>
  406634:	3510      	adds	r5, #16
  406636:	f10a 0218 	add.w	r2, sl, #24
  40663a:	e7b9      	b.n	4065b0 <_realloc_r+0x258>
  40663c:	692b      	ldr	r3, [r5, #16]
  40663e:	6103      	str	r3, [r0, #16]
  406640:	696b      	ldr	r3, [r5, #20]
  406642:	6143      	str	r3, [r0, #20]
  406644:	f105 0218 	add.w	r2, r5, #24
  406648:	f100 0318 	add.w	r3, r0, #24
  40664c:	e6cb      	b.n	4063e6 <_realloc_r+0x8e>
  40664e:	692a      	ldr	r2, [r5, #16]
  406650:	f8ca 2018 	str.w	r2, [sl, #24]
  406654:	696a      	ldr	r2, [r5, #20]
  406656:	f8ca 201c 	str.w	r2, [sl, #28]
  40665a:	3518      	adds	r5, #24
  40665c:	f10a 0220 	add.w	r2, sl, #32
  406660:	e7a6      	b.n	4065b0 <_realloc_r+0x258>
  406662:	4632      	mov	r2, r6
  406664:	e77f      	b.n	406566 <_realloc_r+0x20e>
  406666:	4629      	mov	r1, r5
  406668:	4630      	mov	r0, r6
  40666a:	9301      	str	r3, [sp, #4]
  40666c:	f7ff fe10 	bl	406290 <memmove>
  406670:	9b01      	ldr	r3, [sp, #4]
  406672:	e77e      	b.n	406572 <_realloc_r+0x21a>
  406674:	68a9      	ldr	r1, [r5, #8]
  406676:	f8ca 1010 	str.w	r1, [sl, #16]
  40667a:	68e9      	ldr	r1, [r5, #12]
  40667c:	f8ca 1014 	str.w	r1, [sl, #20]
  406680:	2a24      	cmp	r2, #36	; 0x24
  406682:	d003      	beq.n	40668c <_realloc_r+0x334>
  406684:	3510      	adds	r5, #16
  406686:	f10a 0218 	add.w	r2, sl, #24
  40668a:	e76c      	b.n	406566 <_realloc_r+0x20e>
  40668c:	692a      	ldr	r2, [r5, #16]
  40668e:	f8ca 2018 	str.w	r2, [sl, #24]
  406692:	696a      	ldr	r2, [r5, #20]
  406694:	f8ca 201c 	str.w	r2, [sl, #28]
  406698:	3518      	adds	r5, #24
  40669a:	f10a 0220 	add.w	r2, sl, #32
  40669e:	e762      	b.n	406566 <_realloc_r+0x20e>
  4066a0:	20400448 	.word	0x20400448

004066a4 <__sread>:
  4066a4:	b510      	push	{r4, lr}
  4066a6:	460c      	mov	r4, r1
  4066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4066ac:	f000 f9f6 	bl	406a9c <_read_r>
  4066b0:	2800      	cmp	r0, #0
  4066b2:	db03      	blt.n	4066bc <__sread+0x18>
  4066b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4066b6:	4403      	add	r3, r0
  4066b8:	6523      	str	r3, [r4, #80]	; 0x50
  4066ba:	bd10      	pop	{r4, pc}
  4066bc:	89a3      	ldrh	r3, [r4, #12]
  4066be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  4066c2:	81a3      	strh	r3, [r4, #12]
  4066c4:	bd10      	pop	{r4, pc}
  4066c6:	bf00      	nop

004066c8 <__swrite>:
  4066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4066cc:	4616      	mov	r6, r2
  4066ce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  4066d2:	461f      	mov	r7, r3
  4066d4:	05d3      	lsls	r3, r2, #23
  4066d6:	460c      	mov	r4, r1
  4066d8:	4605      	mov	r5, r0
  4066da:	d507      	bpl.n	4066ec <__swrite+0x24>
  4066dc:	2200      	movs	r2, #0
  4066de:	2302      	movs	r3, #2
  4066e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4066e4:	f000 f9c4 	bl	406a70 <_lseek_r>
  4066e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4066ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4066f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4066f4:	81a2      	strh	r2, [r4, #12]
  4066f6:	463b      	mov	r3, r7
  4066f8:	4632      	mov	r2, r6
  4066fa:	4628      	mov	r0, r5
  4066fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406700:	f000 b8a4 	b.w	40684c <_write_r>

00406704 <__sseek>:
  406704:	b510      	push	{r4, lr}
  406706:	460c      	mov	r4, r1
  406708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40670c:	f000 f9b0 	bl	406a70 <_lseek_r>
  406710:	89a3      	ldrh	r3, [r4, #12]
  406712:	1c42      	adds	r2, r0, #1
  406714:	bf0e      	itee	eq
  406716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40671a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40671e:	6520      	strne	r0, [r4, #80]	; 0x50
  406720:	81a3      	strh	r3, [r4, #12]
  406722:	bd10      	pop	{r4, pc}

00406724 <__sclose>:
  406724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406728:	f000 b908 	b.w	40693c <_close_r>

0040672c <__swbuf_r>:
  40672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40672e:	460d      	mov	r5, r1
  406730:	4614      	mov	r4, r2
  406732:	4606      	mov	r6, r0
  406734:	b110      	cbz	r0, 40673c <__swbuf_r+0x10>
  406736:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406738:	2b00      	cmp	r3, #0
  40673a:	d04b      	beq.n	4067d4 <__swbuf_r+0xa8>
  40673c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406740:	69a3      	ldr	r3, [r4, #24]
  406742:	60a3      	str	r3, [r4, #8]
  406744:	b291      	uxth	r1, r2
  406746:	0708      	lsls	r0, r1, #28
  406748:	d539      	bpl.n	4067be <__swbuf_r+0x92>
  40674a:	6923      	ldr	r3, [r4, #16]
  40674c:	2b00      	cmp	r3, #0
  40674e:	d036      	beq.n	4067be <__swbuf_r+0x92>
  406750:	b2ed      	uxtb	r5, r5
  406752:	0489      	lsls	r1, r1, #18
  406754:	462f      	mov	r7, r5
  406756:	d515      	bpl.n	406784 <__swbuf_r+0x58>
  406758:	6822      	ldr	r2, [r4, #0]
  40675a:	6961      	ldr	r1, [r4, #20]
  40675c:	1ad3      	subs	r3, r2, r3
  40675e:	428b      	cmp	r3, r1
  406760:	da1c      	bge.n	40679c <__swbuf_r+0x70>
  406762:	3301      	adds	r3, #1
  406764:	68a1      	ldr	r1, [r4, #8]
  406766:	1c50      	adds	r0, r2, #1
  406768:	3901      	subs	r1, #1
  40676a:	60a1      	str	r1, [r4, #8]
  40676c:	6020      	str	r0, [r4, #0]
  40676e:	7015      	strb	r5, [r2, #0]
  406770:	6962      	ldr	r2, [r4, #20]
  406772:	429a      	cmp	r2, r3
  406774:	d01a      	beq.n	4067ac <__swbuf_r+0x80>
  406776:	89a3      	ldrh	r3, [r4, #12]
  406778:	07db      	lsls	r3, r3, #31
  40677a:	d501      	bpl.n	406780 <__swbuf_r+0x54>
  40677c:	2d0a      	cmp	r5, #10
  40677e:	d015      	beq.n	4067ac <__swbuf_r+0x80>
  406780:	4638      	mov	r0, r7
  406782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406784:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406786:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40678a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40678e:	81a2      	strh	r2, [r4, #12]
  406790:	6822      	ldr	r2, [r4, #0]
  406792:	6661      	str	r1, [r4, #100]	; 0x64
  406794:	6961      	ldr	r1, [r4, #20]
  406796:	1ad3      	subs	r3, r2, r3
  406798:	428b      	cmp	r3, r1
  40679a:	dbe2      	blt.n	406762 <__swbuf_r+0x36>
  40679c:	4621      	mov	r1, r4
  40679e:	4630      	mov	r0, r6
  4067a0:	f7ff f87a 	bl	405898 <_fflush_r>
  4067a4:	b940      	cbnz	r0, 4067b8 <__swbuf_r+0x8c>
  4067a6:	6822      	ldr	r2, [r4, #0]
  4067a8:	2301      	movs	r3, #1
  4067aa:	e7db      	b.n	406764 <__swbuf_r+0x38>
  4067ac:	4621      	mov	r1, r4
  4067ae:	4630      	mov	r0, r6
  4067b0:	f7ff f872 	bl	405898 <_fflush_r>
  4067b4:	2800      	cmp	r0, #0
  4067b6:	d0e3      	beq.n	406780 <__swbuf_r+0x54>
  4067b8:	f04f 37ff 	mov.w	r7, #4294967295
  4067bc:	e7e0      	b.n	406780 <__swbuf_r+0x54>
  4067be:	4621      	mov	r1, r4
  4067c0:	4630      	mov	r0, r6
  4067c2:	f7fe ff55 	bl	405670 <__swsetup_r>
  4067c6:	2800      	cmp	r0, #0
  4067c8:	d1f6      	bne.n	4067b8 <__swbuf_r+0x8c>
  4067ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4067ce:	6923      	ldr	r3, [r4, #16]
  4067d0:	b291      	uxth	r1, r2
  4067d2:	e7bd      	b.n	406750 <__swbuf_r+0x24>
  4067d4:	f7ff f8b8 	bl	405948 <__sinit>
  4067d8:	e7b0      	b.n	40673c <__swbuf_r+0x10>
  4067da:	bf00      	nop

004067dc <_wcrtomb_r>:
  4067dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4067de:	4606      	mov	r6, r0
  4067e0:	b085      	sub	sp, #20
  4067e2:	461f      	mov	r7, r3
  4067e4:	b189      	cbz	r1, 40680a <_wcrtomb_r+0x2e>
  4067e6:	4c10      	ldr	r4, [pc, #64]	; (406828 <_wcrtomb_r+0x4c>)
  4067e8:	4d10      	ldr	r5, [pc, #64]	; (40682c <_wcrtomb_r+0x50>)
  4067ea:	6824      	ldr	r4, [r4, #0]
  4067ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4067ee:	2c00      	cmp	r4, #0
  4067f0:	bf08      	it	eq
  4067f2:	462c      	moveq	r4, r5
  4067f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4067f8:	47a0      	blx	r4
  4067fa:	1c43      	adds	r3, r0, #1
  4067fc:	d103      	bne.n	406806 <_wcrtomb_r+0x2a>
  4067fe:	2200      	movs	r2, #0
  406800:	238a      	movs	r3, #138	; 0x8a
  406802:	603a      	str	r2, [r7, #0]
  406804:	6033      	str	r3, [r6, #0]
  406806:	b005      	add	sp, #20
  406808:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40680a:	460c      	mov	r4, r1
  40680c:	4906      	ldr	r1, [pc, #24]	; (406828 <_wcrtomb_r+0x4c>)
  40680e:	4a07      	ldr	r2, [pc, #28]	; (40682c <_wcrtomb_r+0x50>)
  406810:	6809      	ldr	r1, [r1, #0]
  406812:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406814:	2900      	cmp	r1, #0
  406816:	bf08      	it	eq
  406818:	4611      	moveq	r1, r2
  40681a:	4622      	mov	r2, r4
  40681c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406820:	a901      	add	r1, sp, #4
  406822:	47a0      	blx	r4
  406824:	e7e9      	b.n	4067fa <_wcrtomb_r+0x1e>
  406826:	bf00      	nop
  406828:	2040001c 	.word	0x2040001c
  40682c:	2040085c 	.word	0x2040085c

00406830 <__ascii_wctomb>:
  406830:	b121      	cbz	r1, 40683c <__ascii_wctomb+0xc>
  406832:	2aff      	cmp	r2, #255	; 0xff
  406834:	d804      	bhi.n	406840 <__ascii_wctomb+0x10>
  406836:	700a      	strb	r2, [r1, #0]
  406838:	2001      	movs	r0, #1
  40683a:	4770      	bx	lr
  40683c:	4608      	mov	r0, r1
  40683e:	4770      	bx	lr
  406840:	238a      	movs	r3, #138	; 0x8a
  406842:	6003      	str	r3, [r0, #0]
  406844:	f04f 30ff 	mov.w	r0, #4294967295
  406848:	4770      	bx	lr
  40684a:	bf00      	nop

0040684c <_write_r>:
  40684c:	b570      	push	{r4, r5, r6, lr}
  40684e:	460d      	mov	r5, r1
  406850:	4c08      	ldr	r4, [pc, #32]	; (406874 <_write_r+0x28>)
  406852:	4611      	mov	r1, r2
  406854:	4606      	mov	r6, r0
  406856:	461a      	mov	r2, r3
  406858:	4628      	mov	r0, r5
  40685a:	2300      	movs	r3, #0
  40685c:	6023      	str	r3, [r4, #0]
  40685e:	f7f9 fd67 	bl	400330 <_write>
  406862:	1c43      	adds	r3, r0, #1
  406864:	d000      	beq.n	406868 <_write_r+0x1c>
  406866:	bd70      	pop	{r4, r5, r6, pc}
  406868:	6823      	ldr	r3, [r4, #0]
  40686a:	2b00      	cmp	r3, #0
  40686c:	d0fb      	beq.n	406866 <_write_r+0x1a>
  40686e:	6033      	str	r3, [r6, #0]
  406870:	bd70      	pop	{r4, r5, r6, pc}
  406872:	bf00      	nop
  406874:	20400cc0 	.word	0x20400cc0

00406878 <__register_exitproc>:
  406878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40687c:	4d2c      	ldr	r5, [pc, #176]	; (406930 <__register_exitproc+0xb8>)
  40687e:	4606      	mov	r6, r0
  406880:	6828      	ldr	r0, [r5, #0]
  406882:	4698      	mov	r8, r3
  406884:	460f      	mov	r7, r1
  406886:	4691      	mov	r9, r2
  406888:	f7ff fc1e 	bl	4060c8 <__retarget_lock_acquire_recursive>
  40688c:	4b29      	ldr	r3, [pc, #164]	; (406934 <__register_exitproc+0xbc>)
  40688e:	681c      	ldr	r4, [r3, #0]
  406890:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406894:	2b00      	cmp	r3, #0
  406896:	d03e      	beq.n	406916 <__register_exitproc+0x9e>
  406898:	685a      	ldr	r2, [r3, #4]
  40689a:	2a1f      	cmp	r2, #31
  40689c:	dc1c      	bgt.n	4068d8 <__register_exitproc+0x60>
  40689e:	f102 0e01 	add.w	lr, r2, #1
  4068a2:	b176      	cbz	r6, 4068c2 <__register_exitproc+0x4a>
  4068a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4068a8:	2401      	movs	r4, #1
  4068aa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4068ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4068b2:	4094      	lsls	r4, r2
  4068b4:	4320      	orrs	r0, r4
  4068b6:	2e02      	cmp	r6, #2
  4068b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4068bc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4068c0:	d023      	beq.n	40690a <__register_exitproc+0x92>
  4068c2:	3202      	adds	r2, #2
  4068c4:	f8c3 e004 	str.w	lr, [r3, #4]
  4068c8:	6828      	ldr	r0, [r5, #0]
  4068ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4068ce:	f7ff fbfd 	bl	4060cc <__retarget_lock_release_recursive>
  4068d2:	2000      	movs	r0, #0
  4068d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4068d8:	4b17      	ldr	r3, [pc, #92]	; (406938 <__register_exitproc+0xc0>)
  4068da:	b30b      	cbz	r3, 406920 <__register_exitproc+0xa8>
  4068dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4068e0:	f7fd fa6c 	bl	403dbc <malloc>
  4068e4:	4603      	mov	r3, r0
  4068e6:	b1d8      	cbz	r0, 406920 <__register_exitproc+0xa8>
  4068e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4068ec:	6002      	str	r2, [r0, #0]
  4068ee:	2100      	movs	r1, #0
  4068f0:	6041      	str	r1, [r0, #4]
  4068f2:	460a      	mov	r2, r1
  4068f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4068f8:	f04f 0e01 	mov.w	lr, #1
  4068fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406900:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406904:	2e00      	cmp	r6, #0
  406906:	d0dc      	beq.n	4068c2 <__register_exitproc+0x4a>
  406908:	e7cc      	b.n	4068a4 <__register_exitproc+0x2c>
  40690a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40690e:	430c      	orrs	r4, r1
  406910:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406914:	e7d5      	b.n	4068c2 <__register_exitproc+0x4a>
  406916:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40691a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40691e:	e7bb      	b.n	406898 <__register_exitproc+0x20>
  406920:	6828      	ldr	r0, [r5, #0]
  406922:	f7ff fbd3 	bl	4060cc <__retarget_lock_release_recursive>
  406926:	f04f 30ff 	mov.w	r0, #4294967295
  40692a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40692e:	bf00      	nop
  406930:	20400858 	.word	0x20400858
  406934:	00407004 	.word	0x00407004
  406938:	00403dbd 	.word	0x00403dbd

0040693c <_close_r>:
  40693c:	b538      	push	{r3, r4, r5, lr}
  40693e:	4c07      	ldr	r4, [pc, #28]	; (40695c <_close_r+0x20>)
  406940:	2300      	movs	r3, #0
  406942:	4605      	mov	r5, r0
  406944:	4608      	mov	r0, r1
  406946:	6023      	str	r3, [r4, #0]
  406948:	f7fa fb2c 	bl	400fa4 <_close>
  40694c:	1c43      	adds	r3, r0, #1
  40694e:	d000      	beq.n	406952 <_close_r+0x16>
  406950:	bd38      	pop	{r3, r4, r5, pc}
  406952:	6823      	ldr	r3, [r4, #0]
  406954:	2b00      	cmp	r3, #0
  406956:	d0fb      	beq.n	406950 <_close_r+0x14>
  406958:	602b      	str	r3, [r5, #0]
  40695a:	bd38      	pop	{r3, r4, r5, pc}
  40695c:	20400cc0 	.word	0x20400cc0

00406960 <_fclose_r>:
  406960:	b570      	push	{r4, r5, r6, lr}
  406962:	b159      	cbz	r1, 40697c <_fclose_r+0x1c>
  406964:	4605      	mov	r5, r0
  406966:	460c      	mov	r4, r1
  406968:	b110      	cbz	r0, 406970 <_fclose_r+0x10>
  40696a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40696c:	2b00      	cmp	r3, #0
  40696e:	d03c      	beq.n	4069ea <_fclose_r+0x8a>
  406970:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406972:	07d8      	lsls	r0, r3, #31
  406974:	d505      	bpl.n	406982 <_fclose_r+0x22>
  406976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40697a:	b92b      	cbnz	r3, 406988 <_fclose_r+0x28>
  40697c:	2600      	movs	r6, #0
  40697e:	4630      	mov	r0, r6
  406980:	bd70      	pop	{r4, r5, r6, pc}
  406982:	89a3      	ldrh	r3, [r4, #12]
  406984:	0599      	lsls	r1, r3, #22
  406986:	d53c      	bpl.n	406a02 <_fclose_r+0xa2>
  406988:	4621      	mov	r1, r4
  40698a:	4628      	mov	r0, r5
  40698c:	f7fe fee4 	bl	405758 <__sflush_r>
  406990:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406992:	4606      	mov	r6, r0
  406994:	b133      	cbz	r3, 4069a4 <_fclose_r+0x44>
  406996:	69e1      	ldr	r1, [r4, #28]
  406998:	4628      	mov	r0, r5
  40699a:	4798      	blx	r3
  40699c:	2800      	cmp	r0, #0
  40699e:	bfb8      	it	lt
  4069a0:	f04f 36ff 	movlt.w	r6, #4294967295
  4069a4:	89a3      	ldrh	r3, [r4, #12]
  4069a6:	061a      	lsls	r2, r3, #24
  4069a8:	d422      	bmi.n	4069f0 <_fclose_r+0x90>
  4069aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4069ac:	b141      	cbz	r1, 4069c0 <_fclose_r+0x60>
  4069ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4069b2:	4299      	cmp	r1, r3
  4069b4:	d002      	beq.n	4069bc <_fclose_r+0x5c>
  4069b6:	4628      	mov	r0, r5
  4069b8:	f7ff f8ec 	bl	405b94 <_free_r>
  4069bc:	2300      	movs	r3, #0
  4069be:	6323      	str	r3, [r4, #48]	; 0x30
  4069c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4069c2:	b121      	cbz	r1, 4069ce <_fclose_r+0x6e>
  4069c4:	4628      	mov	r0, r5
  4069c6:	f7ff f8e5 	bl	405b94 <_free_r>
  4069ca:	2300      	movs	r3, #0
  4069cc:	6463      	str	r3, [r4, #68]	; 0x44
  4069ce:	f7fe ffe7 	bl	4059a0 <__sfp_lock_acquire>
  4069d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4069d4:	2200      	movs	r2, #0
  4069d6:	07db      	lsls	r3, r3, #31
  4069d8:	81a2      	strh	r2, [r4, #12]
  4069da:	d50e      	bpl.n	4069fa <_fclose_r+0x9a>
  4069dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4069de:	f7ff fb71 	bl	4060c4 <__retarget_lock_close_recursive>
  4069e2:	f7fe ffe3 	bl	4059ac <__sfp_lock_release>
  4069e6:	4630      	mov	r0, r6
  4069e8:	bd70      	pop	{r4, r5, r6, pc}
  4069ea:	f7fe ffad 	bl	405948 <__sinit>
  4069ee:	e7bf      	b.n	406970 <_fclose_r+0x10>
  4069f0:	6921      	ldr	r1, [r4, #16]
  4069f2:	4628      	mov	r0, r5
  4069f4:	f7ff f8ce 	bl	405b94 <_free_r>
  4069f8:	e7d7      	b.n	4069aa <_fclose_r+0x4a>
  4069fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4069fc:	f7ff fb66 	bl	4060cc <__retarget_lock_release_recursive>
  406a00:	e7ec      	b.n	4069dc <_fclose_r+0x7c>
  406a02:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a04:	f7ff fb60 	bl	4060c8 <__retarget_lock_acquire_recursive>
  406a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406a0c:	2b00      	cmp	r3, #0
  406a0e:	d1bb      	bne.n	406988 <_fclose_r+0x28>
  406a10:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406a12:	f016 0601 	ands.w	r6, r6, #1
  406a16:	d1b1      	bne.n	40697c <_fclose_r+0x1c>
  406a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406a1a:	f7ff fb57 	bl	4060cc <__retarget_lock_release_recursive>
  406a1e:	4630      	mov	r0, r6
  406a20:	bd70      	pop	{r4, r5, r6, pc}
  406a22:	bf00      	nop

00406a24 <_fstat_r>:
  406a24:	b538      	push	{r3, r4, r5, lr}
  406a26:	460b      	mov	r3, r1
  406a28:	4c07      	ldr	r4, [pc, #28]	; (406a48 <_fstat_r+0x24>)
  406a2a:	4605      	mov	r5, r0
  406a2c:	4611      	mov	r1, r2
  406a2e:	4618      	mov	r0, r3
  406a30:	2300      	movs	r3, #0
  406a32:	6023      	str	r3, [r4, #0]
  406a34:	f7fa fab9 	bl	400faa <_fstat>
  406a38:	1c43      	adds	r3, r0, #1
  406a3a:	d000      	beq.n	406a3e <_fstat_r+0x1a>
  406a3c:	bd38      	pop	{r3, r4, r5, pc}
  406a3e:	6823      	ldr	r3, [r4, #0]
  406a40:	2b00      	cmp	r3, #0
  406a42:	d0fb      	beq.n	406a3c <_fstat_r+0x18>
  406a44:	602b      	str	r3, [r5, #0]
  406a46:	bd38      	pop	{r3, r4, r5, pc}
  406a48:	20400cc0 	.word	0x20400cc0

00406a4c <_isatty_r>:
  406a4c:	b538      	push	{r3, r4, r5, lr}
  406a4e:	4c07      	ldr	r4, [pc, #28]	; (406a6c <_isatty_r+0x20>)
  406a50:	2300      	movs	r3, #0
  406a52:	4605      	mov	r5, r0
  406a54:	4608      	mov	r0, r1
  406a56:	6023      	str	r3, [r4, #0]
  406a58:	f7fa faac 	bl	400fb4 <_isatty>
  406a5c:	1c43      	adds	r3, r0, #1
  406a5e:	d000      	beq.n	406a62 <_isatty_r+0x16>
  406a60:	bd38      	pop	{r3, r4, r5, pc}
  406a62:	6823      	ldr	r3, [r4, #0]
  406a64:	2b00      	cmp	r3, #0
  406a66:	d0fb      	beq.n	406a60 <_isatty_r+0x14>
  406a68:	602b      	str	r3, [r5, #0]
  406a6a:	bd38      	pop	{r3, r4, r5, pc}
  406a6c:	20400cc0 	.word	0x20400cc0

00406a70 <_lseek_r>:
  406a70:	b570      	push	{r4, r5, r6, lr}
  406a72:	460d      	mov	r5, r1
  406a74:	4c08      	ldr	r4, [pc, #32]	; (406a98 <_lseek_r+0x28>)
  406a76:	4611      	mov	r1, r2
  406a78:	4606      	mov	r6, r0
  406a7a:	461a      	mov	r2, r3
  406a7c:	4628      	mov	r0, r5
  406a7e:	2300      	movs	r3, #0
  406a80:	6023      	str	r3, [r4, #0]
  406a82:	f7fa fa99 	bl	400fb8 <_lseek>
  406a86:	1c43      	adds	r3, r0, #1
  406a88:	d000      	beq.n	406a8c <_lseek_r+0x1c>
  406a8a:	bd70      	pop	{r4, r5, r6, pc}
  406a8c:	6823      	ldr	r3, [r4, #0]
  406a8e:	2b00      	cmp	r3, #0
  406a90:	d0fb      	beq.n	406a8a <_lseek_r+0x1a>
  406a92:	6033      	str	r3, [r6, #0]
  406a94:	bd70      	pop	{r4, r5, r6, pc}
  406a96:	bf00      	nop
  406a98:	20400cc0 	.word	0x20400cc0

00406a9c <_read_r>:
  406a9c:	b570      	push	{r4, r5, r6, lr}
  406a9e:	460d      	mov	r5, r1
  406aa0:	4c08      	ldr	r4, [pc, #32]	; (406ac4 <_read_r+0x28>)
  406aa2:	4611      	mov	r1, r2
  406aa4:	4606      	mov	r6, r0
  406aa6:	461a      	mov	r2, r3
  406aa8:	4628      	mov	r0, r5
  406aaa:	2300      	movs	r3, #0
  406aac:	6023      	str	r3, [r4, #0]
  406aae:	f7f9 fc21 	bl	4002f4 <_read>
  406ab2:	1c43      	adds	r3, r0, #1
  406ab4:	d000      	beq.n	406ab8 <_read_r+0x1c>
  406ab6:	bd70      	pop	{r4, r5, r6, pc}
  406ab8:	6823      	ldr	r3, [r4, #0]
  406aba:	2b00      	cmp	r3, #0
  406abc:	d0fb      	beq.n	406ab6 <_read_r+0x1a>
  406abe:	6033      	str	r3, [r6, #0]
  406ac0:	bd70      	pop	{r4, r5, r6, pc}
  406ac2:	bf00      	nop
  406ac4:	20400cc0 	.word	0x20400cc0

00406ac8 <__aeabi_uldivmod>:
  406ac8:	b953      	cbnz	r3, 406ae0 <__aeabi_uldivmod+0x18>
  406aca:	b94a      	cbnz	r2, 406ae0 <__aeabi_uldivmod+0x18>
  406acc:	2900      	cmp	r1, #0
  406ace:	bf08      	it	eq
  406ad0:	2800      	cmpeq	r0, #0
  406ad2:	bf1c      	itt	ne
  406ad4:	f04f 31ff 	movne.w	r1, #4294967295
  406ad8:	f04f 30ff 	movne.w	r0, #4294967295
  406adc:	f000 b97a 	b.w	406dd4 <__aeabi_idiv0>
  406ae0:	f1ad 0c08 	sub.w	ip, sp, #8
  406ae4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406ae8:	f000 f806 	bl	406af8 <__udivmoddi4>
  406aec:	f8dd e004 	ldr.w	lr, [sp, #4]
  406af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406af4:	b004      	add	sp, #16
  406af6:	4770      	bx	lr

00406af8 <__udivmoddi4>:
  406af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406afc:	468c      	mov	ip, r1
  406afe:	460d      	mov	r5, r1
  406b00:	4604      	mov	r4, r0
  406b02:	9e08      	ldr	r6, [sp, #32]
  406b04:	2b00      	cmp	r3, #0
  406b06:	d151      	bne.n	406bac <__udivmoddi4+0xb4>
  406b08:	428a      	cmp	r2, r1
  406b0a:	4617      	mov	r7, r2
  406b0c:	d96d      	bls.n	406bea <__udivmoddi4+0xf2>
  406b0e:	fab2 fe82 	clz	lr, r2
  406b12:	f1be 0f00 	cmp.w	lr, #0
  406b16:	d00b      	beq.n	406b30 <__udivmoddi4+0x38>
  406b18:	f1ce 0c20 	rsb	ip, lr, #32
  406b1c:	fa01 f50e 	lsl.w	r5, r1, lr
  406b20:	fa20 fc0c 	lsr.w	ip, r0, ip
  406b24:	fa02 f70e 	lsl.w	r7, r2, lr
  406b28:	ea4c 0c05 	orr.w	ip, ip, r5
  406b2c:	fa00 f40e 	lsl.w	r4, r0, lr
  406b30:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406b34:	0c25      	lsrs	r5, r4, #16
  406b36:	fbbc f8fa 	udiv	r8, ip, sl
  406b3a:	fa1f f987 	uxth.w	r9, r7
  406b3e:	fb0a cc18 	mls	ip, sl, r8, ip
  406b42:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406b46:	fb08 f309 	mul.w	r3, r8, r9
  406b4a:	42ab      	cmp	r3, r5
  406b4c:	d90a      	bls.n	406b64 <__udivmoddi4+0x6c>
  406b4e:	19ed      	adds	r5, r5, r7
  406b50:	f108 32ff 	add.w	r2, r8, #4294967295
  406b54:	f080 8123 	bcs.w	406d9e <__udivmoddi4+0x2a6>
  406b58:	42ab      	cmp	r3, r5
  406b5a:	f240 8120 	bls.w	406d9e <__udivmoddi4+0x2a6>
  406b5e:	f1a8 0802 	sub.w	r8, r8, #2
  406b62:	443d      	add	r5, r7
  406b64:	1aed      	subs	r5, r5, r3
  406b66:	b2a4      	uxth	r4, r4
  406b68:	fbb5 f0fa 	udiv	r0, r5, sl
  406b6c:	fb0a 5510 	mls	r5, sl, r0, r5
  406b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406b74:	fb00 f909 	mul.w	r9, r0, r9
  406b78:	45a1      	cmp	r9, r4
  406b7a:	d909      	bls.n	406b90 <__udivmoddi4+0x98>
  406b7c:	19e4      	adds	r4, r4, r7
  406b7e:	f100 33ff 	add.w	r3, r0, #4294967295
  406b82:	f080 810a 	bcs.w	406d9a <__udivmoddi4+0x2a2>
  406b86:	45a1      	cmp	r9, r4
  406b88:	f240 8107 	bls.w	406d9a <__udivmoddi4+0x2a2>
  406b8c:	3802      	subs	r0, #2
  406b8e:	443c      	add	r4, r7
  406b90:	eba4 0409 	sub.w	r4, r4, r9
  406b94:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406b98:	2100      	movs	r1, #0
  406b9a:	2e00      	cmp	r6, #0
  406b9c:	d061      	beq.n	406c62 <__udivmoddi4+0x16a>
  406b9e:	fa24 f40e 	lsr.w	r4, r4, lr
  406ba2:	2300      	movs	r3, #0
  406ba4:	6034      	str	r4, [r6, #0]
  406ba6:	6073      	str	r3, [r6, #4]
  406ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bac:	428b      	cmp	r3, r1
  406bae:	d907      	bls.n	406bc0 <__udivmoddi4+0xc8>
  406bb0:	2e00      	cmp	r6, #0
  406bb2:	d054      	beq.n	406c5e <__udivmoddi4+0x166>
  406bb4:	2100      	movs	r1, #0
  406bb6:	e886 0021 	stmia.w	r6, {r0, r5}
  406bba:	4608      	mov	r0, r1
  406bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bc0:	fab3 f183 	clz	r1, r3
  406bc4:	2900      	cmp	r1, #0
  406bc6:	f040 808e 	bne.w	406ce6 <__udivmoddi4+0x1ee>
  406bca:	42ab      	cmp	r3, r5
  406bcc:	d302      	bcc.n	406bd4 <__udivmoddi4+0xdc>
  406bce:	4282      	cmp	r2, r0
  406bd0:	f200 80fa 	bhi.w	406dc8 <__udivmoddi4+0x2d0>
  406bd4:	1a84      	subs	r4, r0, r2
  406bd6:	eb65 0503 	sbc.w	r5, r5, r3
  406bda:	2001      	movs	r0, #1
  406bdc:	46ac      	mov	ip, r5
  406bde:	2e00      	cmp	r6, #0
  406be0:	d03f      	beq.n	406c62 <__udivmoddi4+0x16a>
  406be2:	e886 1010 	stmia.w	r6, {r4, ip}
  406be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406bea:	b912      	cbnz	r2, 406bf2 <__udivmoddi4+0xfa>
  406bec:	2701      	movs	r7, #1
  406bee:	fbb7 f7f2 	udiv	r7, r7, r2
  406bf2:	fab7 fe87 	clz	lr, r7
  406bf6:	f1be 0f00 	cmp.w	lr, #0
  406bfa:	d134      	bne.n	406c66 <__udivmoddi4+0x16e>
  406bfc:	1beb      	subs	r3, r5, r7
  406bfe:	0c3a      	lsrs	r2, r7, #16
  406c00:	fa1f fc87 	uxth.w	ip, r7
  406c04:	2101      	movs	r1, #1
  406c06:	fbb3 f8f2 	udiv	r8, r3, r2
  406c0a:	0c25      	lsrs	r5, r4, #16
  406c0c:	fb02 3318 	mls	r3, r2, r8, r3
  406c10:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406c14:	fb0c f308 	mul.w	r3, ip, r8
  406c18:	42ab      	cmp	r3, r5
  406c1a:	d907      	bls.n	406c2c <__udivmoddi4+0x134>
  406c1c:	19ed      	adds	r5, r5, r7
  406c1e:	f108 30ff 	add.w	r0, r8, #4294967295
  406c22:	d202      	bcs.n	406c2a <__udivmoddi4+0x132>
  406c24:	42ab      	cmp	r3, r5
  406c26:	f200 80d1 	bhi.w	406dcc <__udivmoddi4+0x2d4>
  406c2a:	4680      	mov	r8, r0
  406c2c:	1aed      	subs	r5, r5, r3
  406c2e:	b2a3      	uxth	r3, r4
  406c30:	fbb5 f0f2 	udiv	r0, r5, r2
  406c34:	fb02 5510 	mls	r5, r2, r0, r5
  406c38:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406c3c:	fb0c fc00 	mul.w	ip, ip, r0
  406c40:	45a4      	cmp	ip, r4
  406c42:	d907      	bls.n	406c54 <__udivmoddi4+0x15c>
  406c44:	19e4      	adds	r4, r4, r7
  406c46:	f100 33ff 	add.w	r3, r0, #4294967295
  406c4a:	d202      	bcs.n	406c52 <__udivmoddi4+0x15a>
  406c4c:	45a4      	cmp	ip, r4
  406c4e:	f200 80b8 	bhi.w	406dc2 <__udivmoddi4+0x2ca>
  406c52:	4618      	mov	r0, r3
  406c54:	eba4 040c 	sub.w	r4, r4, ip
  406c58:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406c5c:	e79d      	b.n	406b9a <__udivmoddi4+0xa2>
  406c5e:	4631      	mov	r1, r6
  406c60:	4630      	mov	r0, r6
  406c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406c66:	f1ce 0420 	rsb	r4, lr, #32
  406c6a:	fa05 f30e 	lsl.w	r3, r5, lr
  406c6e:	fa07 f70e 	lsl.w	r7, r7, lr
  406c72:	fa20 f804 	lsr.w	r8, r0, r4
  406c76:	0c3a      	lsrs	r2, r7, #16
  406c78:	fa25 f404 	lsr.w	r4, r5, r4
  406c7c:	ea48 0803 	orr.w	r8, r8, r3
  406c80:	fbb4 f1f2 	udiv	r1, r4, r2
  406c84:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406c88:	fb02 4411 	mls	r4, r2, r1, r4
  406c8c:	fa1f fc87 	uxth.w	ip, r7
  406c90:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406c94:	fb01 f30c 	mul.w	r3, r1, ip
  406c98:	42ab      	cmp	r3, r5
  406c9a:	fa00 f40e 	lsl.w	r4, r0, lr
  406c9e:	d909      	bls.n	406cb4 <__udivmoddi4+0x1bc>
  406ca0:	19ed      	adds	r5, r5, r7
  406ca2:	f101 30ff 	add.w	r0, r1, #4294967295
  406ca6:	f080 808a 	bcs.w	406dbe <__udivmoddi4+0x2c6>
  406caa:	42ab      	cmp	r3, r5
  406cac:	f240 8087 	bls.w	406dbe <__udivmoddi4+0x2c6>
  406cb0:	3902      	subs	r1, #2
  406cb2:	443d      	add	r5, r7
  406cb4:	1aeb      	subs	r3, r5, r3
  406cb6:	fa1f f588 	uxth.w	r5, r8
  406cba:	fbb3 f0f2 	udiv	r0, r3, r2
  406cbe:	fb02 3310 	mls	r3, r2, r0, r3
  406cc2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406cc6:	fb00 f30c 	mul.w	r3, r0, ip
  406cca:	42ab      	cmp	r3, r5
  406ccc:	d907      	bls.n	406cde <__udivmoddi4+0x1e6>
  406cce:	19ed      	adds	r5, r5, r7
  406cd0:	f100 38ff 	add.w	r8, r0, #4294967295
  406cd4:	d26f      	bcs.n	406db6 <__udivmoddi4+0x2be>
  406cd6:	42ab      	cmp	r3, r5
  406cd8:	d96d      	bls.n	406db6 <__udivmoddi4+0x2be>
  406cda:	3802      	subs	r0, #2
  406cdc:	443d      	add	r5, r7
  406cde:	1aeb      	subs	r3, r5, r3
  406ce0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406ce4:	e78f      	b.n	406c06 <__udivmoddi4+0x10e>
  406ce6:	f1c1 0720 	rsb	r7, r1, #32
  406cea:	fa22 f807 	lsr.w	r8, r2, r7
  406cee:	408b      	lsls	r3, r1
  406cf0:	fa05 f401 	lsl.w	r4, r5, r1
  406cf4:	ea48 0303 	orr.w	r3, r8, r3
  406cf8:	fa20 fe07 	lsr.w	lr, r0, r7
  406cfc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406d00:	40fd      	lsrs	r5, r7
  406d02:	ea4e 0e04 	orr.w	lr, lr, r4
  406d06:	fbb5 f9fc 	udiv	r9, r5, ip
  406d0a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406d0e:	fb0c 5519 	mls	r5, ip, r9, r5
  406d12:	fa1f f883 	uxth.w	r8, r3
  406d16:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406d1a:	fb09 f408 	mul.w	r4, r9, r8
  406d1e:	42ac      	cmp	r4, r5
  406d20:	fa02 f201 	lsl.w	r2, r2, r1
  406d24:	fa00 fa01 	lsl.w	sl, r0, r1
  406d28:	d908      	bls.n	406d3c <__udivmoddi4+0x244>
  406d2a:	18ed      	adds	r5, r5, r3
  406d2c:	f109 30ff 	add.w	r0, r9, #4294967295
  406d30:	d243      	bcs.n	406dba <__udivmoddi4+0x2c2>
  406d32:	42ac      	cmp	r4, r5
  406d34:	d941      	bls.n	406dba <__udivmoddi4+0x2c2>
  406d36:	f1a9 0902 	sub.w	r9, r9, #2
  406d3a:	441d      	add	r5, r3
  406d3c:	1b2d      	subs	r5, r5, r4
  406d3e:	fa1f fe8e 	uxth.w	lr, lr
  406d42:	fbb5 f0fc 	udiv	r0, r5, ip
  406d46:	fb0c 5510 	mls	r5, ip, r0, r5
  406d4a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406d4e:	fb00 f808 	mul.w	r8, r0, r8
  406d52:	45a0      	cmp	r8, r4
  406d54:	d907      	bls.n	406d66 <__udivmoddi4+0x26e>
  406d56:	18e4      	adds	r4, r4, r3
  406d58:	f100 35ff 	add.w	r5, r0, #4294967295
  406d5c:	d229      	bcs.n	406db2 <__udivmoddi4+0x2ba>
  406d5e:	45a0      	cmp	r8, r4
  406d60:	d927      	bls.n	406db2 <__udivmoddi4+0x2ba>
  406d62:	3802      	subs	r0, #2
  406d64:	441c      	add	r4, r3
  406d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406d6a:	eba4 0408 	sub.w	r4, r4, r8
  406d6e:	fba0 8902 	umull	r8, r9, r0, r2
  406d72:	454c      	cmp	r4, r9
  406d74:	46c6      	mov	lr, r8
  406d76:	464d      	mov	r5, r9
  406d78:	d315      	bcc.n	406da6 <__udivmoddi4+0x2ae>
  406d7a:	d012      	beq.n	406da2 <__udivmoddi4+0x2aa>
  406d7c:	b156      	cbz	r6, 406d94 <__udivmoddi4+0x29c>
  406d7e:	ebba 030e 	subs.w	r3, sl, lr
  406d82:	eb64 0405 	sbc.w	r4, r4, r5
  406d86:	fa04 f707 	lsl.w	r7, r4, r7
  406d8a:	40cb      	lsrs	r3, r1
  406d8c:	431f      	orrs	r7, r3
  406d8e:	40cc      	lsrs	r4, r1
  406d90:	6037      	str	r7, [r6, #0]
  406d92:	6074      	str	r4, [r6, #4]
  406d94:	2100      	movs	r1, #0
  406d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406d9a:	4618      	mov	r0, r3
  406d9c:	e6f8      	b.n	406b90 <__udivmoddi4+0x98>
  406d9e:	4690      	mov	r8, r2
  406da0:	e6e0      	b.n	406b64 <__udivmoddi4+0x6c>
  406da2:	45c2      	cmp	sl, r8
  406da4:	d2ea      	bcs.n	406d7c <__udivmoddi4+0x284>
  406da6:	ebb8 0e02 	subs.w	lr, r8, r2
  406daa:	eb69 0503 	sbc.w	r5, r9, r3
  406dae:	3801      	subs	r0, #1
  406db0:	e7e4      	b.n	406d7c <__udivmoddi4+0x284>
  406db2:	4628      	mov	r0, r5
  406db4:	e7d7      	b.n	406d66 <__udivmoddi4+0x26e>
  406db6:	4640      	mov	r0, r8
  406db8:	e791      	b.n	406cde <__udivmoddi4+0x1e6>
  406dba:	4681      	mov	r9, r0
  406dbc:	e7be      	b.n	406d3c <__udivmoddi4+0x244>
  406dbe:	4601      	mov	r1, r0
  406dc0:	e778      	b.n	406cb4 <__udivmoddi4+0x1bc>
  406dc2:	3802      	subs	r0, #2
  406dc4:	443c      	add	r4, r7
  406dc6:	e745      	b.n	406c54 <__udivmoddi4+0x15c>
  406dc8:	4608      	mov	r0, r1
  406dca:	e708      	b.n	406bde <__udivmoddi4+0xe6>
  406dcc:	f1a8 0802 	sub.w	r8, r8, #2
  406dd0:	443d      	add	r5, r7
  406dd2:	e72b      	b.n	406c2c <__udivmoddi4+0x134>

00406dd4 <__aeabi_idiv0>:
  406dd4:	4770      	bx	lr
  406dd6:	bf00      	nop
  406dd8:	00000001 	.word	0x00000001
  406ddc:	00000002 	.word	0x00000002
  406de0:	00000004 	.word	0x00000004
  406de4:	00000008 	.word	0x00000008
  406de8:	00000010 	.word	0x00000010
  406dec:	00000020 	.word	0x00000020
  406df0:	00000040 	.word	0x00000040
  406df4:	00000080 	.word	0x00000080
  406df8:	00000100 	.word	0x00000100
  406dfc:	00000200 	.word	0x00000200
  406e00:	00000400 	.word	0x00000400
  406e04:	454c4449 	.word	0x454c4449
  406e08:	00000000 	.word	0x00000000
  406e0c:	51726d54 	.word	0x51726d54
  406e10:	00000000 	.word	0x00000000
  406e14:	20726d54 	.word	0x20726d54
  406e18:	00637653 	.word	0x00637653
  406e1c:	4f544f4d 	.word	0x4f544f4d
  406e20:	20312052 	.word	0x20312052
  406e24:	31434e45 	.word	0x31434e45
  406e28:	75253a20 	.word	0x75253a20
  406e2c:	0000000a 	.word	0x0000000a
  406e30:	4f544f4d 	.word	0x4f544f4d
  406e34:	20312052 	.word	0x20312052
  406e38:	32434e45 	.word	0x32434e45
  406e3c:	75253a20 	.word	0x75253a20
  406e40:	0000000a 	.word	0x0000000a
  406e44:	6d697250 	.word	0x6d697250
  406e48:	6f726965 	.word	0x6f726965
  406e4c:	61757120 	.word	0x61757120
  406e50:	6e617264 	.word	0x6e617264
  406e54:	000a6574 	.word	0x000a6574
  406e58:	75676553 	.word	0x75676553
  406e5c:	206f646e 	.word	0x206f646e
  406e60:	64617571 	.word	0x64617571
  406e64:	746e6172 	.word	0x746e6172
  406e68:	00000a65 	.word	0x00000a65
  406e6c:	63726554 	.word	0x63726554
  406e70:	6f726965 	.word	0x6f726965
  406e74:	61757120 	.word	0x61757120
  406e78:	6e617264 	.word	0x6e617264
  406e7c:	000a6574 	.word	0x000a6574
  406e80:	72617551 	.word	0x72617551
  406e84:	71206f74 	.word	0x71206f74
  406e88:	72646175 	.word	0x72646175
  406e8c:	65746e61 	.word	0x65746e61
  406e90:	0000000a 	.word	0x0000000a
  406e94:	4f544f4d 	.word	0x4f544f4d
  406e98:	20322052 	.word	0x20322052
  406e9c:	31434e45 	.word	0x31434e45
  406ea0:	75253a20 	.word	0x75253a20
  406ea4:	0000000a 	.word	0x0000000a
  406ea8:	4f544f4d 	.word	0x4f544f4d
  406eac:	20322052 	.word	0x20322052
  406eb0:	32434e45 	.word	0x32434e45
  406eb4:	75253a20 	.word	0x75253a20
  406eb8:	0000000a 	.word	0x0000000a
  406ebc:	4f544f4d 	.word	0x4f544f4d
  406ec0:	20332052 	.word	0x20332052
  406ec4:	31434e45 	.word	0x31434e45
  406ec8:	75253a20 	.word	0x75253a20
  406ecc:	0000000a 	.word	0x0000000a
  406ed0:	4f544f4d 	.word	0x4f544f4d
  406ed4:	20332052 	.word	0x20332052
  406ed8:	32434e45 	.word	0x32434e45
  406edc:	75253a20 	.word	0x75253a20
  406ee0:	0000000a 	.word	0x0000000a
  406ee4:	2d2d2d2d 	.word	0x2d2d2d2d
  406ee8:	2d2d2d2d 	.word	0x2d2d2d2d
  406eec:	2d2d2d2d 	.word	0x2d2d2d2d
  406ef0:	2d2d2d2d 	.word	0x2d2d2d2d
  406ef4:	2d2d2d2d 	.word	0x2d2d2d2d
  406ef8:	2d2d2d2d 	.word	0x2d2d2d2d
  406efc:	2d2d2d2d 	.word	0x2d2d2d2d
  406f00:	2d2d2d2d 	.word	0x2d2d2d2d
  406f04:	2d2d2d2d 	.word	0x2d2d2d2d
  406f08:	2d2d2d2d 	.word	0x2d2d2d2d
  406f0c:	0a2d2d2d 	.word	0x0a2d2d2d
  406f10:	00000000 	.word	0x00000000
  406f14:	00005441 	.word	0x00005441
  406f18:	000a5441 	.word	0x000a5441
  406f1c:	4e2b5441 	.word	0x4e2b5441
  406f20:	43454d41 	.word	0x43454d41
  406f24:	4e414341 	.word	0x4e414341
  406f28:	45555149 	.word	0x45555149
  406f2c:	4b495a4c 	.word	0x4b495a4c
  406f30:	00000041 	.word	0x00000041
  406f34:	502b5441 	.word	0x502b5441
  406f38:	30304e49 	.word	0x30304e49
  406f3c:	00003030 	.word	0x00003030
  406f40:	00004d4d 	.word	0x00004d4d
  406f44:	6c696146 	.word	0x6c696146
  406f48:	74206465 	.word	0x74206465
  406f4c:	7263206f 	.word	0x7263206f
  406f50:	65746165 	.word	0x65746165
  406f54:	73657420 	.word	0x73657420
  406f58:	656c2074 	.word	0x656c2074
  406f5c:	61742064 	.word	0x61742064
  406f60:	0a0d6b73 	.word	0x0a0d6b73
  406f64:	00000000 	.word	0x00000000
  406f68:	00544c42 	.word	0x00544c42
  406f6c:	656c6f72 	.word	0x656c6f72
  406f70:	00006174 	.word	0x00006174
  406f74:	65756c42 	.word	0x65756c42
  406f78:	746f6f74 	.word	0x746f6f74
  406f7c:	6e692068 	.word	0x6e692068
  406f80:	61697469 	.word	0x61697469
  406f84:	697a696c 	.word	0x697a696c
  406f88:	0a20676e 	.word	0x0a20676e
  406f8c:	00000000 	.word	0x00000000
  406f90:	00000a33 	.word	0x00000a33
  406f94:	00000a34 	.word	0x00000a34
  406f98:	3a20314d 	.word	0x3a20314d
  406f9c:	2c642520 	.word	0x2c642520
  406fa0:	20324d20 	.word	0x20324d20
  406fa4:	6425203a 	.word	0x6425203a
  406fa8:	4d202c20 	.word	0x4d202c20
  406fac:	25203a33 	.word	0x25203a33
  406fb0:	2d0a2064 	.word	0x2d0a2064
  406fb4:	2d2d2d2d 	.word	0x2d2d2d2d
  406fb8:	2d2d2d2d 	.word	0x2d2d2d2d
  406fbc:	2d2d2d2d 	.word	0x2d2d2d2d
  406fc0:	2d2d2d2d 	.word	0x2d2d2d2d
  406fc4:	2d2d2d2d 	.word	0x2d2d2d2d
  406fc8:	2d2d2d2d 	.word	0x2d2d2d2d
  406fcc:	2d2d2d2d 	.word	0x2d2d2d2d
  406fd0:	2d2d2d2d 	.word	0x2d2d2d2d
  406fd4:	0a2d2d2d 	.word	0x0a2d2d2d
  406fd8:	00000000 	.word	0x00000000
  406fdc:	63617473 	.word	0x63617473
  406fe0:	766f206b 	.word	0x766f206b
  406fe4:	6c667265 	.word	0x6c667265
  406fe8:	2520776f 	.word	0x2520776f
  406fec:	73252078 	.word	0x73252078
  406ff0:	00000a0d 	.word	0x00000a0d
  406ff4:	4354414d 	.word	0x4354414d
  406ff8:	53534548 	.word	0x53534548
  406ffc:	25205353 	.word	0x25205353
  407000:	00000a64 	.word	0x00000a64

00407004 <_global_impure_ptr>:
  407004:	20400020 33323130 37363534 42413938      .@ 0123456789AB
  407014:	46454443 00000000 33323130 37363534     CDEF....01234567
  407024:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407034:	0000296c                                l)..

00407038 <blanks.7217>:
  407038:	20202020 20202020 20202020 20202020                     

00407048 <zeroes.7218>:
  407048:	30303030 30303030 30303030 30303030     0000000000000000
  407058:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00407068 <_ctype_>:
  407068:	20202000 20202020 28282020 20282828     .         ((((( 
  407078:	20202020 20202020 20202020 20202020                     
  407088:	10108820 10101010 10101010 10101010      ...............
  407098:	04040410 04040404 10040404 10101010     ................
  4070a8:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4070b8:	01010101 01010101 01010101 10101010     ................
  4070c8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4070d8:	02020202 02020202 02020202 10101010     ................
  4070e8:	00000020 00000000 00000000 00000000      ...............
	...

0040716c <_init>:
  40716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40716e:	bf00      	nop
  407170:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407172:	bc08      	pop	{r3}
  407174:	469e      	mov	lr, r3
  407176:	4770      	bx	lr

00407178 <__init_array_start>:
  407178:	00405739 	.word	0x00405739

0040717c <__frame_dummy_init_array_entry>:
  40717c:	00400165                                e.@.

00407180 <_fini>:
  407180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407182:	bf00      	nop
  407184:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407186:	bc08      	pop	{r3}
  407188:	469e      	mov	lr, r3
  40718a:	4770      	bx	lr

0040718c <__fini_array_start>:
  40718c:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <delay_mm>:
20400014:	0064 0000                                   d...

20400018 <delay_motor_passo>:
20400018:	0003 0000                                   ....

2040001c <_impure_ptr>:
2040001c:	0020 2040                                    .@ 

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__malloc_av_>:
	...
20400450:	0448 2040 0448 2040 0450 2040 0450 2040     H.@ H.@ P.@ P.@ 
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 

20400850 <__malloc_sbrk_base>:
20400850:	ffff ffff                                   ....

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__atexit_recursive_mutex>:
20400858:	0c9c 2040                                   ..@ 

2040085c <__global_locale>:
2040085c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040087c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	6831 0040 61c1 0040 0000 0000 7068 0040     1h@..a@.....hp@.
2040094c:	7064 0040 6f64 0040 6f64 0040 6f64 0040     dp@.do@.do@.do@.
2040095c:	6f64 0040 6f64 0040 6f64 0040 6f64 0040     do@.do@.do@.do@.
2040096c:	6f64 0040 6f64 0040 ffff ffff ffff ffff     do@.do@.........
2040097c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
